{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Mapes i OpenData: Programaci\u00f3n web-sig Gu\u00eda r\u00e1pida de recursos, fechas y entregas: Gu\u00eda r\u00e1pida M2B Temario Sesi\u00f3n 1 (11 Enero - Presencial - videos 1, 2, 3 y 4) 1.1. Introducci\u00f3n a las tecnolog\u00edas GeoWeb 1.2. La Plataforma GitHub y \u00f3rdenes b\u00e1sicas Git. 1.3. Mi primer proyecto en GitHub 1.4. Introducci\u00f3n a Visual Studio Code Sesi\u00f3n 2 (16 Enero - S\u00edncrona on-line) 2.1. Introducci\u00f3n a Vector-Tiles y Mapbox Styles 2.2. Plataformas de mapas, ejemplo Mapbox 2.3. Tecnolog\u00edas JavaScript Sesi\u00f3n 3 (18 Enero - Presencial) 3.1. Librerias de mapas, ejemplo Mapox GL JS 3.2. Mi primer mapa global 3.3. Visor catastro Sesi\u00f3n 4 (20 Enero - As\u00edncrona grabada - videos 5, 6) 4.1. StoryTelling Sesi\u00f3n 5 (23 Enero - S\u00edncrona on-line) 5.1. Introducci\u00f3n Mapas 3D 5.2. Formato GeoJson 5.3. Visor de rutas Sesi\u00f3n 6 (25 Enero - Presencial) 6.1. Mapas personalizados con Maputnik y MapBox GL JS 6.2. Servicios web Geonames -Terremotos Sesi\u00f3n 7 (30 Enero - As\u00edncrona grabada - videos 7, 8, 9) 7.1. Mallas discretas y algoritmos en JS 7.2. Visualizaci\u00f3n y publicaci\u00f3n con Kepler GL Sesi\u00f3n 8 (1 Febrero - Presencial - video 10) 8.1. Turf JS 8.2. Visor de farmacias Sesi\u00f3n 9 (3 Febrero - As\u00edncrona grabada - videos 11, 12) 9.1. Progressive web applications 9.2. Mi primera PWA Sesi\u00f3n 10 (6 Febrero - S\u00edncrona on-line.md) 10.1. Tecnologia serverless 10.2. Formato FlatGeoBuf 10.3. Visor de piscinas Sesi\u00f3n 11 (8 Febrero - Presencial): 11.1. Recursos OpenData 11.2. Taller de Medium Preguntas Frecuentes](faq.md) Recursos necesarios (todos los recursos tienen versiones para Windows,Linux y Mac) Editor de c\u00f3didgo VisualStudio Code https://code.visualstudio.com/ Browser. Google Chrome o navegador basado en Chromium ejemplo Brave Servidor web. Plugin VSCode https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer Cliente GIT https://git-scm.com/download/win Ser\u00e1 necessario crear una cuenta de usuario en: GitHub https://github.com/ MapBox https://www.mapbox.com/ Medium https://medium.com/ Repositorio: https://github.com/gis-master-m2/ Soluciones ejercicios https://github.com/gis-master-m2/geoweb Autor Victor Pascual Ayats sfggeogis@gmail.com","title":"Inicio"},{"location":"#mapes-i-opendata-programacion-web-sig","text":"","title":"Mapes i OpenData: Programaci\u00f3n web-sig"},{"location":"#guia-rapida-de-recursos-fechas-y-entregas","text":"Gu\u00eda r\u00e1pida M2B","title":"Gu\u00eda r\u00e1pida de recursos, fechas y entregas:"},{"location":"#temario","text":"Sesi\u00f3n 1 (11 Enero - Presencial - videos 1, 2, 3 y 4) 1.1. Introducci\u00f3n a las tecnolog\u00edas GeoWeb 1.2. La Plataforma GitHub y \u00f3rdenes b\u00e1sicas Git. 1.3. Mi primer proyecto en GitHub 1.4. Introducci\u00f3n a Visual Studio Code Sesi\u00f3n 2 (16 Enero - S\u00edncrona on-line) 2.1. Introducci\u00f3n a Vector-Tiles y Mapbox Styles 2.2. Plataformas de mapas, ejemplo Mapbox 2.3. Tecnolog\u00edas JavaScript Sesi\u00f3n 3 (18 Enero - Presencial) 3.1. Librerias de mapas, ejemplo Mapox GL JS 3.2. Mi primer mapa global 3.3. Visor catastro Sesi\u00f3n 4 (20 Enero - As\u00edncrona grabada - videos 5, 6) 4.1. StoryTelling Sesi\u00f3n 5 (23 Enero - S\u00edncrona on-line) 5.1. Introducci\u00f3n Mapas 3D 5.2. Formato GeoJson 5.3. Visor de rutas Sesi\u00f3n 6 (25 Enero - Presencial) 6.1. Mapas personalizados con Maputnik y MapBox GL JS 6.2. Servicios web Geonames -Terremotos Sesi\u00f3n 7 (30 Enero - As\u00edncrona grabada - videos 7, 8, 9) 7.1. Mallas discretas y algoritmos en JS 7.2. Visualizaci\u00f3n y publicaci\u00f3n con Kepler GL Sesi\u00f3n 8 (1 Febrero - Presencial - video 10) 8.1. Turf JS 8.2. Visor de farmacias Sesi\u00f3n 9 (3 Febrero - As\u00edncrona grabada - videos 11, 12) 9.1. Progressive web applications 9.2. Mi primera PWA Sesi\u00f3n 10 (6 Febrero - S\u00edncrona on-line.md) 10.1. Tecnologia serverless 10.2. Formato FlatGeoBuf 10.3. Visor de piscinas Sesi\u00f3n 11 (8 Febrero - Presencial): 11.1. Recursos OpenData 11.2. Taller de Medium Preguntas Frecuentes](faq.md)","title":"Temario"},{"location":"#recursos-necesarios-todos-los-recursos-tienen-versiones-para-windowslinux-y-mac","text":"Editor de c\u00f3didgo VisualStudio Code https://code.visualstudio.com/ Browser. Google Chrome o navegador basado en Chromium ejemplo Brave Servidor web. Plugin VSCode https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer Cliente GIT https://git-scm.com/download/win","title":"Recursos necesarios (todos los recursos tienen versiones para Windows,Linux y Mac)"},{"location":"#sera-necessario-crear-una-cuenta-de-usuario-en","text":"GitHub https://github.com/ MapBox https://www.mapbox.com/ Medium https://medium.com/","title":"Ser\u00e1 necessario crear una  cuenta de usuario en:"},{"location":"#repositorio","text":"https://github.com/gis-master-m2/","title":"Repositorio:"},{"location":"#soluciones-ejercicios","text":"https://github.com/gis-master-m2/geoweb","title":"Soluciones ejercicios"},{"location":"#autor","text":"Victor Pascual Ayats sfggeogis@gmail.com","title":"Autor"},{"location":"1.1.Introduccion_a_las_tecnologias_geoweb/","text":"Introducci\u00f3n a las tecnolog\u00edas GeoWeb Las tecnolog\u00edas GeoWeb son un conjunto de herramientas y t\u00e9cnicas que permiten la integraci\u00f3n de informaci\u00f3n geogr\u00e1fica en la World Wide Web. Esto significa que se pueden utilizar para representar y visualizar datos geogr\u00e1ficos en Internet, y tambi\u00e9n para permitir que los usuarios interact\u00faen con esa informaci\u00f3n de manera sencilla y efectiva. Algunas de las tecnolog\u00edas m\u00e1s comunes que se utilizan en el GeoWeb son: Mapas en l\u00ednea: herramientas que permiten la visualizaci\u00f3n de mapas y datos geogr\u00e1ficos en Internet. Servicios de geocodificaci\u00f3n: permiten convertir direcciones o nombres de lugares en coordenadas geogr\u00e1ficas que se pueden utilizar en aplicaciones y mapas en l\u00ednea. Servicios de georeferenciaci\u00f3n: permiten a\u00f1adir informaci\u00f3n geogr\u00e1fica a im\u00e1genes o datos. Aplicaciones de realidad aumentada: permiten superponer informaci\u00f3n geogr\u00e1fica y otros datos sobre im\u00e1genes en tiempo real, como utilizar la c\u00e1mara del m\u00f3vil para ver informaci\u00f3n sobre edificios o monumentos en el entorno. Sistemas de informaci\u00f3n geogr\u00e1fica (GIS): son herramientas que permiten almacenar, procesar y visualizar datos geogr\u00e1ficos de manera eficiente. En resumen, las tecnolog\u00edas GeoWeb son un conjunto de herramientas y t\u00e9cnicas que permiten integrar informaci\u00f3n geogr\u00e1fica en Internet y hacerla accesible y f\u00e1cilmente utilizable para los usuarios. Temario Presentaci\u00f3n de m\u00f3dulo Introducci\u00f3n a las tecnolog\u00edas GeoWeb Conceptos clave geoweb Tecnolog\u00edas geoweb \u00bfC\u00f3mo vamos a trabajar? Ver presentaci\u00f3n Introduccion-geoweb.pptx Ver presentaci\u00f3n Introduccion-geoweb.pdf","title":"1.1.Introducci\u00f3n a las tecnolog\u00edas GeoWeb"},{"location":"1.1.Introduccion_a_las_tecnologias_geoweb/#introduccion-a-las-tecnologias-geoweb","text":"Las tecnolog\u00edas GeoWeb son un conjunto de herramientas y t\u00e9cnicas que permiten la integraci\u00f3n de informaci\u00f3n geogr\u00e1fica en la World Wide Web. Esto significa que se pueden utilizar para representar y visualizar datos geogr\u00e1ficos en Internet, y tambi\u00e9n para permitir que los usuarios interact\u00faen con esa informaci\u00f3n de manera sencilla y efectiva. Algunas de las tecnolog\u00edas m\u00e1s comunes que se utilizan en el GeoWeb son: Mapas en l\u00ednea: herramientas que permiten la visualizaci\u00f3n de mapas y datos geogr\u00e1ficos en Internet. Servicios de geocodificaci\u00f3n: permiten convertir direcciones o nombres de lugares en coordenadas geogr\u00e1ficas que se pueden utilizar en aplicaciones y mapas en l\u00ednea. Servicios de georeferenciaci\u00f3n: permiten a\u00f1adir informaci\u00f3n geogr\u00e1fica a im\u00e1genes o datos. Aplicaciones de realidad aumentada: permiten superponer informaci\u00f3n geogr\u00e1fica y otros datos sobre im\u00e1genes en tiempo real, como utilizar la c\u00e1mara del m\u00f3vil para ver informaci\u00f3n sobre edificios o monumentos en el entorno. Sistemas de informaci\u00f3n geogr\u00e1fica (GIS): son herramientas que permiten almacenar, procesar y visualizar datos geogr\u00e1ficos de manera eficiente. En resumen, las tecnolog\u00edas GeoWeb son un conjunto de herramientas y t\u00e9cnicas que permiten integrar informaci\u00f3n geogr\u00e1fica en Internet y hacerla accesible y f\u00e1cilmente utilizable para los usuarios. Temario Presentaci\u00f3n de m\u00f3dulo Introducci\u00f3n a las tecnolog\u00edas GeoWeb Conceptos clave geoweb Tecnolog\u00edas geoweb \u00bfC\u00f3mo vamos a trabajar?","title":"Introducci\u00f3n a las tecnolog\u00edas GeoWeb"},{"location":"1.1.Introduccion_a_las_tecnologias_geoweb/#ver-presentacion-introduccion-geowebpptx","text":"","title":"Ver presentaci\u00f3n Introduccion-geoweb.pptx"},{"location":"1.1.Introduccion_a_las_tecnologias_geoweb/#ver-presentacion-introduccion-geowebpdf","text":"","title":"Ver presentaci\u00f3n Introduccion-geoweb.pdf"},{"location":"1.2.Introduccion_github/","text":"Recursos GitHub Web https://github.com/ Tutorial https://guides.github.com/activities/hello-world/ Github Pages https://guides.github.com/features/pages/ Tutorial http://rogerdudler.github.io/git-guide/index.es.html Wikipedia https://es.wikipedia.org/wiki/GitHub \u00bfQu\u00e9 es GitHub? GitHub es una plataforma en l\u00ednea para almacenar y gestionar c\u00f3digo fuente y proyectos de software. Es una herramienta muy popular entre los desarrolladores de software y es utilizada ampliamente para colaborar en proyectos de software de todo tipo, incluyendo proyectos de c\u00f3digo abierto y proyectos privados. GitHub se basa en el sistema de control de versiones Git , que permite a los desarrolladores controlar y rastrear los cambios realizados en el c\u00f3digo fuente de un proyecto. Con GitHub, los desarrolladores pueden crear repositorios (es decir, almacenes de c\u00f3digo) para sus proyectos, y luego utilizar las herramientas de la plataforma para colaborar con otros desarrolladores en esos proyectos. Adem\u00e1s de almacenar y gestionar c\u00f3digo fuente, GitHub tambi\u00e9n proporciona una serie de otras herramientas y funcionalidades, como seguimiento de problemas, integraci\u00f3n con servicios de integraci\u00f3n y entrega continua, y la posibilidad de crear y compartir documentaci\u00f3n y otro tipo de contenido. Tambi\u00e9n permite hacer hosting de p\u00e0ginas web. \u00bfPara qu\u00e9 nos va servir GitHub? Para matener nuestros desarrollos y hacer hosting de nuestros mapas. \u00bfQu\u00e9 es Git? Git es un sistema de control de versiones de c\u00f3digo fuente, dasarrolado por Linus Torvalds (creador de Linux), que permite a los desarrolladores llevar un registro de los cambios realizados en el c\u00f3digo de un proyecto y revertir f\u00e1cilmente los cambios si es necesario. Git es ampliamente utilizado por desarrolladores de software y equipos de desarrollo para colaborar en proyectos de software de todo tipo, desde proyectos peque\u00f1os hasta proyectos muy grandes y complejos. Con Git, los desarrolladores pueden crear repositorios (es decir, almacenes de c\u00f3digo) y luego realizar cambios en el c\u00f3digo y guardar versiones de esos cambios de manera organizada y controlada. Git permite a los desarrolladores trabajar en el mismo proyecto de manera simult\u00e1nea y colaborar con otros desarrolladores de manera eficiente, sin tener que preocuparse por sobreescribir los cambios de otros desarrolladores o perder el trabajo realizado. Git es una herramienta de l\u00ednea de comandos, lo que significa que se ejecuta desde una consola o terminal. Aunque Git puede ser un poco complejo de aprender al principio, es muy poderoso y es ampliamente utilizado en la industria del desarrollo de software. Flujo de trabajo El flujo de trabajo en Git generalmente sigue los siguientes pasos: Clonar un repositorio : Antes de empezar a trabajar en un proyecto, es necesario obtener una copia del repositorio de Git localmente. Esto se hace mediante el comando git clone , seguido de la direcci\u00f3n del repositorio. Esto crear\u00e1 una copia del repositorio en su computadora. Crear una rama : Es com\u00fan crear una rama (tambi\u00e9n conocida como una \"rama de desarrollo\") para trabajar en una nueva caracter\u00edstica o solucionar un problema. Las ramas permiten a los desarrolladores trabajar en una copia del c\u00f3digo sin afectar la rama principal (tambi\u00e9n conocida como la rama \"maestra\"). Para crear una rama, se utiliza el comando git branch , seguido del nombre de la rama. Hacer cambios : Una vez que se ha creado una rama y se ha cambiado a ella, los desarrolladores pueden comenzar a hacer cambios en el c\u00f3digo. git add es un comando utilizado en Git para agregar archivos al \u00e1rea de preparaci\u00f3n (tambi\u00e9n conocida como el \u00e1rea de \"indice\"). El \u00e1rea de preparaci\u00f3n es una zona temporal donde se almacenan los cambios que se van a confirmar (es decir, hacer \"commit\") en el repositorio. Cada vez que se realiza un cambio, es necesario \"confirmar\" ese cambio con Git mediante el comando git commit . Al confirmar un cambio, se debe proporcionar un mensaje que explique el cambio realizado. Fusionar cambios : Una vez que se han realizado y confirmado los cambios en una rama, es necesario fusionar esos cambios con la rama principal. Esto se hace mediante el comando git merge , seguido del nombre de la rama. Si hay conflictos entre los cambios realizados en la rama y la rama principal, es necesario resolver manualmente estos conflictos antes de fusionar los cambios. Publicar cambios : Una vez que se han fusionado los cambios en la rama principal, es necesario publicar esos cambios en el repositorio remoto (es decir, el repositorio alojado en el servidor). Esto se hace mediante el comando git push , que env\u00eda los cambios confirmados a la rama principal del repositorio remoto. Este es un flujo de trabajo b\u00e1sico en Git, pero hay muchas otras herramientas y caracter\u00edsticas disponibles que pueden ser \u00fatiles seg\u00fan las necesidades del proyecto y el equipo de desarrollo. El repositorio local esta compuesto por tres \"\u00e1rboles\" administrados por git. El primero es tu Directorio de trabajo que contiene los archivos, el segundo es el Index que actua como una zona intermedia, y el \u00faltimo es el HEAD que apunta al \u00faltimo commit realizado. Fuente: https://rogerdudler.github.io/git-guide/index.es.html \u00d3rdenes b\u00e1sicas de Git \u00d3rdenes Description git clone <url_repo_git> Clonar proyecto git pull Recibir cambios proyecto remoto git add . A\u00f1adir cambios al \u00cdndice local git commit -m \"mensaje commit\" Realizar commit git push origin main Enviar cambios al repositorio remoto Para saber m\u00e1s: https://desarrolloweb.com/manuales/manual-de-git.html","title":"1.2.La Plataforma GitHub y \u00f3rdenes b\u00e1sicas Git."},{"location":"1.2.Introduccion_github/#recursos-github","text":"Web https://github.com/ Tutorial https://guides.github.com/activities/hello-world/ Github Pages https://guides.github.com/features/pages/ Tutorial http://rogerdudler.github.io/git-guide/index.es.html Wikipedia https://es.wikipedia.org/wiki/GitHub","title":"Recursos GitHub"},{"location":"1.2.Introduccion_github/#que-es-github","text":"GitHub es una plataforma en l\u00ednea para almacenar y gestionar c\u00f3digo fuente y proyectos de software. Es una herramienta muy popular entre los desarrolladores de software y es utilizada ampliamente para colaborar en proyectos de software de todo tipo, incluyendo proyectos de c\u00f3digo abierto y proyectos privados. GitHub se basa en el sistema de control de versiones Git , que permite a los desarrolladores controlar y rastrear los cambios realizados en el c\u00f3digo fuente de un proyecto. Con GitHub, los desarrolladores pueden crear repositorios (es decir, almacenes de c\u00f3digo) para sus proyectos, y luego utilizar las herramientas de la plataforma para colaborar con otros desarrolladores en esos proyectos. Adem\u00e1s de almacenar y gestionar c\u00f3digo fuente, GitHub tambi\u00e9n proporciona una serie de otras herramientas y funcionalidades, como seguimiento de problemas, integraci\u00f3n con servicios de integraci\u00f3n y entrega continua, y la posibilidad de crear y compartir documentaci\u00f3n y otro tipo de contenido. Tambi\u00e9n permite hacer hosting de p\u00e0ginas web.","title":"\u00bfQu\u00e9 es GitHub?"},{"location":"1.2.Introduccion_github/#para-que-nos-va-servir-github","text":"Para matener nuestros desarrollos y hacer hosting de nuestros mapas.","title":"\u00bfPara qu\u00e9 nos va servir GitHub?"},{"location":"1.2.Introduccion_github/#que-es-git","text":"Git es un sistema de control de versiones de c\u00f3digo fuente, dasarrolado por Linus Torvalds (creador de Linux), que permite a los desarrolladores llevar un registro de los cambios realizados en el c\u00f3digo de un proyecto y revertir f\u00e1cilmente los cambios si es necesario. Git es ampliamente utilizado por desarrolladores de software y equipos de desarrollo para colaborar en proyectos de software de todo tipo, desde proyectos peque\u00f1os hasta proyectos muy grandes y complejos. Con Git, los desarrolladores pueden crear repositorios (es decir, almacenes de c\u00f3digo) y luego realizar cambios en el c\u00f3digo y guardar versiones de esos cambios de manera organizada y controlada. Git permite a los desarrolladores trabajar en el mismo proyecto de manera simult\u00e1nea y colaborar con otros desarrolladores de manera eficiente, sin tener que preocuparse por sobreescribir los cambios de otros desarrolladores o perder el trabajo realizado. Git es una herramienta de l\u00ednea de comandos, lo que significa que se ejecuta desde una consola o terminal. Aunque Git puede ser un poco complejo de aprender al principio, es muy poderoso y es ampliamente utilizado en la industria del desarrollo de software.","title":"\u00bfQu\u00e9 es Git?"},{"location":"1.2.Introduccion_github/#flujo-de-trabajo","text":"El flujo de trabajo en Git generalmente sigue los siguientes pasos: Clonar un repositorio : Antes de empezar a trabajar en un proyecto, es necesario obtener una copia del repositorio de Git localmente. Esto se hace mediante el comando git clone , seguido de la direcci\u00f3n del repositorio. Esto crear\u00e1 una copia del repositorio en su computadora. Crear una rama : Es com\u00fan crear una rama (tambi\u00e9n conocida como una \"rama de desarrollo\") para trabajar en una nueva caracter\u00edstica o solucionar un problema. Las ramas permiten a los desarrolladores trabajar en una copia del c\u00f3digo sin afectar la rama principal (tambi\u00e9n conocida como la rama \"maestra\"). Para crear una rama, se utiliza el comando git branch , seguido del nombre de la rama. Hacer cambios : Una vez que se ha creado una rama y se ha cambiado a ella, los desarrolladores pueden comenzar a hacer cambios en el c\u00f3digo. git add es un comando utilizado en Git para agregar archivos al \u00e1rea de preparaci\u00f3n (tambi\u00e9n conocida como el \u00e1rea de \"indice\"). El \u00e1rea de preparaci\u00f3n es una zona temporal donde se almacenan los cambios que se van a confirmar (es decir, hacer \"commit\") en el repositorio. Cada vez que se realiza un cambio, es necesario \"confirmar\" ese cambio con Git mediante el comando git commit . Al confirmar un cambio, se debe proporcionar un mensaje que explique el cambio realizado. Fusionar cambios : Una vez que se han realizado y confirmado los cambios en una rama, es necesario fusionar esos cambios con la rama principal. Esto se hace mediante el comando git merge , seguido del nombre de la rama. Si hay conflictos entre los cambios realizados en la rama y la rama principal, es necesario resolver manualmente estos conflictos antes de fusionar los cambios. Publicar cambios : Una vez que se han fusionado los cambios en la rama principal, es necesario publicar esos cambios en el repositorio remoto (es decir, el repositorio alojado en el servidor). Esto se hace mediante el comando git push , que env\u00eda los cambios confirmados a la rama principal del repositorio remoto. Este es un flujo de trabajo b\u00e1sico en Git, pero hay muchas otras herramientas y caracter\u00edsticas disponibles que pueden ser \u00fatiles seg\u00fan las necesidades del proyecto y el equipo de desarrollo. El repositorio local esta compuesto por tres \"\u00e1rboles\" administrados por git. El primero es tu Directorio de trabajo que contiene los archivos, el segundo es el Index que actua como una zona intermedia, y el \u00faltimo es el HEAD que apunta al \u00faltimo commit realizado. Fuente: https://rogerdudler.github.io/git-guide/index.es.html","title":"Flujo de trabajo"},{"location":"1.2.Introduccion_github/#ordenes-basicas-de-git","text":"\u00d3rdenes Description git clone <url_repo_git> Clonar proyecto git pull Recibir cambios proyecto remoto git add . A\u00f1adir cambios al \u00cdndice local git commit -m \"mensaje commit\" Realizar commit git push origin main Enviar cambios al repositorio remoto Para saber m\u00e1s: https://desarrolloweb.com/manuales/manual-de-git.html","title":"\u00d3rdenes b\u00e1sicas de Git"},{"location":"1.3.proyecto_github/","text":"Descripci\u00f3n Vamos a crear un proyecto en GitHub d\u00f3nde vamos a subir todos nuestros ejemplos del m\u00f3dulo as\u00ed como la pr\u00e1ctica final Utlizaremos Visual Studio Code c\u00f3mo editor web y tambi\u00e9n para , mediante \u00f3rdenes GIT mantener nuestro repositorio Paso 0 -Instalar cliente GIT Atencion!! Para poder lanzar \u00f3rdenes GIT, clonar y mantener un reopositorio necessitamos tener instalado un cliente GIT Instalar cliente GIT para Windows https://git-scm.com/download/win Instalar cliente GIT para Mac https://git-scm.com/download/mac Instalar cliente GIT para Linux https://git-scm.com/download/linux Para m\u00e1s informaci\u00f3n ver VIDEO 1 Paso 1 - Crear usuario en GitHub Crear usuario en: https://github.com/ Atencion!! El nombre de usuario debe ser \u00fanico y NO debe tener espacios ni accentos y ser\u00e1 el subdominio de nuestras p\u00e1ginas web. As\u00ed por ejemplo podr\u00edas crear un usuario tipo vuestras iniciales m\u00e1s palabra descriptiva - ejemplo: vpa_mapas o vpa_m2b - Paso 2 - Crear repositorio Una vez validado nuestro correo y creado el usuario, vamos al avatar de la parte superior-derecha y seleccionamos Your repositories Nos mostrar\u00e1 que no tenemos repositorios y le damos al bot\u00f3n New Creamos nuevo repo llamado geoweb Para m\u00e1s informaci\u00f3n ver VIDEO 2 Paso 3 - Clonar proyecto en nuestro ordenador Vamos al bot\u00f3n verde \"Code\" seleccionamos HTTPS y copiamos la URL del proyecto Vamos a nuestro ordenador y nos situamos en el directorio d\u00f3nde vamos a trabajar, por ejemplo c:/MasterUPC/m2/ Bot\u00f3n derecho del mouse -->\" Git Bash Here \" y escribo en la consola git clone y pego la URL + Enter git clone https://github.com/ { tu usuario git } /geoweb.git Si es la primera vez que utilizamos GIT en el ordenador necesitamos configurar tu nombre de usuario y direcci\u00f3n email En la misma consola d\u00f3nde hemos hecho el clone escribimos git config --global user.name \"nuestro_usuario\" git config --global user.email nuestro_correo@example.com Note Si no aparece \"Git Bash Here\", tienes que instalar el cliente GIT https://git-scm.com/download/win Para m\u00e1s informaci\u00f3n ver VIDEO 3","title":"1.3.Mi primer proyecto en GitHub"},{"location":"1.3.proyecto_github/#descripcion","text":"Vamos a crear un proyecto en GitHub d\u00f3nde vamos a subir todos nuestros ejemplos del m\u00f3dulo as\u00ed como la pr\u00e1ctica final Utlizaremos Visual Studio Code c\u00f3mo editor web y tambi\u00e9n para , mediante \u00f3rdenes GIT mantener nuestro repositorio","title":"Descripci\u00f3n"},{"location":"1.3.proyecto_github/#paso-0-instalar-cliente-git","text":"Atencion!! Para poder lanzar \u00f3rdenes GIT, clonar y mantener un reopositorio necessitamos tener instalado un cliente GIT Instalar cliente GIT para Windows https://git-scm.com/download/win Instalar cliente GIT para Mac https://git-scm.com/download/mac Instalar cliente GIT para Linux https://git-scm.com/download/linux Para m\u00e1s informaci\u00f3n ver VIDEO 1","title":"Paso 0 -Instalar cliente GIT"},{"location":"1.3.proyecto_github/#paso-1-crear-usuario-en-github","text":"Crear usuario en: https://github.com/ Atencion!! El nombre de usuario debe ser \u00fanico y NO debe tener espacios ni accentos y ser\u00e1 el subdominio de nuestras p\u00e1ginas web. As\u00ed por ejemplo podr\u00edas crear un usuario tipo vuestras iniciales m\u00e1s palabra descriptiva - ejemplo: vpa_mapas o vpa_m2b -","title":"Paso 1 - Crear usuario en GitHub"},{"location":"1.3.proyecto_github/#paso-2-crear-repositorio","text":"Una vez validado nuestro correo y creado el usuario, vamos al avatar de la parte superior-derecha y seleccionamos Your repositories Nos mostrar\u00e1 que no tenemos repositorios y le damos al bot\u00f3n New Creamos nuevo repo llamado geoweb Para m\u00e1s informaci\u00f3n ver VIDEO 2","title":"Paso 2 - Crear repositorio"},{"location":"1.3.proyecto_github/#paso-3-clonar-proyecto-en-nuestro-ordenador","text":"Vamos al bot\u00f3n verde \"Code\" seleccionamos HTTPS y copiamos la URL del proyecto Vamos a nuestro ordenador y nos situamos en el directorio d\u00f3nde vamos a trabajar, por ejemplo c:/MasterUPC/m2/ Bot\u00f3n derecho del mouse -->\" Git Bash Here \" y escribo en la consola git clone y pego la URL + Enter git clone https://github.com/ { tu usuario git } /geoweb.git Si es la primera vez que utilizamos GIT en el ordenador necesitamos configurar tu nombre de usuario y direcci\u00f3n email En la misma consola d\u00f3nde hemos hecho el clone escribimos git config --global user.name \"nuestro_usuario\" git config --global user.email nuestro_correo@example.com Note Si no aparece \"Git Bash Here\", tienes que instalar el cliente GIT https://git-scm.com/download/win Para m\u00e1s informaci\u00f3n ver VIDEO 3","title":"Paso 3 - Clonar proyecto en nuestro ordenador"},{"location":"1.4.introduccion_vscode/","text":"Descripci\u00f3n Vamos a preparar nuestro marco de trabajo con VSCode i GitHub Paso 0 -Instalar VSCode Instalar VsCode https://code.visualstudio.com/download Paso 1 -A\u00f1adir proyecto a VSCode Abrimos VSCode y a\u00f1adimos directorio clonado /geoweb File -->Add folder to workspace Si nos pregunta: Do you trust the authors of the files in this folder? YES!! Paso 2 -Instalamos extensiones de VsCode En VsCode vamos a View -->Extensions Instalamos Live Server para poder visualizar p\u00e1ginas web como servidor local http Instalamos Prettier - Code formatter para identar nuestro c\u00f3digo Paso 3 - Creamos p\u00e1gina html Situamos puntero encima de geoweb bot\u00f3n derecho del mouse --> New File y creamos index.html Copiamos el siguiente c\u00f3digo HTML de la que ser\u00e1 nuestra p\u00e1gina de inicio < html lang = \"es\" > < head > < title > Mis mapas M2B </ title > < meta charset = \"utf-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta name = \"author\" content = \"autor\" /> < meta name = \"description\" content = \"descripci\u00f3n p\u00e1gina\" > < meta name = \"robots\" content = \"index,follow\" > </ head > < body > < h2 > Mis mapas del m\u00f3dulo M2B </ h2 > < h4 > MapboxGLJS </ h4 > < ul > < li ></ li > < li ></ li > < li ></ li > </ ul > < hr /> < h4 > StoryTelling </ h4 > < ul > < li ></ li > < li ></ li > < li ></ li > </ ul > < hr /> < h4 > KeplerGL </ h4 > < ul > < li ></ li > < li ></ li > < li ></ li > </ ul > < hr /> < h4 > Pr\u00e1cticas </ h4 > < ul > < li ></ li > < li ></ li > < li ></ li > </ ul > < hr /> </ body > </ html > Guardamos archivo crtl + s Paso 3 - Visualizamos archivo Atencion!! Para visualizar un archivo HTML NO es recomendable hacerlo c\u00f3mo si fuera un archivo local file:// , es decir \"doble-click\" sobre el archivo, ya que podria contener c\u00f3digo JavaScript que que no se ejecutara correctamente (por ejemplo todo aquello a cargar contenido a partir de rutas relativas a un recurso web). SIEMPRE visualizar archivos HTML via http:// . Para ello hemos instalado la extensi\u00f3n Live Server Situamos puntero encima de index.html bot\u00f3n derecho del mouse --> Open with Live Server Paso 4 -Subir cambios a GitHub Abrimos una terminal en VSCode, dos formas de hacerlo: Situamos puntero encima de geoweb bot\u00f3n derecho del mouse --> `Open in integrated terminal Barra de men\u00fa de VsCode View --> Terminal y dentro de la terminal escribimos (linea + tecla Enter) Escribimos ordenes GIT, hacemos tecla Enter en cada instrucci\u00f3n git pull git add . git commit -m \"add index.html\" git push -u origin main Si al hacer git pull nos dice que no reconoce el comando GIT y hemos podido clonar el proyecto Hay que cambiar el tipo de teminal de powershell a bash en VSCode Si al hacer commit la primera vez tenemos este aviso Run git config --global user.email \"you@example.com\" git config --global user.name \"Your Name\" to set your account 's default identity. Omit --global to set the identity only in this repository. fatal: unable to auto-detect email address (got ' usuario@yourpc. ( none ) ' ) Entramos nuestor usuario de git y volvemos a hacer push git config --global user.email micorreo@gmail.com git config --global user.name misusuario git pull git add . git commit -m \"add index.html\" git push -u origin main La primera vez puede ser que tengamos que autentificarnos en GitHub Al final cada vez que subamos cambios debemos escribir estas 4 lineas git pull git add . git commit -m \"mensaje commit\" git push origin main Paso 5 - GitHub como web hosting Para convertir el repo en una p\u00e1gina web, vamos a nuestro proyecto geoweb en github.com PVemos que el archivo index.html de ha subido correctamente Seleccionamos opci\u00f3n Settings --> Pages Branch -->Source opci\u00f3n main --> Save Una vez guardada veremos nuestro dominio Editamos repositorio con nuestro dominio y palabras clave https://{nuestro-usuario}.github.io/geoweb/ Pr\u00e1ctica no puntuable con GitHub Editar index.html La pagina index.html no tiene estilo. \u00bfPodri\u00e1s a\u00f1adir css y divs para maquetar mejor la p\u00e0gina. Puedes utlizar librer\u00edas com Bootstrap o Materialize para un mejor dise\u00f1o pista Recuerda que al final cada vez que subamos cambios debemos escribir estas 4 lineas git pull git add . git commit -m \"mensaje commit\" git push origin main Ejemplo con Bootstrap < html lang = \"es\" > < head > < title > Mis mapas M2B </ title > < meta charset = \"utf-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta name = \"author\" content = \"autor\" /> < meta name = \"description\" content = \"descripci\u00f3n p\u00e1gina\" > < meta name = \"robots\" content = \"index,follow\" > < link rel = \"stylesheet\" href = \"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\" integrity = \"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin = \"anonymous\" > < link rel = \"preconnect\" href = \"https://fonts.gstatic.com\" > < link href = \"https://fonts.googleapis.com/css2?family=Inconsolata&display=swap\" rel = \"stylesheet\" > < style > . seccion { border-radius : 0 px !important ; } . container { margin-top : 5 px ; } . storytelling { background-color : #e7e7f1 ; } . kepler { background-color : #f1e7ea ; } . practicas { background-color : #e7f0f1 ; } . MapboxGLJS { background-color : #e7f1e8 ; } small { font-size : 60 % !important ; } . navbar { background-color : #f1e9e7 !important ; border-radius : 0 px !important ; } . row { margin-top : 10 px ; } body { font-family : 'Inconsolata' , sans-serif !important ; font-size : 16 px !important ; } @ media screen and ( max-width : 500px ) { body { font-size : 80 % !important ; } } </ style > </ head > < body > < div class = \"container\" > < nav class = \"navbar navbar-light bg-light\" > < h4 > Mis mapas m\u00f3dulo M2B < br > < small > Mapas y OpenData, Localizaci\u00f3n, Visualizaci\u00f3n y An\u00e1lisis de GeoDatos </ small > </ h4 > </ nav > < br > < div class = \"alert seccion MapboxGLJS\" > < h5 > Mapas MapboxGLJS </ h5 > < div class = \"row\" > < div class = \"col\" > < ul > < li > <!--a\u00f1adir aqui entrada--> </ li > < li > <!--a\u00f1adir aqui entrada--> </ li > </ ul > </ div > </ div > </ div > < div class = \"alert seccion storytelling\" > < h5 > Mapas StoryTelling </ h5 > < div class = \"row\" > < div class = \"col\" > < ul > < li > <!--a\u00f1adir aqui entrada--> </ li > < li > <!--a\u00f1adir aqui entrada--> </ li > </ ul > </ div > </ div > </ div > < div class = \"alert seccion kepler\" > < h5 > Kepler.Gl </ h5 > < div class = \"row\" > < div class = \"col\" > < ul > < li > <!--a\u00f1adir aqui entrada--> </ li > < li > <!--a\u00f1adir aqui entrada--> </ li > </ ul > </ div > </ div > </ div > < div class = \"alert seccion practicas\" > < h5 > Pr\u00e1cticas puntuables </ h5 > < div class = \"row\" > < div class = \"col\" > < ul > < li > <!--a\u00f1adir aqui entrada--> </ li > < li > <!--a\u00f1adir aqui entrada--> </ li > </ ul > </ div > </ div > </ div > </ div > </ body > </ html > Informaci\u00f3n anexa, para saber m\u00e1s Para tener la documentaci\u00f3n del curso en nuestro repositorio Entamos en https://github.com/gis-master-m2/m2-geoweb Pulsmos ociopn(superior-derecha) fork Para recuperar (clonar) nuestro trabajo en otro pc, por ejemplo Nos situamos en un directorio de nuestor PC. Bot\u00f3n derecho del mouse -->\"Git bash here\" git clone https://github.com/ { tu usuario git } /geoweb.git Note Si no aparece \"Git bash here\", tienes que instalar el cliente GIT https://git-scm.com/download/win Para (clonar) clonar la doumentaci\u00f3n del curso Nos situamos en un directorio de nuestor PC. Bot\u00f3n derecho del mouse -->\"Git bash here\" git clone https://github.com/gis-master-m2/m2-geoweb.git Para actualizar-sincronizar documentacion Nos situamos dentro del directorio del proyecto, por ejemplo geoweb o m2-geoweb. Bot\u00f3n derecho del mouse -->\"Git bash here\" git pull Para crear un proyecto desde nuestro PC directament a Github Crearemos repo des de nuestro pc Tutorial Nos situamos dentro del directorio geoweb de nuestro servidor y abrimos termial git (bot\u00f3n derecho mouse y Git Bash here) git init git add . git commit -m \"proyecto geoweb\" git remote add origin https://github.com/ { tu usuario git } /geoweb.git git remote -v git push -u origin main Atentificamos con usuario y password","title":"1.4.Introducci\u00f3n a Visual Studio Code"},{"location":"1.4.introduccion_vscode/#descripcion","text":"Vamos a preparar nuestro marco de trabajo con VSCode i GitHub","title":"Descripci\u00f3n"},{"location":"1.4.introduccion_vscode/#paso-0-instalar-vscode","text":"Instalar VsCode https://code.visualstudio.com/download","title":"Paso 0 -Instalar VSCode"},{"location":"1.4.introduccion_vscode/#paso-1-anadir-proyecto-a-vscode","text":"Abrimos VSCode y a\u00f1adimos directorio clonado /geoweb File -->Add folder to workspace Si nos pregunta: Do you trust the authors of the files in this folder? YES!!","title":"Paso 1 -A\u00f1adir proyecto a VSCode"},{"location":"1.4.introduccion_vscode/#paso-2-instalamos-extensiones-de-vscode","text":"En VsCode vamos a View -->Extensions Instalamos Live Server para poder visualizar p\u00e1ginas web como servidor local http Instalamos Prettier - Code formatter para identar nuestro c\u00f3digo","title":"Paso 2 -Instalamos extensiones de VsCode"},{"location":"1.4.introduccion_vscode/#paso-3-creamos-pagina-html","text":"Situamos puntero encima de geoweb bot\u00f3n derecho del mouse --> New File y creamos index.html Copiamos el siguiente c\u00f3digo HTML de la que ser\u00e1 nuestra p\u00e1gina de inicio < html lang = \"es\" > < head > < title > Mis mapas M2B </ title > < meta charset = \"utf-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta name = \"author\" content = \"autor\" /> < meta name = \"description\" content = \"descripci\u00f3n p\u00e1gina\" > < meta name = \"robots\" content = \"index,follow\" > </ head > < body > < h2 > Mis mapas del m\u00f3dulo M2B </ h2 > < h4 > MapboxGLJS </ h4 > < ul > < li ></ li > < li ></ li > < li ></ li > </ ul > < hr /> < h4 > StoryTelling </ h4 > < ul > < li ></ li > < li ></ li > < li ></ li > </ ul > < hr /> < h4 > KeplerGL </ h4 > < ul > < li ></ li > < li ></ li > < li ></ li > </ ul > < hr /> < h4 > Pr\u00e1cticas </ h4 > < ul > < li ></ li > < li ></ li > < li ></ li > </ ul > < hr /> </ body > </ html > Guardamos archivo crtl + s","title":"Paso 3 - Creamos p\u00e1gina html"},{"location":"1.4.introduccion_vscode/#paso-3-visualizamos-archivo","text":"Atencion!! Para visualizar un archivo HTML NO es recomendable hacerlo c\u00f3mo si fuera un archivo local file:// , es decir \"doble-click\" sobre el archivo, ya que podria contener c\u00f3digo JavaScript que que no se ejecutara correctamente (por ejemplo todo aquello a cargar contenido a partir de rutas relativas a un recurso web). SIEMPRE visualizar archivos HTML via http:// . Para ello hemos instalado la extensi\u00f3n Live Server Situamos puntero encima de index.html bot\u00f3n derecho del mouse --> Open with Live Server","title":"Paso 3 - Visualizamos archivo"},{"location":"1.4.introduccion_vscode/#paso-4-subir-cambios-a-github","text":"","title":"Paso 4 -Subir cambios a GitHub"},{"location":"1.4.introduccion_vscode/#abrimos-una-terminal-en-vscode-dos-formas-de-hacerlo","text":"Situamos puntero encima de geoweb bot\u00f3n derecho del mouse --> `Open in integrated terminal Barra de men\u00fa de VsCode View --> Terminal y dentro de la terminal escribimos (linea + tecla Enter) Escribimos ordenes GIT, hacemos tecla Enter en cada instrucci\u00f3n git pull git add . git commit -m \"add index.html\" git push -u origin main Si al hacer git pull nos dice que no reconoce el comando GIT y hemos podido clonar el proyecto Hay que cambiar el tipo de teminal de powershell a bash en VSCode Si al hacer commit la primera vez tenemos este aviso Run git config --global user.email \"you@example.com\" git config --global user.name \"Your Name\" to set your account 's default identity. Omit --global to set the identity only in this repository. fatal: unable to auto-detect email address (got ' usuario@yourpc. ( none ) ' ) Entramos nuestor usuario de git y volvemos a hacer push git config --global user.email micorreo@gmail.com git config --global user.name misusuario git pull git add . git commit -m \"add index.html\" git push -u origin main La primera vez puede ser que tengamos que autentificarnos en GitHub Al final cada vez que subamos cambios debemos escribir estas 4 lineas git pull git add . git commit -m \"mensaje commit\" git push origin main","title":"Abrimos una terminal en VSCode, dos formas de hacerlo:"},{"location":"1.4.introduccion_vscode/#paso-5-github-como-web-hosting","text":"Para convertir el repo en una p\u00e1gina web, vamos a nuestro proyecto geoweb en github.com PVemos que el archivo index.html de ha subido correctamente Seleccionamos opci\u00f3n Settings --> Pages Branch -->Source opci\u00f3n main --> Save Una vez guardada veremos nuestro dominio Editamos repositorio con nuestro dominio y palabras clave https://{nuestro-usuario}.github.io/geoweb/","title":"Paso 5 - GitHub como web hosting"},{"location":"1.4.introduccion_vscode/#practica-no-puntuable-con-github","text":"Editar index.html La pagina index.html no tiene estilo. \u00bfPodri\u00e1s a\u00f1adir css y divs para maquetar mejor la p\u00e0gina. Puedes utlizar librer\u00edas com Bootstrap o Materialize para un mejor dise\u00f1o pista Recuerda que al final cada vez que subamos cambios debemos escribir estas 4 lineas git pull git add . git commit -m \"mensaje commit\" git push origin main Ejemplo con Bootstrap < html lang = \"es\" > < head > < title > Mis mapas M2B </ title > < meta charset = \"utf-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta name = \"author\" content = \"autor\" /> < meta name = \"description\" content = \"descripci\u00f3n p\u00e1gina\" > < meta name = \"robots\" content = \"index,follow\" > < link rel = \"stylesheet\" href = \"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\" integrity = \"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin = \"anonymous\" > < link rel = \"preconnect\" href = \"https://fonts.gstatic.com\" > < link href = \"https://fonts.googleapis.com/css2?family=Inconsolata&display=swap\" rel = \"stylesheet\" > < style > . seccion { border-radius : 0 px !important ; } . container { margin-top : 5 px ; } . storytelling { background-color : #e7e7f1 ; } . kepler { background-color : #f1e7ea ; } . practicas { background-color : #e7f0f1 ; } . MapboxGLJS { background-color : #e7f1e8 ; } small { font-size : 60 % !important ; } . navbar { background-color : #f1e9e7 !important ; border-radius : 0 px !important ; } . row { margin-top : 10 px ; } body { font-family : 'Inconsolata' , sans-serif !important ; font-size : 16 px !important ; } @ media screen and ( max-width : 500px ) { body { font-size : 80 % !important ; } } </ style > </ head > < body > < div class = \"container\" > < nav class = \"navbar navbar-light bg-light\" > < h4 > Mis mapas m\u00f3dulo M2B < br > < small > Mapas y OpenData, Localizaci\u00f3n, Visualizaci\u00f3n y An\u00e1lisis de GeoDatos </ small > </ h4 > </ nav > < br > < div class = \"alert seccion MapboxGLJS\" > < h5 > Mapas MapboxGLJS </ h5 > < div class = \"row\" > < div class = \"col\" > < ul > < li > <!--a\u00f1adir aqui entrada--> </ li > < li > <!--a\u00f1adir aqui entrada--> </ li > </ ul > </ div > </ div > </ div > < div class = \"alert seccion storytelling\" > < h5 > Mapas StoryTelling </ h5 > < div class = \"row\" > < div class = \"col\" > < ul > < li > <!--a\u00f1adir aqui entrada--> </ li > < li > <!--a\u00f1adir aqui entrada--> </ li > </ ul > </ div > </ div > </ div > < div class = \"alert seccion kepler\" > < h5 > Kepler.Gl </ h5 > < div class = \"row\" > < div class = \"col\" > < ul > < li > <!--a\u00f1adir aqui entrada--> </ li > < li > <!--a\u00f1adir aqui entrada--> </ li > </ ul > </ div > </ div > </ div > < div class = \"alert seccion practicas\" > < h5 > Pr\u00e1cticas puntuables </ h5 > < div class = \"row\" > < div class = \"col\" > < ul > < li > <!--a\u00f1adir aqui entrada--> </ li > < li > <!--a\u00f1adir aqui entrada--> </ li > </ ul > </ div > </ div > </ div > </ div > </ body > </ html >","title":"Pr\u00e1ctica no puntuable con GitHub"},{"location":"1.4.introduccion_vscode/#informacion-anexa-para-saber-mas","text":"","title":"Informaci\u00f3n anexa, para saber m\u00e1s"},{"location":"1.4.introduccion_vscode/#para-tener-la-documentacion-del-curso-en-nuestro-repositorio","text":"Entamos en https://github.com/gis-master-m2/m2-geoweb Pulsmos ociopn(superior-derecha) fork","title":"Para tener la documentaci\u00f3n del curso en nuestro repositorio"},{"location":"1.4.introduccion_vscode/#para-recuperar-clonar-nuestro-trabajo-en-otro-pc-por-ejemplo","text":"Nos situamos en un directorio de nuestor PC. Bot\u00f3n derecho del mouse -->\"Git bash here\" git clone https://github.com/ { tu usuario git } /geoweb.git Note Si no aparece \"Git bash here\", tienes que instalar el cliente GIT https://git-scm.com/download/win","title":"Para recuperar (clonar) nuestro trabajo en otro pc, por ejemplo"},{"location":"1.4.introduccion_vscode/#para-clonar-clonar-la-doumentacion-del-curso","text":"Nos situamos en un directorio de nuestor PC. Bot\u00f3n derecho del mouse -->\"Git bash here\" git clone https://github.com/gis-master-m2/m2-geoweb.git","title":"Para (clonar) clonar la doumentaci\u00f3n del curso"},{"location":"1.4.introduccion_vscode/#para-actualizar-sincronizar-documentacion","text":"Nos situamos dentro del directorio del proyecto, por ejemplo geoweb o m2-geoweb. Bot\u00f3n derecho del mouse -->\"Git bash here\" git pull","title":"Para actualizar-sincronizar documentacion"},{"location":"1.4.introduccion_vscode/#para-crear-un-proyecto-desde-nuestro-pc-directament-a-github","text":"Crearemos repo des de nuestro pc Tutorial Nos situamos dentro del directorio geoweb de nuestro servidor y abrimos termial git (bot\u00f3n derecho mouse y Git Bash here) git init git add . git commit -m \"proyecto geoweb\" git remote add origin https://github.com/ { tu usuario git } /geoweb.git git remote -v git push -u origin main Atentificamos con usuario y password","title":"Para crear un proyecto desde nuestro PC directament a Github"},{"location":"10.1.serverless/","text":"Pr\u00e1ctica Cementrio. Puntuable!! Creamos nuevo estilo en Mapbox Studio Descargamos capas datos/constru_cementerio.geojson y datos/cementerio.geojson A\u00f1adimos las capas como tilesets en MapxBox Integramos los tilesets dentro nuestro estilo creado Studio --> Styles --> Mi estilo --> Layers --> Add Layer --> Mi tileset Editamos estilo capas y publicamos Creamos visor ejemplo mapbox-cementerio.html Subimos ejemplo al GitHUB git pull git add . git commit -m \"practica cementerio\" git push * Entregamos la URL al visor Truco Las capa de poligonos pueden ser a\u00f1adidas con un estilo como tipo \"Fill extrusion\" y ser representados en 2.5D.","title":"10.1.Tecnologia serverless"},{"location":"10.1.serverless/#practica-cementrio-puntuable","text":"Creamos nuevo estilo en Mapbox Studio Descargamos capas datos/constru_cementerio.geojson y datos/cementerio.geojson A\u00f1adimos las capas como tilesets en MapxBox Integramos los tilesets dentro nuestro estilo creado Studio --> Styles --> Mi estilo --> Layers --> Add Layer --> Mi tileset Editamos estilo capas y publicamos Creamos visor ejemplo mapbox-cementerio.html Subimos ejemplo al GitHUB git pull git add . git commit -m \"practica cementerio\" git push * Entregamos la URL al visor Truco Las capa de poligonos pueden ser a\u00f1adidas con un estilo como tipo \"Fill extrusion\" y ser representados en 2.5D.","title":"Pr\u00e1ctica Cementrio. Puntuable!!"},{"location":"10.2.flatgeobuf/","text":"","title":"10.2.Formato FlatGeoBuf"},{"location":"10.3.piscinometro/","text":"","title":"10.3.Visor de piscinas"},{"location":"11.1.recursos_open_data/","text":"Recursos open data Ver presentaci\u00f3n OpenData (pptx) Ver presentaci\u00f3n OpenData (pdf) El MetaMapa: Ejemplo de mapificaci\u00f3n de resultados de S\u00f3crata Buscaremos mapas en formato geojson con la api discovery de S\u00f3crata https://api.us.socrata.com/api/catalog/v1?q=chicago%20crime&only=maps Para ir de la API Global hasta el recurso local debemos realizar 3 peticiones Peticio 1 API Global : https://api.us.socrata.com/api/catalog/v1?q=chicago%20crime&only=maps Peticio dos obtener url recurso https://{dominio/api/views.json?method=getByResourceName&name={id recurso} Petici\u00f3n 3 obterner el recurso https://{dminio}/api/geospatial/{recurso}?method=export&format=GeoJSON Paso 1 crear archivo metamapa Creamos un archivo con el nombre de metamapa.html en /geoweb . Creamos un archivo con el nombre de socrata.js . dentro de /geoweb/js Abrimos el archivo metamapa.html con VSCode y copiamos el siguiente c\u00f3digo. < html > < head > < meta charset = 'utf-8' /> < title > MetaMapa </ title > < meta name = 'viewport' content = 'initial-scale=1,maximum-scale=1,user-scalable=no' /> < script src = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.js' ></ script > < link href = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.css' rel = 'stylesheet' /> < link href = 'css/estilobase.css' rel = 'stylesheet' /> < script src = 'js/socrata.js' ></ script > < script > var map ; function init () { mapboxgl . accessToken = 'pk.eyJ1IjoiZ2lzbWFzdGVybTIiLCJhIjoiY2plZHhubTQxMTNoYzMza3Rqa3kxYTdrOCJ9.53B1E6mKD_EQOVb2Y0-SsA' ; map = new mapboxgl . Map ({ container : 'map' , style : 'mapbox://styles/mapbox/dark-v10' , center : [ 9.746 , 40.473 ], zoom : 5.5 , hash : true , pitch : 45 , attributionControl : false }); map . addControl ( new mapboxgl . AttributionControl ({ compact : true })); map . addControl ( new mapboxgl . NavigationControl ()); } </ script > </ head > < body onload = \"init()\" > < div id = 'map' ></ div > </ body > </ html > Paso 2 reutilizamos c\u00f3digo y opciones html Tendremos que enviar peticiones json a las Api's de Socrata , por lo tanto a\u00f1adimos js/utils.js a nuestra aplicaci\u00f3n A\u00f1adimos css de estilos bootstarp https://stackpath.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css A\u00f1adimos controles HTML dentro del <body> < html > < head > < meta charset = 'utf-8' /> < title > MetaMapa </ title > < meta name = 'viewport' content = 'initial-scale=1,maximum-scale=1,user-scalable=no' /> < script src = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.js' ></ script > < link href = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.css' rel = 'stylesheet' /> < link rel = \"stylesheet\" href = \"https://stackpath.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" /> < link href = 'css/estilobase.css' rel = 'stylesheet' /> < script src = 'js/utils.js' ></ script > < script src = 'js/socrata.js' ></ script > < style > # results { width : 100 % ; background-color : #f2f2f2 ; margin : 5 px ; } # mygrid { height : 340 px ; overflow : auto } # panelContainer { position : absolute ; top : 0 px ; left : 0 px ; width : 350 px ; background-color : white ; height : 95 % ; opacity : 0.9 ; } # num_results_socrata { width : 70 px !important ; } </ style > < script > var map ; function init () { mapboxgl . accessToken = 'pk.eyJ1IjoiZ2lzbWFzdGVybTIiLCJhIjoiY2plZHhubTQxMTNoYzMza3Rqa3kxYTdrOCJ9.53B1E6mKD_EQOVb2Y0-SsA' ; map = new mapboxgl . Map ({ container : 'map' , style : 'mapbox://styles/mapbox/dark-v10' , center : [ 9.746 , 40.473 ], zoom : 5.5 , hash : true , pitch : 45 , attributionControl : false }); map . addControl ( new mapboxgl . AttributionControl ({ compact : true })); map . addControl ( new mapboxgl . NavigationControl ()); } </ script > </ head > < body onload = \"init()\" > < div id = 'map' ></ div > < div id = \"panelContainer\" > < div class = \"col-md-12\" > < h4 > MetaMapa </ h4 > < p > Discovery API < br > < a target = \"_blank\" href = \"https://docs.socratadiscovery.apiary.io\" > https://docs.socratadiscovery.apiary.io </ a > </ p > < div class = \"form-group\" > < div class = \"radio\" > < label > < input type = \"radio\" name = \"optionsRadios\" id = \"optionsRadios1\" value = \"https://api.eu.socrata.com/api/catalog/v1?\" checked > EU API Discovery </ label > </ div > < div class = \"radio\" > < label > < input type = \"radio\" name = \"optionsRadios\" id = \"optionsRadios2\" value = \"https://api.us.socrata.com/api/catalog/v1?\" > US API Discovery </ label > </ div > </ div > < div class = \"form-group\" > < label for = \"text_filter_socrata\" > Buscar {q=} < u ></ u ></ label > < input type = \"text\" class = \"form-control\" id = \"text_filter_socrata\" value = \"\" placeholder = \"Entrar cerca\" > </ div > < div class = \"form-group\" > < label for = \"num_results_socrata\" > Num results:{limit=} </ label > < input type = \"number\" class = \"form-control\" id = \"num_results_socrata\" value = \"100\" > </ div > < div class = \"form-group\" > < button id = \"bt_send\" type = \"button\" class = \"btn btn-default btn-success\" > Enviar </ button > </ div > < hr > < div id = \"results\" ></ div > < div id = \"mygrid\" ></ div > </ div > </ div > </ body > </ html > Paso 3 Funci\u00f3n buscarMapas() A\u00f1adimos dentro de js/socrata.js la funcion buscarMapas() Para enviar la primera petici\u00f3n a la API global de S\u00f3crata https://api.eu.socrata.com/api/catalog/v1?q=wifi&limit=1&only=map function buscarMapas () { var options = document . getElementsByName ( \"optionsRadios\" ); var url_servidor ; for ( var i = 0 ; i < options . length ; i ++ ) { if ( options [ i ]. checked ) { url_servidor = options [ i ]. value ; } } var textoBuscar = document . getElementById ( \"text_filter_socrata\" ). value ; //encodeURI() var limiteResultados = document . getElementById ( \"num_results_socrata\" ). value ; var peticion1 = url_servidor + \"q=\" + textoBuscar + \"&limit=\" + limiteResultados + \"&only=map\" ; // console.log(peticion1); enviarPeticion ( peticion1 ). then ( function ( respuestaSocrata ) { if ( respuestaSocrata ) { // console.info(respuestaSocrata); document . getElementById ( \"results\" ). innerHTML = \"Resultados encontrados:<b>\" + respuestaSocrata . resultSetSize + \"</b>\" ; //$('#mygrid').html(''); var resultadosHTML ; if ( respuestaSocrata . resultSetSize >= 1 ) { resultadosHTML = \"<ul>\" ; for ( var i = 0 ; i < respuestaSocrata . results . length ; i ++ ) { resultadosHTML = resultadosHTML + '<li class=\"li\"><b>' + respuestaSocrata . results [ i ]. resource . name + ': <b>' + '<a target=\"_blank\" title=\"' + respuestaSocrata . results [ i ]. resource . attribution + '\" href=\"' + respuestaSocrata . results [ i ]. link + '\"> Link </a> ' + '<a class=\"btn btn-success btn-xs\" onClick=\"obtenerRecurso(this.id)\" title=\"' + respuestaSocrata . results [ i ]. resource . attribution + '\" href=\"#\" id=\"' + respuestaSocrata . results [ i ]. resource . id + '#' + respuestaSocrata . results [ i ]. metadata . domain + '\">Ver mapa</a>' ; } resultadosHTML = resultadosHTML + \"</ul>\" ; document . getElementById ( \"mygrid\" ). innerHTML = resultadosHTML ; } else { document . getElementById ( \"results\" ). innerHTML = \"No hay resultados\" ; } } }); //fin peticion } // fin funcion Llamamos a la funcion buscaMapa() desde metamapa.html < html > < head > < meta charset = 'utf-8' /> < title > MetaMapa </ title > < meta name = 'viewport' content = 'initial-scale=1,maximum-scale=1,user-scalable=no' /> < script src = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.js' ></ script > < link href = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.css' rel = 'stylesheet' /> < link rel = \"stylesheet\" href = \"https://stackpath.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" /> < link href = 'css/estilobase.css' rel = 'stylesheet' /> < script src = 'js/utils.js' ></ script > < script src = 'js/socrata.js' ></ script > < style > # results { width : 100 % ; background-color : #f2f2f2 ; margin : 5 px ; } # mygrid { height : 340 px ; overflow : auto } # panelContainer { position : absolute ; top : 0 px ; left : 0 px ; width : 350 px ; background-color : white ; height : 95 % ; opacity : 0.9 ; } # num_results_socrata { width : 70 px !important ; } </ style > < script > var map ; function init () { mapboxgl . accessToken = 'pk.eyJ1IjoiZ2lzbWFzdGVybTIiLCJhIjoiY2plZHhubTQxMTNoYzMza3Rqa3kxYTdrOCJ9.53B1E6mKD_EQOVb2Y0-SsA' ; map = new mapboxgl . Map ({ container : 'map' , style : 'mapbox://styles/mapbox/dark-v10' , center : [ 9.746 , 40.473 ], zoom : 5.5 , hash : true , pitch : 45 , attributionControl : false }); map . addControl ( new mapboxgl . AttributionControl ({ compact : true })); map . addControl ( new mapboxgl . NavigationControl ()); } </ script > </ head > < body onload = \"init()\" > < div id = 'map' ></ div > < div id = \"panelContainer\" > < div class = \"col-md-12\" > < h4 > MetaMapa </ h4 > < p > Discovery API < br > < a target = \"_blank\" href = \"https://docs.socratadiscovery.apiary.io\" > https://docs.socratadiscovery.apiary.io </ a > </ p > < div class = \"form-group\" > < div class = \"radio\" > < label > < input type = \"radio\" name = \"optionsRadios\" id = \"optionsRadios1\" value = \"https://api.eu.socrata.com/api/catalog/v1?\" checked > EU API Discovery </ label > </ div > < div class = \"radio\" > < label > < input type = \"radio\" name = \"optionsRadios\" id = \"optionsRadios2\" value = \"https://api.us.socrata.com/api/catalog/v1?\" > US API Discovery </ label > </ div > </ div > < div class = \"form-group\" > < label for = \"text_filter_socrata\" > Buscar {q=} < u ></ u ></ label > < input type = \"text\" class = \"form-control\" id = \"text_filter_socrata\" value = \"\" placeholder = \"Entrar cerca\" > </ div > < div class = \"form-group\" > < label for = \"num_results_socrata\" > Num results:{limit=} </ label > < input type = \"number\" class = \"form-control\" id = \"num_results_socrata\" value = \"100\" > </ div > < div class = \"form-group\" > < button id = \"bt_send\" onClick = \"buscarMapas()\" type = \"button\" class = \"btn btn-default btn-success\" > Enviar </ button > </ div > < hr > < div id = \"results\" ></ div > < div id = \"mygrid\" ></ div > </ div > </ div > </ body > </ html > Realizamos algunas b\u00fasquedas Ejemplo \"wifi\" o \"crime\" Paso 4 Petici\u00f3n 2 localizar y obtener el recurso A\u00f1adimos a socrata.js la funcion obtenerRecurso() function obtenerRecurso ( data ) { var params = data . split ( \"#\" ); var peticion2 = 'https://' + params [ 1 ] + '/api/views.json?method=getByResourceName&name=' + params [ 0 ]; enviarPeticion ( peticion2 ). then ( function ( respuestaNodoSocrata ) { var urlRecurso ; var isGeojson ; var bbox ; console . info ( respuestaNodoSocrata ); if ( respuestaNodoSocrata . metadata && respuestaNodoSocrata . metadata . geo ) { //es geo urlRecurso = 'https://' + params [ 1 ] + '/api/geospatial/' + respuestaNodoSocrata . childViews [ 0 ] + '?method=export&format=GeoJSON' ; isGeojson = true ; bbox = respuestaNodoSocrata . metadata . geo . bbox ; } else { // es una tabla urlRecurso = 'https://' + params [ 1 ] + '/resource/' + params [ 0 ] + '.json?$limit=1000' ; isGeojson = false ; bbox = null ; } //prepararDatos(urlRecurso, bbox, isGeojson) console . info ( \"urlRecurso\" , urlRecurso ); }); // fin peticion 2 } //finfuncion Realizamos algunas b\u00fasquedas y descomentamos /comentamos consoles Paso 5 Obtenr i pintar datos Descomentamos prepararDatos(urlRecurso, bbox, isGeojson); de la funci\u00f3n obtenerGeoJson Creamos la funcion prepararDatos dentro de socrata.js para obtener y/o tranformar los datos a GeoJson Creamos la funcions pintarMapa dentro de socrata.js para a\u00f1adir los datos al mapa function prepararDatos ( urlRecurso , bbox , isGeojson ) { enviarPeticion ( urlRecurso ). then ( function ( respuestaRecurso ) { if ( isGeojson ) { pintarMapa ( respuestaRecurso , bbox ); } else { var geoJSON = { \"type\" : \"FeatureCollection\" , \"features\" : [] }; for ( var i = 0 ; i < respuestaRecurso . length ; i ++ ) { if ( respuestaRecurso [ i ]. location_1 ) { geoJSON . features . push ( { \"type\" : \"Feature\" , \"properties\" : respuestaRecurso [ i ]. location_1 , \"geometry\" : { \"type\" : \"Point\" , \"coordinates\" : [ respuestaRecurso [ i ]. location_1 . longitud , respuestaRecurso [ i ]. location_1 . latitude ] } } ); } else if ( respuestaRecurso [ i ]. location ) { geoJSON . features . push ( { \"type\" : \"Feature\" , \"properties\" : respuestaRecurso [ i ]. location , \"geometry\" : { \"type\" : \"Point\" , \"coordinates\" : [ respuestaRecurso [ i ]. location . longitude , respuestaRecurso [ i ]. location . latitude ] } } ); } else { geoJSON . features . push ( { \"type\" : \"Feature\" , \"properties\" : {}, \"geometry\" : { \"type\" : \"Point\" , \"coordinates\" : [ 0 , 0 ] } } ); } } //fin for var newBBOx = geoJSON . features [ 0 ]. geometry . coordinates [ 0 ] + \",\" + geoJSON . features [ 0 ]. geometry . coordinates [ 1 ] + \",\" + geoJSON . features [ geoJSON . features . length - 1 ]. geometry . coordinates [ 0 ] + \",\" + geoJSON . features [ geoJSON . features . length - 1 ]. geometry . coordinates [ 1 ]; pintarMapa ( geoJSON , newBBOx ); } //fin else }) //fin peticion } function pintarMapa ( geoJSON , bbox ) { var tipoGeometria = geoJSON . features [ 0 ]. geometry . type ; if ( ! map . getSource ( \"datossocrata_source\" )) { map . addSource ( \"datossocrata_source\" , { type : \"geojson\" , data : geoJSON }); } else { map . getSource ( \"datossocrata_source\" ). setData ( geoJSON ); map . removeLayer ( \"socrata\" ); } if ( tipoGeometria . indexOf ( \"Line\" ) != - 1 ) { //es tipo linea map . addLayer ({ 'id' : 'socrata' , 'type' : 'line' , 'source' : 'datossocrata_source' , 'layout' : { 'line-join' : 'round' , 'line-cap' : 'round' }, 'paint' : { 'line-color' : '#ff0000' , 'line-width' : 3 } }); } else if ( tipoGeometria . indexOf ( \"Polygon\" ) != - 1 ) { //es tipo linea map . addLayer ({ 'id' : 'socrata' , 'type' : 'fill' , 'source' : 'datossocrata_source' , 'paint' : { 'fill-color' : '#ff0000' , 'fill-outline-color' : '#ffffff' , 'fill-opacity' : 0.5 } }); } else { map . addLayer ({ 'id' : 'socrata' , 'type' : 'circle' , 'source' : 'datossocrata_source' , 'paint' : { 'circle-color' : '#ff0000' , 'circle-radius' : 10 } }); } var bounds = bbox . split ( \",\" ) map . fitBounds ([[ bounds [ 0 ], bounds [ 1 ]], [ bounds [ 2 ], bounds [ 3 ]]]); } Buscamos datos Podr\u00edmos aprovecha la funci\u00f3 de info addPopupToMap(\"socrata\") map.on(\"load\", function(){ addPopupToMap(\"socrata\"); }); \u00bfSubimos el ejemplo al GitHub? git pull git add . git commit -m \"socrata\" git push Saber m\u00e1s... Ejemplos avanzados con MapBox GL JS Vamos a ver algunos ejemplos m\u00e1s avanzados y complejos \u00bfPara que no puede servir? Como base para nuestra pr\u00e1ctica final Para ver la potencialidad de los estilos de mapbox Para aprender nuevos m\u00e9todos y funcionalidades de Mapbox GL JS Para connectarnos y utlizar servicios externos Para observar formas de programar y solucionar problemas Para aprender a reutilizar c\u00f3digo Animaci\u00f3n y rotaci\u00f3n del mapa En JavaScript existe el m\u00e9todo requestAnimationFrame(callback) informa al navegador que quieres realizar una animaci\u00f3n y solicita que el navegador programe el repintado de la ventana para el pr\u00f3ximo ciclo de animaci\u00f3n. El m\u00e9todo acepta como argumento una funci\u00f3n a la que llamar antes de efectuar el repintado. Para cancelar animaci\u00f3n podemos llamar cancelAnimationFrame() MapBox GL Js tiene diferentes m\u00e9todos pensados para animar geometr\u00eda o la c\u00e1mara Rotar mapa: https://docs.mapbox.com/mapbox-gl-js/api/map/#map#rotateto Ejemplo : https://docs.mapbox.com/mapbox-gl-js/example/animate-camera-around-point/ Mover camera: https://docs.mapbox.com/mapbox-gl-js/api/properties/#freecameraoptions Ejemplo: https://docs.mapbox.com/mapbox-gl-js/example/free-camera-point/ Ejemplo rotaci\u00f3n de camara com mapa_rutas3d.html A\u00f1adimos funciones de rotaci\u00f3n a rutas.js var animacion ; function rotarCamara ( timestamp ) { rotacion = timestamp / 100 == 360 ? 0 : timestamp / 100 ; map . rotateTo ( rotacion , { duration : 0 }); animacion = requestAnimationFrame ( rotarCamara ); } function finalRotarCamara () { cancelAnimationFrame ( animacion ); } LLamamos y controlamos funciones de rotacion en mapa-rutas3d.html < html > < head > < meta charset = 'utf-8' /> < title > Mapa rutas 3D </ title > < meta name = 'viewport' content = 'initial-scale=1,maximum-scale=1,user-scalable=no' /> < script src = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.js' ></ script > < link href = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.css' rel = 'stylesheet' /> < link href = 'css/estilobase.css' rel = 'stylesheet' /> < script src = 'js/3d.js' ></ script > < script src = 'js/rutas.js' ></ script > < script > //A\u00f1adir vuestor token!! var map ; function init () { mapboxgl . accessToken = 'pk.eyJ1IjoiZ2lzbWFzdGVybTIiLCJhIjoiY2plZHhubTQxMTNoYzMza3Rqa3kxYTdrOCJ9.53B1E6mKD_EQOVb2Y0-SsA' ; map = new mapboxgl . Map ({ container : 'map' , style : 'mapbox://styles/mapbox/satellite-streets-v10' , center : [ 1.77878 , 41.60044 ], zoom : 14 , attributionControl : false , pitch : 45 , hash : true }); map . addControl ( new mapboxgl . AttributionControl ({ compact : true })); map . addControl ( new mapboxgl . NavigationControl ()); map . on ( 'load' , function () { add3D ( 'mapbox-dem' ); addRutas (); rotarCamara ( 0 ); }); //fin onload map . on ( \"click\" , function ( e ){ finalRotarCamara () }); map . on ( \"zoomstart\" , function ( e ){ finalRotarCamara () }); map . on ( \"zoomend\" , function ( e ){ rotarCamara ( 0 ); }); } // final init </ script > </ head > < body onload = \"init()\" > < div class = \"panelTopIzquierda\" > < select onChange = \"zoomToRutas(this.value)\" > < option selected value = \"14/41.60044/1.77878\" > Ruta 1 </ option > < option value = \"12.96/41.76589/2.30274\" > Ruta 2 </ option > < option value = \"13.04/42.31892/3.26054\" > Ruta 3 </ option > </ select > </ div > < div id = \"map\" ></ div > </ body > </ html > Servicios WMS y plugins MapBox GL Js permite visualizar servicios WMS siempre que soporten el EPSG:3857 Mapbox tiene tambien algunos pluguins, como por ejemplo el plugin mapbox-gl-compare https://docs.mapbox.com/mapbox-gl-js/example/mapbox-gl-compare Ejemplo comparar Ortos del a\u00f1o 1945-46 (Vuelo Americano B) y Orto actual WMS Ortos Hist\u00f3ricas https://www.icgc.cat/es/Administracion-y-empresa/Servicios/Servicios-en-linea-Geoservicios/WMS-Ortoimatges/WMS-Ortofotos Creamos p\u00e1gina mapbox-compare.html < html > < head > < meta charset = 'utf-8' /> < title > Comparador </ title > < meta name = 'viewport' content = 'initial-scale=1,maximum-scale=1,user-scalable=no' /> < script src = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.js' ></ script > < link href = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.css' rel = 'stylesheet' /> < script src = \"https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-compare/v0.4.0/mapbox-gl-compare.js\" ></ script > < link rel = \"stylesheet\" href = \"https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-compare/v0.4.0/mapbox-gl-compare.css\" type = \"text/css\" /> < style > body { margin : 0 ; padding : 0 ; overflow : hidden } # map { position : absolute ; top : 0 ; bottom : 0 ; width : 100 % ; } . map { position : absolute ; top : 0 ; bottom : 0 ; width : 100 % ; } </ style > < script > //A\u00f1adir vuestor token!! var map ; function init () { mapboxgl . accessToken = 'pk.eyJ1IjoiZ2lzbWFzdGVybTIiLCJhIjoiY2plZHhubTQxMTNoYzMza3Rqa3kxYTdrOCJ9.53B1E6mKD_EQOVb2Y0-SsA' ; var mapa1 = new mapboxgl . Map ({ container : 'mapa1' , style : 'mapbox://styles/mapbox/satellite-v9' , center : [ 2.16859 , 41.3954 ], zoom : 13 , attributionControl : false , }); var mapa2 = new mapboxgl . Map ({ container : 'mapa2' , style : 'mapbox://styles/mapbox/light-v10' , center : [ 2.16859 , 41.3954 ], zoom : 13 , attributionControl : false , }); /* ejemplos capas ortofoto_blanc_i_negre_1945, ortofoto_blanc_i_negre_1956, ortofoto_blanc_i_negre_1970-1977 */ mapa2 . on ( 'load' , function () { mapa2 . addSource ( \"orto1945\" , { type : \"raster\" , tiles : [ \"https://geoserveis.icgc.cat/servei/catalunya/orto-territorial/wms?layers=ortofoto_blanc_i_negre_1945&bbox={bbox-epsg-3857}&format=image/png&styles=&service=WMS&version=1.1.1&request=GetMap&srs=EPSG:3857&transparent=true&width=512&height=512\" , ], tileSize : 512 , maxzoom : 19 , minZoom : 7.5 , }); // ovab5m mapa2 . addLayer ({ id : \"orto1945\" , source : \"orto1945\" , type : \"raster\" , maxzoom : 18 }); }) var map = new mapboxgl . Compare ( mapa1 , mapa2 , \"#comparador\" ); } // final init </ script > </ head > < body onload = \"init()\" > < div id = \"comparador\" > < div id = \"mapa1\" class = \"map\" ></ div > < div id = \"mapa2\" class = \"map\" ></ div > </ div > </ body > </ html > Si quisieramos que fuera un estilo propio var miestilo = { version : 8 , center : [ 1.537786 , 41.837539 ], zoom : 12 , bearing : 0 , pitch : 0 , sources : { orto1945 : { type : \"raster\" , tiles : [ \"https://geoserveis.icgc.cat/servei/catalunya/orto-territorial/wms?layers=ortofoto_blanc_i_negre_1945&bbox={bbox-epsg-3857}&format=image/png&styles=&service=WMS&version=1.1.1&request=GetMap&srs=EPSG:3857&transparent=true&width=512&height=512\" , ], tileSize : 512 , maxzoom : 19 , minZoom : 7.5 , }, }, sprite : \"https://tilemaps.icgc.cat/tileserver/sprites/geologic/sprite\" , glyphs : \"https://tilemaps.icgc.cat/tileserver/glyphs/{fontstack}/{range}.pbf\" , layers : [ { id : \"orto1945\" , source : \"orto1945\" , type : \"raster\" , maxzoom : 18 }, ], }; Creamos p\u00e1gina mapbox-compare2.html y tendria este aspecto < html > < head > < meta charset = 'utf-8' /> < title > Comparador 2 </ title > < meta name = 'viewport' content = 'initial-scale=1,maximum-scale=1,user-scalable=no' /> < script src = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.js' ></ script > < link href = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.css' rel = 'stylesheet' /> < script src = \"https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-compare/v0.4.0/mapbox-gl-compare.js\" ></ script > < link rel = \"stylesheet\" href = \"https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-compare/v0.4.0/mapbox-gl-compare.css\" type = \"text/css\" /> < style > body { margin : 0 ; padding : 0 ; overflow : hidden } # map { position : absolute ; top : 0 ; bottom : 0 ; width : 100 % ; } . map { position : absolute ; top : 0 ; bottom : 0 ; width : 100 % ; } </ style > < script > var map ; var miestilo = { version : 8 , center : [ 1.537786 , 41.837539 ], zoom : 12 , bearing : 0 , pitch : 0 , sources : { orto1945 : { type : \"raster\" , tiles : [ \"https://geoserveis.icgc.cat/servei/catalunya/orto-territorial/wms?layers=ortofoto_blanc_i_negre_1945&bbox={bbox-epsg-3857}&format=image/png&styles=&service=WMS&version=1.1.1&request=GetMap&srs=EPSG:3857&transparent=true&width=512&height=512\" , ], tileSize : 512 , maxzoom : 19 , minZoom : 7.5 , }, }, sprite : \"https://tilemaps.icgc.cat/tileserver/sprites/geologic/sprite\" , glyphs : \"https://tilemaps.icgc.cat/tileserver/glyphs/{fontstack}/{range}.pbf\" , layers : [ { id : \"orto1945\" , source : \"orto1945\" , type : \"raster\" , maxzoom : 18 }, ], }; function init () { //A\u00f1adir vuestor token!! mapboxgl . accessToken = 'pk.eyJ1IjoiZ2lzbWFzdGVybTIiLCJhIjoiY2plZHhubTQxMTNoYzMza3Rqa3kxYTdrOCJ9.53B1E6mKD_EQOVb2Y0-SsA' ; var mapa1 = new mapboxgl . Map ({ container : 'mapa1' , style : 'mapbox://styles/mapbox/satellite-v9' , center : [ 2.16859 , 41.3954 ], zoom : 13 , attributionControl : false , }); var mapa2 = new mapboxgl . Map ({ container : 'mapa2' , style : miestilo , center : [ 2.16859 , 41.3954 ], zoom : 13 , attributionControl : false , }); var map = new mapboxgl . Compare ( mapa1 , mapa2 , \"#comparador\" ); } // final init </ script > </ head > < body onload = \"init()\" > < div id = \"comparador\" > < div id = \"mapa1\" class = \"map\" ></ div > < div id = \"mapa2\" class = \"map\" ></ div > </ div > </ body > </ html > \u00bfSubimos el ejemplo al GitHub? git pull git add . git commit -m \"ejemplos\" git push","title":"11.1.Recursos OpenData"},{"location":"11.1.recursos_open_data/#recursos-open-data","text":"","title":"Recursos open data"},{"location":"11.1.recursos_open_data/#ver-presentacion-opendata-pptx","text":"","title":"Ver presentaci\u00f3n OpenData (pptx)"},{"location":"11.1.recursos_open_data/#ver-presentacion-opendata-pdf","text":"","title":"Ver presentaci\u00f3n OpenData (pdf)"},{"location":"11.1.recursos_open_data/#el-metamapa-ejemplo-de-mapificacion-de-resultados-de-socrata","text":"Buscaremos mapas en formato geojson con la api discovery de S\u00f3crata https://api.us.socrata.com/api/catalog/v1?q=chicago%20crime&only=maps Para ir de la API Global hasta el recurso local debemos realizar 3 peticiones Peticio 1 API Global : https://api.us.socrata.com/api/catalog/v1?q=chicago%20crime&only=maps Peticio dos obtener url recurso https://{dominio/api/views.json?method=getByResourceName&name={id recurso} Petici\u00f3n 3 obterner el recurso https://{dminio}/api/geospatial/{recurso}?method=export&format=GeoJSON","title":"El MetaMapa: Ejemplo de mapificaci\u00f3n de resultados de S\u00f3crata"},{"location":"11.1.recursos_open_data/#paso-1-crear-archivo-metamapa","text":"Creamos un archivo con el nombre de metamapa.html en /geoweb . Creamos un archivo con el nombre de socrata.js . dentro de /geoweb/js Abrimos el archivo metamapa.html con VSCode y copiamos el siguiente c\u00f3digo. < html > < head > < meta charset = 'utf-8' /> < title > MetaMapa </ title > < meta name = 'viewport' content = 'initial-scale=1,maximum-scale=1,user-scalable=no' /> < script src = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.js' ></ script > < link href = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.css' rel = 'stylesheet' /> < link href = 'css/estilobase.css' rel = 'stylesheet' /> < script src = 'js/socrata.js' ></ script > < script > var map ; function init () { mapboxgl . accessToken = 'pk.eyJ1IjoiZ2lzbWFzdGVybTIiLCJhIjoiY2plZHhubTQxMTNoYzMza3Rqa3kxYTdrOCJ9.53B1E6mKD_EQOVb2Y0-SsA' ; map = new mapboxgl . Map ({ container : 'map' , style : 'mapbox://styles/mapbox/dark-v10' , center : [ 9.746 , 40.473 ], zoom : 5.5 , hash : true , pitch : 45 , attributionControl : false }); map . addControl ( new mapboxgl . AttributionControl ({ compact : true })); map . addControl ( new mapboxgl . NavigationControl ()); } </ script > </ head > < body onload = \"init()\" > < div id = 'map' ></ div > </ body > </ html >","title":"Paso 1 crear archivo metamapa"},{"location":"11.1.recursos_open_data/#paso-2-reutilizamos-codigo-y-opciones-html","text":"Tendremos que enviar peticiones json a las Api's de Socrata , por lo tanto a\u00f1adimos js/utils.js a nuestra aplicaci\u00f3n A\u00f1adimos css de estilos bootstarp https://stackpath.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css A\u00f1adimos controles HTML dentro del <body> < html > < head > < meta charset = 'utf-8' /> < title > MetaMapa </ title > < meta name = 'viewport' content = 'initial-scale=1,maximum-scale=1,user-scalable=no' /> < script src = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.js' ></ script > < link href = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.css' rel = 'stylesheet' /> < link rel = \"stylesheet\" href = \"https://stackpath.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" /> < link href = 'css/estilobase.css' rel = 'stylesheet' /> < script src = 'js/utils.js' ></ script > < script src = 'js/socrata.js' ></ script > < style > # results { width : 100 % ; background-color : #f2f2f2 ; margin : 5 px ; } # mygrid { height : 340 px ; overflow : auto } # panelContainer { position : absolute ; top : 0 px ; left : 0 px ; width : 350 px ; background-color : white ; height : 95 % ; opacity : 0.9 ; } # num_results_socrata { width : 70 px !important ; } </ style > < script > var map ; function init () { mapboxgl . accessToken = 'pk.eyJ1IjoiZ2lzbWFzdGVybTIiLCJhIjoiY2plZHhubTQxMTNoYzMza3Rqa3kxYTdrOCJ9.53B1E6mKD_EQOVb2Y0-SsA' ; map = new mapboxgl . Map ({ container : 'map' , style : 'mapbox://styles/mapbox/dark-v10' , center : [ 9.746 , 40.473 ], zoom : 5.5 , hash : true , pitch : 45 , attributionControl : false }); map . addControl ( new mapboxgl . AttributionControl ({ compact : true })); map . addControl ( new mapboxgl . NavigationControl ()); } </ script > </ head > < body onload = \"init()\" > < div id = 'map' ></ div > < div id = \"panelContainer\" > < div class = \"col-md-12\" > < h4 > MetaMapa </ h4 > < p > Discovery API < br > < a target = \"_blank\" href = \"https://docs.socratadiscovery.apiary.io\" > https://docs.socratadiscovery.apiary.io </ a > </ p > < div class = \"form-group\" > < div class = \"radio\" > < label > < input type = \"radio\" name = \"optionsRadios\" id = \"optionsRadios1\" value = \"https://api.eu.socrata.com/api/catalog/v1?\" checked > EU API Discovery </ label > </ div > < div class = \"radio\" > < label > < input type = \"radio\" name = \"optionsRadios\" id = \"optionsRadios2\" value = \"https://api.us.socrata.com/api/catalog/v1?\" > US API Discovery </ label > </ div > </ div > < div class = \"form-group\" > < label for = \"text_filter_socrata\" > Buscar {q=} < u ></ u ></ label > < input type = \"text\" class = \"form-control\" id = \"text_filter_socrata\" value = \"\" placeholder = \"Entrar cerca\" > </ div > < div class = \"form-group\" > < label for = \"num_results_socrata\" > Num results:{limit=} </ label > < input type = \"number\" class = \"form-control\" id = \"num_results_socrata\" value = \"100\" > </ div > < div class = \"form-group\" > < button id = \"bt_send\" type = \"button\" class = \"btn btn-default btn-success\" > Enviar </ button > </ div > < hr > < div id = \"results\" ></ div > < div id = \"mygrid\" ></ div > </ div > </ div > </ body > </ html >","title":"Paso 2 reutilizamos c\u00f3digo y opciones html"},{"location":"11.1.recursos_open_data/#paso-3-funcion-buscarmapas","text":"A\u00f1adimos dentro de js/socrata.js la funcion buscarMapas() Para enviar la primera petici\u00f3n a la API global de S\u00f3crata https://api.eu.socrata.com/api/catalog/v1?q=wifi&limit=1&only=map function buscarMapas () { var options = document . getElementsByName ( \"optionsRadios\" ); var url_servidor ; for ( var i = 0 ; i < options . length ; i ++ ) { if ( options [ i ]. checked ) { url_servidor = options [ i ]. value ; } } var textoBuscar = document . getElementById ( \"text_filter_socrata\" ). value ; //encodeURI() var limiteResultados = document . getElementById ( \"num_results_socrata\" ). value ; var peticion1 = url_servidor + \"q=\" + textoBuscar + \"&limit=\" + limiteResultados + \"&only=map\" ; // console.log(peticion1); enviarPeticion ( peticion1 ). then ( function ( respuestaSocrata ) { if ( respuestaSocrata ) { // console.info(respuestaSocrata); document . getElementById ( \"results\" ). innerHTML = \"Resultados encontrados:<b>\" + respuestaSocrata . resultSetSize + \"</b>\" ; //$('#mygrid').html(''); var resultadosHTML ; if ( respuestaSocrata . resultSetSize >= 1 ) { resultadosHTML = \"<ul>\" ; for ( var i = 0 ; i < respuestaSocrata . results . length ; i ++ ) { resultadosHTML = resultadosHTML + '<li class=\"li\"><b>' + respuestaSocrata . results [ i ]. resource . name + ': <b>' + '<a target=\"_blank\" title=\"' + respuestaSocrata . results [ i ]. resource . attribution + '\" href=\"' + respuestaSocrata . results [ i ]. link + '\"> Link </a> ' + '<a class=\"btn btn-success btn-xs\" onClick=\"obtenerRecurso(this.id)\" title=\"' + respuestaSocrata . results [ i ]. resource . attribution + '\" href=\"#\" id=\"' + respuestaSocrata . results [ i ]. resource . id + '#' + respuestaSocrata . results [ i ]. metadata . domain + '\">Ver mapa</a>' ; } resultadosHTML = resultadosHTML + \"</ul>\" ; document . getElementById ( \"mygrid\" ). innerHTML = resultadosHTML ; } else { document . getElementById ( \"results\" ). innerHTML = \"No hay resultados\" ; } } }); //fin peticion } // fin funcion Llamamos a la funcion buscaMapa() desde metamapa.html < html > < head > < meta charset = 'utf-8' /> < title > MetaMapa </ title > < meta name = 'viewport' content = 'initial-scale=1,maximum-scale=1,user-scalable=no' /> < script src = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.js' ></ script > < link href = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.css' rel = 'stylesheet' /> < link rel = \"stylesheet\" href = \"https://stackpath.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" /> < link href = 'css/estilobase.css' rel = 'stylesheet' /> < script src = 'js/utils.js' ></ script > < script src = 'js/socrata.js' ></ script > < style > # results { width : 100 % ; background-color : #f2f2f2 ; margin : 5 px ; } # mygrid { height : 340 px ; overflow : auto } # panelContainer { position : absolute ; top : 0 px ; left : 0 px ; width : 350 px ; background-color : white ; height : 95 % ; opacity : 0.9 ; } # num_results_socrata { width : 70 px !important ; } </ style > < script > var map ; function init () { mapboxgl . accessToken = 'pk.eyJ1IjoiZ2lzbWFzdGVybTIiLCJhIjoiY2plZHhubTQxMTNoYzMza3Rqa3kxYTdrOCJ9.53B1E6mKD_EQOVb2Y0-SsA' ; map = new mapboxgl . Map ({ container : 'map' , style : 'mapbox://styles/mapbox/dark-v10' , center : [ 9.746 , 40.473 ], zoom : 5.5 , hash : true , pitch : 45 , attributionControl : false }); map . addControl ( new mapboxgl . AttributionControl ({ compact : true })); map . addControl ( new mapboxgl . NavigationControl ()); } </ script > </ head > < body onload = \"init()\" > < div id = 'map' ></ div > < div id = \"panelContainer\" > < div class = \"col-md-12\" > < h4 > MetaMapa </ h4 > < p > Discovery API < br > < a target = \"_blank\" href = \"https://docs.socratadiscovery.apiary.io\" > https://docs.socratadiscovery.apiary.io </ a > </ p > < div class = \"form-group\" > < div class = \"radio\" > < label > < input type = \"radio\" name = \"optionsRadios\" id = \"optionsRadios1\" value = \"https://api.eu.socrata.com/api/catalog/v1?\" checked > EU API Discovery </ label > </ div > < div class = \"radio\" > < label > < input type = \"radio\" name = \"optionsRadios\" id = \"optionsRadios2\" value = \"https://api.us.socrata.com/api/catalog/v1?\" > US API Discovery </ label > </ div > </ div > < div class = \"form-group\" > < label for = \"text_filter_socrata\" > Buscar {q=} < u ></ u ></ label > < input type = \"text\" class = \"form-control\" id = \"text_filter_socrata\" value = \"\" placeholder = \"Entrar cerca\" > </ div > < div class = \"form-group\" > < label for = \"num_results_socrata\" > Num results:{limit=} </ label > < input type = \"number\" class = \"form-control\" id = \"num_results_socrata\" value = \"100\" > </ div > < div class = \"form-group\" > < button id = \"bt_send\" onClick = \"buscarMapas()\" type = \"button\" class = \"btn btn-default btn-success\" > Enviar </ button > </ div > < hr > < div id = \"results\" ></ div > < div id = \"mygrid\" ></ div > </ div > </ div > </ body > </ html > Realizamos algunas b\u00fasquedas Ejemplo \"wifi\" o \"crime\"","title":"Paso 3 Funci\u00f3n buscarMapas()"},{"location":"11.1.recursos_open_data/#paso-4-peticion-2-localizar-y-obtener-el-recurso","text":"A\u00f1adimos a socrata.js la funcion obtenerRecurso() function obtenerRecurso ( data ) { var params = data . split ( \"#\" ); var peticion2 = 'https://' + params [ 1 ] + '/api/views.json?method=getByResourceName&name=' + params [ 0 ]; enviarPeticion ( peticion2 ). then ( function ( respuestaNodoSocrata ) { var urlRecurso ; var isGeojson ; var bbox ; console . info ( respuestaNodoSocrata ); if ( respuestaNodoSocrata . metadata && respuestaNodoSocrata . metadata . geo ) { //es geo urlRecurso = 'https://' + params [ 1 ] + '/api/geospatial/' + respuestaNodoSocrata . childViews [ 0 ] + '?method=export&format=GeoJSON' ; isGeojson = true ; bbox = respuestaNodoSocrata . metadata . geo . bbox ; } else { // es una tabla urlRecurso = 'https://' + params [ 1 ] + '/resource/' + params [ 0 ] + '.json?$limit=1000' ; isGeojson = false ; bbox = null ; } //prepararDatos(urlRecurso, bbox, isGeojson) console . info ( \"urlRecurso\" , urlRecurso ); }); // fin peticion 2 } //finfuncion Realizamos algunas b\u00fasquedas y descomentamos /comentamos consoles","title":"Paso 4 Petici\u00f3n 2 localizar y obtener el recurso"},{"location":"11.1.recursos_open_data/#paso-5-obtenr-i-pintar-datos","text":"Descomentamos prepararDatos(urlRecurso, bbox, isGeojson); de la funci\u00f3n obtenerGeoJson Creamos la funcion prepararDatos dentro de socrata.js para obtener y/o tranformar los datos a GeoJson Creamos la funcions pintarMapa dentro de socrata.js para a\u00f1adir los datos al mapa function prepararDatos ( urlRecurso , bbox , isGeojson ) { enviarPeticion ( urlRecurso ). then ( function ( respuestaRecurso ) { if ( isGeojson ) { pintarMapa ( respuestaRecurso , bbox ); } else { var geoJSON = { \"type\" : \"FeatureCollection\" , \"features\" : [] }; for ( var i = 0 ; i < respuestaRecurso . length ; i ++ ) { if ( respuestaRecurso [ i ]. location_1 ) { geoJSON . features . push ( { \"type\" : \"Feature\" , \"properties\" : respuestaRecurso [ i ]. location_1 , \"geometry\" : { \"type\" : \"Point\" , \"coordinates\" : [ respuestaRecurso [ i ]. location_1 . longitud , respuestaRecurso [ i ]. location_1 . latitude ] } } ); } else if ( respuestaRecurso [ i ]. location ) { geoJSON . features . push ( { \"type\" : \"Feature\" , \"properties\" : respuestaRecurso [ i ]. location , \"geometry\" : { \"type\" : \"Point\" , \"coordinates\" : [ respuestaRecurso [ i ]. location . longitude , respuestaRecurso [ i ]. location . latitude ] } } ); } else { geoJSON . features . push ( { \"type\" : \"Feature\" , \"properties\" : {}, \"geometry\" : { \"type\" : \"Point\" , \"coordinates\" : [ 0 , 0 ] } } ); } } //fin for var newBBOx = geoJSON . features [ 0 ]. geometry . coordinates [ 0 ] + \",\" + geoJSON . features [ 0 ]. geometry . coordinates [ 1 ] + \",\" + geoJSON . features [ geoJSON . features . length - 1 ]. geometry . coordinates [ 0 ] + \",\" + geoJSON . features [ geoJSON . features . length - 1 ]. geometry . coordinates [ 1 ]; pintarMapa ( geoJSON , newBBOx ); } //fin else }) //fin peticion } function pintarMapa ( geoJSON , bbox ) { var tipoGeometria = geoJSON . features [ 0 ]. geometry . type ; if ( ! map . getSource ( \"datossocrata_source\" )) { map . addSource ( \"datossocrata_source\" , { type : \"geojson\" , data : geoJSON }); } else { map . getSource ( \"datossocrata_source\" ). setData ( geoJSON ); map . removeLayer ( \"socrata\" ); } if ( tipoGeometria . indexOf ( \"Line\" ) != - 1 ) { //es tipo linea map . addLayer ({ 'id' : 'socrata' , 'type' : 'line' , 'source' : 'datossocrata_source' , 'layout' : { 'line-join' : 'round' , 'line-cap' : 'round' }, 'paint' : { 'line-color' : '#ff0000' , 'line-width' : 3 } }); } else if ( tipoGeometria . indexOf ( \"Polygon\" ) != - 1 ) { //es tipo linea map . addLayer ({ 'id' : 'socrata' , 'type' : 'fill' , 'source' : 'datossocrata_source' , 'paint' : { 'fill-color' : '#ff0000' , 'fill-outline-color' : '#ffffff' , 'fill-opacity' : 0.5 } }); } else { map . addLayer ({ 'id' : 'socrata' , 'type' : 'circle' , 'source' : 'datossocrata_source' , 'paint' : { 'circle-color' : '#ff0000' , 'circle-radius' : 10 } }); } var bounds = bbox . split ( \",\" ) map . fitBounds ([[ bounds [ 0 ], bounds [ 1 ]], [ bounds [ 2 ], bounds [ 3 ]]]); } Buscamos datos Podr\u00edmos aprovecha la funci\u00f3 de info addPopupToMap(\"socrata\") map.on(\"load\", function(){ addPopupToMap(\"socrata\"); }); \u00bfSubimos el ejemplo al GitHub? git pull git add . git commit -m \"socrata\" git push","title":"Paso 5 Obtenr i pintar datos"},{"location":"11.1.recursos_open_data/#saber-mas-ejemplos-avanzados-con-mapbox-gl-js","text":"Vamos a ver algunos ejemplos m\u00e1s avanzados y complejos","title":"Saber m\u00e1s... Ejemplos avanzados con MapBox GL JS"},{"location":"11.1.recursos_open_data/#para-que-no-puede-servir","text":"Como base para nuestra pr\u00e1ctica final Para ver la potencialidad de los estilos de mapbox Para aprender nuevos m\u00e9todos y funcionalidades de Mapbox GL JS Para connectarnos y utlizar servicios externos Para observar formas de programar y solucionar problemas Para aprender a reutilizar c\u00f3digo","title":"\u00bfPara que no puede servir?"},{"location":"11.1.recursos_open_data/#animacion-y-rotacion-del-mapa","text":"En JavaScript existe el m\u00e9todo requestAnimationFrame(callback) informa al navegador que quieres realizar una animaci\u00f3n y solicita que el navegador programe el repintado de la ventana para el pr\u00f3ximo ciclo de animaci\u00f3n. El m\u00e9todo acepta como argumento una funci\u00f3n a la que llamar antes de efectuar el repintado. Para cancelar animaci\u00f3n podemos llamar cancelAnimationFrame() MapBox GL Js tiene diferentes m\u00e9todos pensados para animar geometr\u00eda o la c\u00e1mara Rotar mapa: https://docs.mapbox.com/mapbox-gl-js/api/map/#map#rotateto Ejemplo : https://docs.mapbox.com/mapbox-gl-js/example/animate-camera-around-point/ Mover camera: https://docs.mapbox.com/mapbox-gl-js/api/properties/#freecameraoptions Ejemplo: https://docs.mapbox.com/mapbox-gl-js/example/free-camera-point/","title":"Animaci\u00f3n y rotaci\u00f3n del mapa"},{"location":"11.1.recursos_open_data/#ejemplo-rotacion-de-camara-com-mapa_rutas3dhtml","text":"A\u00f1adimos funciones de rotaci\u00f3n a rutas.js var animacion ; function rotarCamara ( timestamp ) { rotacion = timestamp / 100 == 360 ? 0 : timestamp / 100 ; map . rotateTo ( rotacion , { duration : 0 }); animacion = requestAnimationFrame ( rotarCamara ); } function finalRotarCamara () { cancelAnimationFrame ( animacion ); } LLamamos y controlamos funciones de rotacion en mapa-rutas3d.html < html > < head > < meta charset = 'utf-8' /> < title > Mapa rutas 3D </ title > < meta name = 'viewport' content = 'initial-scale=1,maximum-scale=1,user-scalable=no' /> < script src = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.js' ></ script > < link href = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.css' rel = 'stylesheet' /> < link href = 'css/estilobase.css' rel = 'stylesheet' /> < script src = 'js/3d.js' ></ script > < script src = 'js/rutas.js' ></ script > < script > //A\u00f1adir vuestor token!! var map ; function init () { mapboxgl . accessToken = 'pk.eyJ1IjoiZ2lzbWFzdGVybTIiLCJhIjoiY2plZHhubTQxMTNoYzMza3Rqa3kxYTdrOCJ9.53B1E6mKD_EQOVb2Y0-SsA' ; map = new mapboxgl . Map ({ container : 'map' , style : 'mapbox://styles/mapbox/satellite-streets-v10' , center : [ 1.77878 , 41.60044 ], zoom : 14 , attributionControl : false , pitch : 45 , hash : true }); map . addControl ( new mapboxgl . AttributionControl ({ compact : true })); map . addControl ( new mapboxgl . NavigationControl ()); map . on ( 'load' , function () { add3D ( 'mapbox-dem' ); addRutas (); rotarCamara ( 0 ); }); //fin onload map . on ( \"click\" , function ( e ){ finalRotarCamara () }); map . on ( \"zoomstart\" , function ( e ){ finalRotarCamara () }); map . on ( \"zoomend\" , function ( e ){ rotarCamara ( 0 ); }); } // final init </ script > </ head > < body onload = \"init()\" > < div class = \"panelTopIzquierda\" > < select onChange = \"zoomToRutas(this.value)\" > < option selected value = \"14/41.60044/1.77878\" > Ruta 1 </ option > < option value = \"12.96/41.76589/2.30274\" > Ruta 2 </ option > < option value = \"13.04/42.31892/3.26054\" > Ruta 3 </ option > </ select > </ div > < div id = \"map\" ></ div > </ body > </ html >","title":"Ejemplo rotaci\u00f3n de camara com mapa_rutas3d.html"},{"location":"11.1.recursos_open_data/#servicios-wms-y-plugins","text":"MapBox GL Js permite visualizar servicios WMS siempre que soporten el EPSG:3857 Mapbox tiene tambien algunos pluguins, como por ejemplo el plugin mapbox-gl-compare https://docs.mapbox.com/mapbox-gl-js/example/mapbox-gl-compare","title":"Servicios WMS y plugins"},{"location":"11.1.recursos_open_data/#ejemplo-comparar-ortos-del-ano-1945-46-vuelo-americano-b-y-orto-actual","text":"WMS Ortos Hist\u00f3ricas https://www.icgc.cat/es/Administracion-y-empresa/Servicios/Servicios-en-linea-Geoservicios/WMS-Ortoimatges/WMS-Ortofotos Creamos p\u00e1gina mapbox-compare.html < html > < head > < meta charset = 'utf-8' /> < title > Comparador </ title > < meta name = 'viewport' content = 'initial-scale=1,maximum-scale=1,user-scalable=no' /> < script src = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.js' ></ script > < link href = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.css' rel = 'stylesheet' /> < script src = \"https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-compare/v0.4.0/mapbox-gl-compare.js\" ></ script > < link rel = \"stylesheet\" href = \"https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-compare/v0.4.0/mapbox-gl-compare.css\" type = \"text/css\" /> < style > body { margin : 0 ; padding : 0 ; overflow : hidden } # map { position : absolute ; top : 0 ; bottom : 0 ; width : 100 % ; } . map { position : absolute ; top : 0 ; bottom : 0 ; width : 100 % ; } </ style > < script > //A\u00f1adir vuestor token!! var map ; function init () { mapboxgl . accessToken = 'pk.eyJ1IjoiZ2lzbWFzdGVybTIiLCJhIjoiY2plZHhubTQxMTNoYzMza3Rqa3kxYTdrOCJ9.53B1E6mKD_EQOVb2Y0-SsA' ; var mapa1 = new mapboxgl . Map ({ container : 'mapa1' , style : 'mapbox://styles/mapbox/satellite-v9' , center : [ 2.16859 , 41.3954 ], zoom : 13 , attributionControl : false , }); var mapa2 = new mapboxgl . Map ({ container : 'mapa2' , style : 'mapbox://styles/mapbox/light-v10' , center : [ 2.16859 , 41.3954 ], zoom : 13 , attributionControl : false , }); /* ejemplos capas ortofoto_blanc_i_negre_1945, ortofoto_blanc_i_negre_1956, ortofoto_blanc_i_negre_1970-1977 */ mapa2 . on ( 'load' , function () { mapa2 . addSource ( \"orto1945\" , { type : \"raster\" , tiles : [ \"https://geoserveis.icgc.cat/servei/catalunya/orto-territorial/wms?layers=ortofoto_blanc_i_negre_1945&bbox={bbox-epsg-3857}&format=image/png&styles=&service=WMS&version=1.1.1&request=GetMap&srs=EPSG:3857&transparent=true&width=512&height=512\" , ], tileSize : 512 , maxzoom : 19 , minZoom : 7.5 , }); // ovab5m mapa2 . addLayer ({ id : \"orto1945\" , source : \"orto1945\" , type : \"raster\" , maxzoom : 18 }); }) var map = new mapboxgl . Compare ( mapa1 , mapa2 , \"#comparador\" ); } // final init </ script > </ head > < body onload = \"init()\" > < div id = \"comparador\" > < div id = \"mapa1\" class = \"map\" ></ div > < div id = \"mapa2\" class = \"map\" ></ div > </ div > </ body > </ html > Si quisieramos que fuera un estilo propio var miestilo = { version : 8 , center : [ 1.537786 , 41.837539 ], zoom : 12 , bearing : 0 , pitch : 0 , sources : { orto1945 : { type : \"raster\" , tiles : [ \"https://geoserveis.icgc.cat/servei/catalunya/orto-territorial/wms?layers=ortofoto_blanc_i_negre_1945&bbox={bbox-epsg-3857}&format=image/png&styles=&service=WMS&version=1.1.1&request=GetMap&srs=EPSG:3857&transparent=true&width=512&height=512\" , ], tileSize : 512 , maxzoom : 19 , minZoom : 7.5 , }, }, sprite : \"https://tilemaps.icgc.cat/tileserver/sprites/geologic/sprite\" , glyphs : \"https://tilemaps.icgc.cat/tileserver/glyphs/{fontstack}/{range}.pbf\" , layers : [ { id : \"orto1945\" , source : \"orto1945\" , type : \"raster\" , maxzoom : 18 }, ], }; Creamos p\u00e1gina mapbox-compare2.html y tendria este aspecto < html > < head > < meta charset = 'utf-8' /> < title > Comparador 2 </ title > < meta name = 'viewport' content = 'initial-scale=1,maximum-scale=1,user-scalable=no' /> < script src = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.js' ></ script > < link href = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.css' rel = 'stylesheet' /> < script src = \"https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-compare/v0.4.0/mapbox-gl-compare.js\" ></ script > < link rel = \"stylesheet\" href = \"https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-compare/v0.4.0/mapbox-gl-compare.css\" type = \"text/css\" /> < style > body { margin : 0 ; padding : 0 ; overflow : hidden } # map { position : absolute ; top : 0 ; bottom : 0 ; width : 100 % ; } . map { position : absolute ; top : 0 ; bottom : 0 ; width : 100 % ; } </ style > < script > var map ; var miestilo = { version : 8 , center : [ 1.537786 , 41.837539 ], zoom : 12 , bearing : 0 , pitch : 0 , sources : { orto1945 : { type : \"raster\" , tiles : [ \"https://geoserveis.icgc.cat/servei/catalunya/orto-territorial/wms?layers=ortofoto_blanc_i_negre_1945&bbox={bbox-epsg-3857}&format=image/png&styles=&service=WMS&version=1.1.1&request=GetMap&srs=EPSG:3857&transparent=true&width=512&height=512\" , ], tileSize : 512 , maxzoom : 19 , minZoom : 7.5 , }, }, sprite : \"https://tilemaps.icgc.cat/tileserver/sprites/geologic/sprite\" , glyphs : \"https://tilemaps.icgc.cat/tileserver/glyphs/{fontstack}/{range}.pbf\" , layers : [ { id : \"orto1945\" , source : \"orto1945\" , type : \"raster\" , maxzoom : 18 }, ], }; function init () { //A\u00f1adir vuestor token!! mapboxgl . accessToken = 'pk.eyJ1IjoiZ2lzbWFzdGVybTIiLCJhIjoiY2plZHhubTQxMTNoYzMza3Rqa3kxYTdrOCJ9.53B1E6mKD_EQOVb2Y0-SsA' ; var mapa1 = new mapboxgl . Map ({ container : 'mapa1' , style : 'mapbox://styles/mapbox/satellite-v9' , center : [ 2.16859 , 41.3954 ], zoom : 13 , attributionControl : false , }); var mapa2 = new mapboxgl . Map ({ container : 'mapa2' , style : miestilo , center : [ 2.16859 , 41.3954 ], zoom : 13 , attributionControl : false , }); var map = new mapboxgl . Compare ( mapa1 , mapa2 , \"#comparador\" ); } // final init </ script > </ head > < body onload = \"init()\" > < div id = \"comparador\" > < div id = \"mapa1\" class = \"map\" ></ div > < div id = \"mapa2\" class = \"map\" ></ div > </ div > </ body > </ html > \u00bfSubimos el ejemplo al GitHub? git pull git add . git commit -m \"ejemplos\" git push","title":"Ejemplo comparar Ortos del a\u00f1o 1945-46 (Vuelo Americano B) y Orto actual"},{"location":"11.2.taller_medium/","text":"Medium Recursos Medium Web https://medium.com// Tutorials https://help.medium.com/hc/en-us/articles/225168768 https://help.medium.com/hc/en-us/articles/115004681607-Create-a-publication Tutorial https://blog.hubspot.com/marketing/how-to-use-medium Wikipedia hhttps://es.wikipedia.org/wiki/Medium_(servicio) Descripci\u00f3n Medium es un servicio de publicaci\u00f3n de blogs fundado por los cofundadores de Twitter Evan Williams y Biz Stone en agosto de 2012.1\u200b La plataforma ha evolucionado hacia un h\u00edbrido de contribuciones no profesionales, profesionales y pagadas. Algunos art\u00edculos de Medium de la pr\u00e1ctica final https://janruigar.medium.com/visor-de-patrimonio-arqueol%C3%B3gico-un-asistente-a-la-prospecci%C3%B3n-y-reconocimiento-del-terreno-a2703cbd2600 https://fdo-dellano.medium.com/pr%C3%A1ctica-final-de-m%C3%B3dulo-m2b-mapas-y-open-data-posgrado-sig-upc-prof-v%C3%ADctor-pascal-144fab21529a https://medium.com/@jordi.rodriguezdiaz/pr%C3%A1ctica-final-de-porgrado-con-kepler-gl-m%C3%B3dulo-m2b-mapas-y-opendata-herramientas-de-99c33ed87678 https://m-selindo7.medium.com/visor-dincendis-forestals-1986-2019-e9e6177bebd https://medium.com/@claudiobracho9696/gis-and-field-analysis-after-gloria-storm-approximation-to-flooding-risk-assessment-in-8592ccebec0b https://medium.com/master-upc-sig/taller-de-la-asignatura-introducci%C3%B3-a-la-programaci%C3%B3-sig-en-entorn-web-cf39862c954f Para escribir un buen art\u00edculo t\u00e9cnico podriamos dividir en estas secciones T\u00edtulo Inspiraci\u00f3n Como persona / usuario / interesada en..... Qu\u00e9 hace El mapa muestra .... C\u00f3mo est\u00e1 hecho Con KeplerGl y datos .... Retos futuros en un futuro .... Fuentes urls .... Note Nos damos de alta com usuarios en Medium https://medium.com/ Entramos en Medium , vamos a nuestro Avatar d\u00f3nde podemos: En Settings : Editar nuestro perfil En Design your profile : Editar la plantilla de los art\u00edculos En Write a story : Empezar a escribir una hist\u00f3ria","title":"11.2.Taller de Medium"},{"location":"11.2.taller_medium/#medium","text":"","title":"Medium"},{"location":"11.2.taller_medium/#recursos-medium","text":"Web https://medium.com// Tutorials https://help.medium.com/hc/en-us/articles/225168768 https://help.medium.com/hc/en-us/articles/115004681607-Create-a-publication Tutorial https://blog.hubspot.com/marketing/how-to-use-medium Wikipedia hhttps://es.wikipedia.org/wiki/Medium_(servicio)","title":"Recursos Medium"},{"location":"11.2.taller_medium/#descripcion","text":"Medium es un servicio de publicaci\u00f3n de blogs fundado por los cofundadores de Twitter Evan Williams y Biz Stone en agosto de 2012.1\u200b La plataforma ha evolucionado hacia un h\u00edbrido de contribuciones no profesionales, profesionales y pagadas.","title":"Descripci\u00f3n"},{"location":"11.2.taller_medium/#algunos-articulos-de-medium-de-la-practica-final","text":"https://janruigar.medium.com/visor-de-patrimonio-arqueol%C3%B3gico-un-asistente-a-la-prospecci%C3%B3n-y-reconocimiento-del-terreno-a2703cbd2600 https://fdo-dellano.medium.com/pr%C3%A1ctica-final-de-m%C3%B3dulo-m2b-mapas-y-open-data-posgrado-sig-upc-prof-v%C3%ADctor-pascal-144fab21529a https://medium.com/@jordi.rodriguezdiaz/pr%C3%A1ctica-final-de-porgrado-con-kepler-gl-m%C3%B3dulo-m2b-mapas-y-opendata-herramientas-de-99c33ed87678 https://m-selindo7.medium.com/visor-dincendis-forestals-1986-2019-e9e6177bebd https://medium.com/@claudiobracho9696/gis-and-field-analysis-after-gloria-storm-approximation-to-flooding-risk-assessment-in-8592ccebec0b https://medium.com/master-upc-sig/taller-de-la-asignatura-introducci%C3%B3-a-la-programaci%C3%B3-sig-en-entorn-web-cf39862c954f","title":"Algunos art\u00edculos de Medium de la pr\u00e1ctica final"},{"location":"11.2.taller_medium/#para-escribir-un-buen-articulo-tecnico-podriamos-dividir-en-estas-secciones","text":"","title":"Para escribir un buen art\u00edculo t\u00e9cnico podriamos dividir en estas secciones"},{"location":"2.1.introduccion_a_vector_tiles/","text":"Introducci\u00f3n a Vector Tiles Vector Tiles es un formato para almacenar datos geogr\u00e1ficos en formato binario (Google Protobuf) y pensados para la visualizaci\u00f3n en navegadores web modernos que soporten webGL. Una tesela vectorial (vector tiles) contiene datos vectoriales georreferenciados (puede contener m\u00faltiples capas), recortados en teselas para facilitar su recuperaci\u00f3n. Son equivalentes a las teselas raster tradicionales (XYZ,WMTS, TMS) pero retornan datos vectoriales en lugar de una imagen. Cada conjunto de teselas vectoriales tiene su propio esquema. Un esquema consiste en nombres de capas, atributos, selecci\u00f3n de elementos. Contexto En 2005 Google Maps introdujo una \"nueva\" forma de mostrar datos geogr\u00e1ficos por la web, pregenerando el mapa por niveles de zoom y tiles (teselas) de 256x256 pixeles. Tambi\u00e9n cre\u00f3 una nueva proyecci\u00f3n basada en mercator, llamada pseude-mercator o web mercator , cuyo c\u00f3digo EPSG es 3857 Despu\u00e9s de Google Maps, otros proveedores o plataformas c\u00f3mo OpenStreetMap siguen esta misma forma de organizar la geoinformaci\u00f3n. HTTP Para cargar la im\u00e1genes se ulitza una llamada HTTP rest d\u00f3nde se especifica; https://.../.../z/x/y.format Z= Nivel de zoom X=coordenada X Y=coordenada Y Formato Raster: Im\u00e1gen png o JPEG Vector: (pbf o mvt) Protocolos Existen tres especificaciones para servir tiles TMS (Tile Map Service): X Y coordenadas empiezan de debajo izquierda (t\u00edpico eje cartesiano de coordenadas) WMTS (Web Map Tile Service): OGC estandard , corrdenadas empiezan de arriba izquierda. ZXY o \"slippy map\": Igual que TMS pero la Y empieza por arriba izquierda Caracteristicas Las teselas vectoriales han sido utilizadas por el cliente Android de Google Maps desde diciembre de 2010 y en el cliente de escritorio desde 2013. Las teselas vectoriales para renderizar los datos de OpenStreetMap se propusieron por primera vez en marzo de 2013 y est\u00e1n soportadas por Mapnik, el renderizador de datos de OpenStreetMap m\u00e1s utilizado. Mapbox, proveedor comercial de herramientas de cartograf\u00eda personalizada y de hosting, es el m\u00e1ximo impulsor de esta tecnologia y ha centrado su herramienta de cartograf\u00eda, Mapbox Studio , en torno a las teselas vectoriales. Cada tile es un contenedor de datos vectores y atributos Los Tiles no tienen estilo , el estilo se aplica en cliente Soporta rotaci\u00f3n y orientaci\u00f3n Soporta extrusi\u00f3n y 3D Normalmente los vectores encapsulan en archivos con formato MBTILES (basado en SQLITE) Mapbox Style Specification Es especificaci\u00f3n abierta desarrollada por Mapbox, ( Mapbox Style Specification )[ https://docs.mapbox.com/mapbox-gl-js/style-spec/ ] para aplicar estilos (pintar) a los vector-tiles. La codificaci\u00f3n de los estilos se entructura en el formato JSON mediante la sint\u00e1xis definida por la especificaci\u00f3n y c\u00f3mo veremos, esta va m\u00e1s all\u00e1 de aplicar colores simples a los vectores. Los filtros y expresiones permiten realizar tematizaci\u00f3n en tiempo real en los navegadores web. La especificaci\u00f3n se ha convertido en un estandard \"de facto\" y ha sido adoptado por otras empresas c\u00f3mo ESRI o OpenMapTiles Ver presentaci\u00f3n MapBox Styles (pptx) Ver presentaci\u00f3n MapBox Styles (pdf) Anexo: Herramientas y recursos para Vector-Tiles Fuente: https://github.com/mapbox/awesome-vector-tiles Parsers & Generators vector-tile-js - Parses vector tiles with JavaScript. mapnik-vector-tile - C++ vector tile read/write implementation on top of Mapnik. mbtiles-cpp - C++ library for decoding of mbtiles and vector data into function callbacks. vector-tile-py - Python tool to convert a Mapnik vector tile to GeoJSON node-mapnik - Node.js API for vector tiles which depends on mapnik-vector-tile vector-tile-cs - Parses vector tiles with C# (native C# implementation, no dependencies). mapbox-vector-tile-cs - Parses vector tiles with C# (uses protobuf-net). tilelive-bridge - Implements Tilelive API for creating vector tiles from traditional Mapnik datasources in Node.js. tilelive-vector - Implements Tilelive API for reading vector tiles and rendering to image tiles in Node.js. mapbox-vector-tile is a Python package for vector tile encoding. Used in Mapzen's vector tile service tileserver and TileStache. :warning: Only support V1 Tile spec and not V2, no longer maintained geojson-vt - Slice GeoJSON into vector tiles on the fly in the browser. java-vector-tile - A java encoder and decoder for vector tiles. mapbox-vector-tile-java - Encode and decode v2.1 Mapbox Vector Tiles. Convert JTS Geometry to and from MVT features, including simple user data support. Utility functions for converting world coordinates to MVT coordinates and clipping to a tile envelope. cached-vector-tile - An alternative implementation of the vector-tile-js interface, backed by plain JS objects/arrays rather than parsed-on-demand protobuf data. Trades away memory efficiency for faster feature.loadGeometry() calls. tilegrinder - A helper library for applying a data altering function on each vector tile in an MBTiles, using the native protobuf wrapper for de- and encoding, recompressing the results and storing them either in an MBTiles or as single files. SwiftVectorTiles - A Swift encoder for vector tiles according to the Mapbox vector tile spec. orb - A Go geometry library with mvt <-> geojson support. Clients Mapbox GL Native - C++/OpenGL vector maps library with native SDKs for Android, iOS, Node.js, macOS, and Qt Mapbox GL JS - JavaScript/WebGL vector maps library. OpenLayers 3 - JavaScript vector & raster library. WhirlyGlobe/Maply - Objective C code that is able to read and render vector tiles(and style with mapnik xml) on iOS devices. Leaflet.MapboxVectorTile is able to read PBF MapboxVectorTiles from a REST endpoint and render them as a TileLayer on a Leaflet Map. Use this option if you want to utilize vector tiles on a standard Leaflet web map without needing WebGL. CARTO Mobile SDK - C++ maps library focused on offline features, for iOS, Android, Windows Phone and Xamarin with bindings for Java, Objective-C and C#. Based on Nutiteq Maps SDK , but open source and uses CartoCSS. Mapzen Tangram - JavaScript library for rendering 2D & 3D maps live in a web browser with WebGL, supports MVT, GeoJSON, TopoJSON Mapzen Tangram-es - C++ library for rendering 2D and 3D maps using OpenGL ES 2 with custom styling and interactions mapbox-gl-leaflet - Create Mapbox GL layers in Leaflet react-native-mapbox-gl - Render Mapbox GL maps from React applications hoverboard - Render vector tiles on canvas with Leaflet 0.7.x (supports GeoJSON, TopoJSON, and protobuf) :warning: no longer maintained Leaflet.VectorGrid - Display gridded vector data (sliced GeoJSON, TopoJSON or Mapbox Vector Tiles) in Leaflet 1.0.0 ArcGIS API for JavaScript - Draw vector tile layers as part of your web map. Rendering done via mapbox-gl-js integration. mapscii - A Vector Tile to Braille and ASCII renderer for xterm-compatible terminals Unofficial Mapbox GL Native bindings for Qt QML - Qt QML bindings for Qt 5.6 and higher. Mapbox-vector-tiles-basic-js-renderer - A fork of mapbox-gl-js giving you full control over rendering of specific tiles, also provides vector tile overlay for google maps. Applications / Command line tools Mapbox Studio - Web design studio for creating and styling vector tiles. Mapbox Studio Classic - Desktop design studio for both creating vector tiles from raw geodata and for rendering them on-the-fly into image tiles. Internally uses tilelive.js modules to handle vector tiles (see tilelive-bridge and tilelive-vector ) :warning: use Mapbox Studio instead. kosmtik - Design maps with CartoCSS and Mapnik. ArcGIS Pro - Generate vector tiles from maps authored in ArcGIS Pro or imported from ArcMap. MVT Styler - map style editor for vector tiles. Maputnik - A visual style editor for the Mapbox GL style specification. QGIS Vector Tiles Reader - QGIS Python plugin which reads Mapbox Vector Tiles from local MBTiles file or remote mapbox-gl-inspect - Plugin for Mapbox GL JS to view the view and inspect VT features. CLI Utilities mbview - Watch MBTiles in your localhost. View tiles in a basic Mapbox GL JS webapp locally tippecanoe - Build vector tilesets from large collections of GeoJSON features. tilemaker - Command line tool to produce vector tiles directly from an .osm.pbf extract without an intermediate database. mapbox-filter - Filter MBTiles according to Mapbox GL JS styles, shrink MBTiles directly, serve locally over http, publish to S3-compatibile storage vector-tiles-producer Command line tool in C++ to creates vector tiles for a given area at chosen zoom levels using a Mapnik XML. :warning: no longer maintained vt-geojson - decodes vector tiles to GeoJSON FeatureCollections tl - An alternate command line interface to tilelive tileshrink - Reduce the layer extent and simplify the resulting geometries of all vector tiles in an MBTiles tiler @GeoVation - Command line tool for converting GeoJSON, Shapefiles or PostGIS layer to raw Vector Tiles (or MBTiles) tiler @thomersch - Command line tool to convert GeoJSON to Vector Tiles (written in Go language). geojson2mvt - npm package for building a static vector tile tree for given xyz bounds from a geojson file (uses geojson-vt ) OGR MVT and MBTiles - The GDAL/OGR MVT and MBTILES drivers can be used to read and write vector tiles, respectively as tileset on the filesystem or in a mbtiles container (GDAL >= 2.3.0) MBUtil - Import and export MBTiles to disk :warning: no longer maintained Datamaps C application that can be used to create vector tiles and store them in an mbtiles. See the render-vector command. :warning: no longer maintained, use tippecanoe instead Mapbox GL JS Plugins gl-draw - Adds support for drawing and editing features on Mapbox GL JS maps Servers tessera - Supports serving and rendering vector tiles. Uses the same core libraries as Mapbox Studio. tessella - lightweight Node.js Mapbox Vector Tiles server. Inspired by tessera. tilestrata - with tilestrata-vt, it can generate Mapnik Vector Tiles; with tilestrata-postgismvt , it can serve Mapbox Vector Tiles from a PostGIS db Utilery Server to generate vector tiles from PostGIS queries. Python based :warning: no longer maintained tileserver Mapzen Vector Tile Service. TileStache added support for Mapbox Vector tiles via .pbf extension requests. Kartotherian Wikipedia tile server with Tilerator backend tile pre-generator ArcGIS Online - Supports serving vector tiles and rendering in the mapping application powered by the ArcGIS API for JavaScript Portal for ArcGIS - Supports serving vector tiles and rendering in the mapping application powered by the ArcGIS API for JavaScript tilesplash - A light and quick nodejs webserver for serving topojson or mapbox vector tiles from a postgis backend go-vtile-example - An example server written in Go Tegola - A MVT server written in pure Go that supports serving tiles from a PostGIS data provider. t-rex - MVT server in a single executable written in Rust. Serves tiles from PostGIS supporting custom tile grids. OSM Scout Server - Maps server providing vector and raster tiles, geocoder, and router. Designed to be used on Linux (mobile and PC) to provide offline maps; written in C++ postserve - A small Python based tileserver using ST_AsMVT and ST_AsMVTGeom to generate vector tiles on the fly. Designed for use with PostGIS 2.4 and the OpenMapTiles project SpatialServer (PGRestAPI) - A multi-purpose GeoSpatial NodeJS web server created at SpatialDev that not only serves MBTiles stuffed with vector tiles, it can also cut vector tiles on the fly from a PostGIS database. :warning: No longer maintained. OpenMapTiles - Set of open-source tools for self-hosting of OpenStreetMap maps in more than 50 languages. It provides both raster as well as vector tiles, WMS and WMTS services for GIS programs, support for JavaScript viewers and mobile SDK. Hastile - Haskell web server using PostGIS to deliver vector tiles. MapServer - Open Source platform for publishing spatial data and interactive mapping applications to the web. MVT output available in 7.2 Low-level utilities vt-pbf serialize JavaScript objects representing vector tiles into binary Protocol Buffer encodings of vector tiles vtzero - minimalist vector tile decoder and encoder in C++ mvt-fixtures - a suite of valid and invalid test fixtures according to the Mapbox Vector Tile spec versions. Includes simplified unit test fixtures and real-world fixtures to test your encoders and decoders. zellige - command line utility written to convert GeoJSON to MVT. mapbox-gl-function - Mapbox GL style function evaluator :warning: now maintained as party of mapbox-gl-js mapbox-gl-filter-simplify - Simplifies and complexifies filters in Mapbox GL Styles :warning: removed Articles Vector tiles remixed - guide to using tilemaker to generating vector tiles Build Your Own Static Vector Tile Pipeline - guide transforming, encoding and hosting tiles in the cloud; using ogr2ogr + tippecanoe + Mapbox GL JS Using the new MVT function in PostGIS - Building a vector tile service with PostGIS, express, and pg-promise. License","title":"2.1.Introducci\u00f3n a Vector-Tiles y Mapbox Styles"},{"location":"2.1.introduccion_a_vector_tiles/#introduccion-a-vector-tiles","text":"Vector Tiles es un formato para almacenar datos geogr\u00e1ficos en formato binario (Google Protobuf) y pensados para la visualizaci\u00f3n en navegadores web modernos que soporten webGL. Una tesela vectorial (vector tiles) contiene datos vectoriales georreferenciados (puede contener m\u00faltiples capas), recortados en teselas para facilitar su recuperaci\u00f3n. Son equivalentes a las teselas raster tradicionales (XYZ,WMTS, TMS) pero retornan datos vectoriales en lugar de una imagen. Cada conjunto de teselas vectoriales tiene su propio esquema. Un esquema consiste en nombres de capas, atributos, selecci\u00f3n de elementos.","title":"Introducci\u00f3n a Vector Tiles"},{"location":"2.1.introduccion_a_vector_tiles/#contexto","text":"En 2005 Google Maps introdujo una \"nueva\" forma de mostrar datos geogr\u00e1ficos por la web, pregenerando el mapa por niveles de zoom y tiles (teselas) de 256x256 pixeles. Tambi\u00e9n cre\u00f3 una nueva proyecci\u00f3n basada en mercator, llamada pseude-mercator o web mercator , cuyo c\u00f3digo EPSG es 3857 Despu\u00e9s de Google Maps, otros proveedores o plataformas c\u00f3mo OpenStreetMap siguen esta misma forma de organizar la geoinformaci\u00f3n.","title":"Contexto"},{"location":"2.1.introduccion_a_vector_tiles/#http","text":"Para cargar la im\u00e1genes se ulitza una llamada HTTP rest d\u00f3nde se especifica; https://.../.../z/x/y.format Z= Nivel de zoom X=coordenada X Y=coordenada Y Formato Raster: Im\u00e1gen png o JPEG Vector: (pbf o mvt)","title":"HTTP"},{"location":"2.1.introduccion_a_vector_tiles/#protocolos","text":"Existen tres especificaciones para servir tiles TMS (Tile Map Service): X Y coordenadas empiezan de debajo izquierda (t\u00edpico eje cartesiano de coordenadas) WMTS (Web Map Tile Service): OGC estandard , corrdenadas empiezan de arriba izquierda. ZXY o \"slippy map\": Igual que TMS pero la Y empieza por arriba izquierda","title":"Protocolos"},{"location":"2.1.introduccion_a_vector_tiles/#caracteristicas","text":"Las teselas vectoriales han sido utilizadas por el cliente Android de Google Maps desde diciembre de 2010 y en el cliente de escritorio desde 2013. Las teselas vectoriales para renderizar los datos de OpenStreetMap se propusieron por primera vez en marzo de 2013 y est\u00e1n soportadas por Mapnik, el renderizador de datos de OpenStreetMap m\u00e1s utilizado. Mapbox, proveedor comercial de herramientas de cartograf\u00eda personalizada y de hosting, es el m\u00e1ximo impulsor de esta tecnologia y ha centrado su herramienta de cartograf\u00eda, Mapbox Studio , en torno a las teselas vectoriales. Cada tile es un contenedor de datos vectores y atributos Los Tiles no tienen estilo , el estilo se aplica en cliente Soporta rotaci\u00f3n y orientaci\u00f3n Soporta extrusi\u00f3n y 3D Normalmente los vectores encapsulan en archivos con formato MBTILES (basado en SQLITE)","title":"Caracteristicas"},{"location":"2.1.introduccion_a_vector_tiles/#mapbox-style-specification","text":"Es especificaci\u00f3n abierta desarrollada por Mapbox, ( Mapbox Style Specification )[ https://docs.mapbox.com/mapbox-gl-js/style-spec/ ] para aplicar estilos (pintar) a los vector-tiles. La codificaci\u00f3n de los estilos se entructura en el formato JSON mediante la sint\u00e1xis definida por la especificaci\u00f3n y c\u00f3mo veremos, esta va m\u00e1s all\u00e1 de aplicar colores simples a los vectores. Los filtros y expresiones permiten realizar tematizaci\u00f3n en tiempo real en los navegadores web. La especificaci\u00f3n se ha convertido en un estandard \"de facto\" y ha sido adoptado por otras empresas c\u00f3mo ESRI o OpenMapTiles Ver presentaci\u00f3n MapBox Styles (pptx) Ver presentaci\u00f3n MapBox Styles (pdf)","title":"Mapbox Style Specification"},{"location":"2.1.introduccion_a_vector_tiles/#anexo-herramientas-y-recursos-para-vector-tiles","text":"Fuente: https://github.com/mapbox/awesome-vector-tiles","title":"Anexo: Herramientas y recursos para Vector-Tiles"},{"location":"2.1.introduccion_a_vector_tiles/#parsers-generators","text":"vector-tile-js - Parses vector tiles with JavaScript. mapnik-vector-tile - C++ vector tile read/write implementation on top of Mapnik. mbtiles-cpp - C++ library for decoding of mbtiles and vector data into function callbacks. vector-tile-py - Python tool to convert a Mapnik vector tile to GeoJSON node-mapnik - Node.js API for vector tiles which depends on mapnik-vector-tile vector-tile-cs - Parses vector tiles with C# (native C# implementation, no dependencies). mapbox-vector-tile-cs - Parses vector tiles with C# (uses protobuf-net). tilelive-bridge - Implements Tilelive API for creating vector tiles from traditional Mapnik datasources in Node.js. tilelive-vector - Implements Tilelive API for reading vector tiles and rendering to image tiles in Node.js. mapbox-vector-tile is a Python package for vector tile encoding. Used in Mapzen's vector tile service tileserver and TileStache. :warning: Only support V1 Tile spec and not V2, no longer maintained geojson-vt - Slice GeoJSON into vector tiles on the fly in the browser. java-vector-tile - A java encoder and decoder for vector tiles. mapbox-vector-tile-java - Encode and decode v2.1 Mapbox Vector Tiles. Convert JTS Geometry to and from MVT features, including simple user data support. Utility functions for converting world coordinates to MVT coordinates and clipping to a tile envelope. cached-vector-tile - An alternative implementation of the vector-tile-js interface, backed by plain JS objects/arrays rather than parsed-on-demand protobuf data. Trades away memory efficiency for faster feature.loadGeometry() calls. tilegrinder - A helper library for applying a data altering function on each vector tile in an MBTiles, using the native protobuf wrapper for de- and encoding, recompressing the results and storing them either in an MBTiles or as single files. SwiftVectorTiles - A Swift encoder for vector tiles according to the Mapbox vector tile spec. orb - A Go geometry library with mvt <-> geojson support.","title":"Parsers &amp; Generators"},{"location":"2.1.introduccion_a_vector_tiles/#clients","text":"Mapbox GL Native - C++/OpenGL vector maps library with native SDKs for Android, iOS, Node.js, macOS, and Qt Mapbox GL JS - JavaScript/WebGL vector maps library. OpenLayers 3 - JavaScript vector & raster library. WhirlyGlobe/Maply - Objective C code that is able to read and render vector tiles(and style with mapnik xml) on iOS devices. Leaflet.MapboxVectorTile is able to read PBF MapboxVectorTiles from a REST endpoint and render them as a TileLayer on a Leaflet Map. Use this option if you want to utilize vector tiles on a standard Leaflet web map without needing WebGL. CARTO Mobile SDK - C++ maps library focused on offline features, for iOS, Android, Windows Phone and Xamarin with bindings for Java, Objective-C and C#. Based on Nutiteq Maps SDK , but open source and uses CartoCSS. Mapzen Tangram - JavaScript library for rendering 2D & 3D maps live in a web browser with WebGL, supports MVT, GeoJSON, TopoJSON Mapzen Tangram-es - C++ library for rendering 2D and 3D maps using OpenGL ES 2 with custom styling and interactions mapbox-gl-leaflet - Create Mapbox GL layers in Leaflet react-native-mapbox-gl - Render Mapbox GL maps from React applications hoverboard - Render vector tiles on canvas with Leaflet 0.7.x (supports GeoJSON, TopoJSON, and protobuf) :warning: no longer maintained Leaflet.VectorGrid - Display gridded vector data (sliced GeoJSON, TopoJSON or Mapbox Vector Tiles) in Leaflet 1.0.0 ArcGIS API for JavaScript - Draw vector tile layers as part of your web map. Rendering done via mapbox-gl-js integration. mapscii - A Vector Tile to Braille and ASCII renderer for xterm-compatible terminals Unofficial Mapbox GL Native bindings for Qt QML - Qt QML bindings for Qt 5.6 and higher. Mapbox-vector-tiles-basic-js-renderer - A fork of mapbox-gl-js giving you full control over rendering of specific tiles, also provides vector tile overlay for google maps.","title":"Clients"},{"location":"2.1.introduccion_a_vector_tiles/#applications-command-line-tools","text":"Mapbox Studio - Web design studio for creating and styling vector tiles. Mapbox Studio Classic - Desktop design studio for both creating vector tiles from raw geodata and for rendering them on-the-fly into image tiles. Internally uses tilelive.js modules to handle vector tiles (see tilelive-bridge and tilelive-vector ) :warning: use Mapbox Studio instead. kosmtik - Design maps with CartoCSS and Mapnik. ArcGIS Pro - Generate vector tiles from maps authored in ArcGIS Pro or imported from ArcMap. MVT Styler - map style editor for vector tiles. Maputnik - A visual style editor for the Mapbox GL style specification. QGIS Vector Tiles Reader - QGIS Python plugin which reads Mapbox Vector Tiles from local MBTiles file or remote mapbox-gl-inspect - Plugin for Mapbox GL JS to view the view and inspect VT features.","title":"Applications / Command line tools"},{"location":"2.1.introduccion_a_vector_tiles/#cli-utilities","text":"mbview - Watch MBTiles in your localhost. View tiles in a basic Mapbox GL JS webapp locally tippecanoe - Build vector tilesets from large collections of GeoJSON features. tilemaker - Command line tool to produce vector tiles directly from an .osm.pbf extract without an intermediate database. mapbox-filter - Filter MBTiles according to Mapbox GL JS styles, shrink MBTiles directly, serve locally over http, publish to S3-compatibile storage vector-tiles-producer Command line tool in C++ to creates vector tiles for a given area at chosen zoom levels using a Mapnik XML. :warning: no longer maintained vt-geojson - decodes vector tiles to GeoJSON FeatureCollections tl - An alternate command line interface to tilelive tileshrink - Reduce the layer extent and simplify the resulting geometries of all vector tiles in an MBTiles tiler @GeoVation - Command line tool for converting GeoJSON, Shapefiles or PostGIS layer to raw Vector Tiles (or MBTiles) tiler @thomersch - Command line tool to convert GeoJSON to Vector Tiles (written in Go language). geojson2mvt - npm package for building a static vector tile tree for given xyz bounds from a geojson file (uses geojson-vt ) OGR MVT and MBTiles - The GDAL/OGR MVT and MBTILES drivers can be used to read and write vector tiles, respectively as tileset on the filesystem or in a mbtiles container (GDAL >= 2.3.0) MBUtil - Import and export MBTiles to disk :warning: no longer maintained Datamaps C application that can be used to create vector tiles and store them in an mbtiles. See the render-vector command. :warning: no longer maintained, use tippecanoe instead","title":"CLI Utilities"},{"location":"2.1.introduccion_a_vector_tiles/#mapbox-gl-js-plugins","text":"gl-draw - Adds support for drawing and editing features on Mapbox GL JS maps","title":"Mapbox GL JS Plugins"},{"location":"2.1.introduccion_a_vector_tiles/#servers","text":"tessera - Supports serving and rendering vector tiles. Uses the same core libraries as Mapbox Studio. tessella - lightweight Node.js Mapbox Vector Tiles server. Inspired by tessera. tilestrata - with tilestrata-vt, it can generate Mapnik Vector Tiles; with tilestrata-postgismvt , it can serve Mapbox Vector Tiles from a PostGIS db Utilery Server to generate vector tiles from PostGIS queries. Python based :warning: no longer maintained tileserver Mapzen Vector Tile Service. TileStache added support for Mapbox Vector tiles via .pbf extension requests. Kartotherian Wikipedia tile server with Tilerator backend tile pre-generator ArcGIS Online - Supports serving vector tiles and rendering in the mapping application powered by the ArcGIS API for JavaScript Portal for ArcGIS - Supports serving vector tiles and rendering in the mapping application powered by the ArcGIS API for JavaScript tilesplash - A light and quick nodejs webserver for serving topojson or mapbox vector tiles from a postgis backend go-vtile-example - An example server written in Go Tegola - A MVT server written in pure Go that supports serving tiles from a PostGIS data provider. t-rex - MVT server in a single executable written in Rust. Serves tiles from PostGIS supporting custom tile grids. OSM Scout Server - Maps server providing vector and raster tiles, geocoder, and router. Designed to be used on Linux (mobile and PC) to provide offline maps; written in C++ postserve - A small Python based tileserver using ST_AsMVT and ST_AsMVTGeom to generate vector tiles on the fly. Designed for use with PostGIS 2.4 and the OpenMapTiles project SpatialServer (PGRestAPI) - A multi-purpose GeoSpatial NodeJS web server created at SpatialDev that not only serves MBTiles stuffed with vector tiles, it can also cut vector tiles on the fly from a PostGIS database. :warning: No longer maintained. OpenMapTiles - Set of open-source tools for self-hosting of OpenStreetMap maps in more than 50 languages. It provides both raster as well as vector tiles, WMS and WMTS services for GIS programs, support for JavaScript viewers and mobile SDK. Hastile - Haskell web server using PostGIS to deliver vector tiles. MapServer - Open Source platform for publishing spatial data and interactive mapping applications to the web. MVT output available in 7.2","title":"Servers"},{"location":"2.1.introduccion_a_vector_tiles/#low-level-utilities","text":"vt-pbf serialize JavaScript objects representing vector tiles into binary Protocol Buffer encodings of vector tiles vtzero - minimalist vector tile decoder and encoder in C++ mvt-fixtures - a suite of valid and invalid test fixtures according to the Mapbox Vector Tile spec versions. Includes simplified unit test fixtures and real-world fixtures to test your encoders and decoders. zellige - command line utility written to convert GeoJSON to MVT. mapbox-gl-function - Mapbox GL style function evaluator :warning: now maintained as party of mapbox-gl-js mapbox-gl-filter-simplify - Simplifies and complexifies filters in Mapbox GL Styles :warning: removed","title":"Low-level utilities"},{"location":"2.1.introduccion_a_vector_tiles/#articles","text":"Vector tiles remixed - guide to using tilemaker to generating vector tiles Build Your Own Static Vector Tile Pipeline - guide transforming, encoding and hosting tiles in the cloud; using ogr2ogr + tippecanoe + Mapbox GL JS Using the new MVT function in PostGIS - Building a vector tile service with PostGIS, express, and pg-promise.","title":"Articles"},{"location":"2.1.introduccion_a_vector_tiles/#license","text":"","title":"License"},{"location":"2.2.introduccion_a_mapbox_studio/","text":"Web https://www.mapbox.com/ Productos https://www.mapbox.com/products/ APIs https://www.mapbox.com/api-documentation/ P\u00e1gina refer\u00e9ncia MapBox GL!! https://www.mapbox.com/mapbox-gl-js/api/ GitHUB https://github.com/mapbox Tutoriales https://docs.mapbox.com/help/tutorials/?product=Mapbox+GL+JS https://www.mapbox.com/mapbox-gl-js/example/simple-map/ https://www.mapbox.com/help/tutorials/ https://www.mapbox.com/help/studio-manual/ https://ovrdc.github.io/gis-tutorials/mapbox/ Videos https://www.youtube.com/watch?v=jrnoFU5Wkdo https://www.youtube.com/watch?v=Zn3Xx-TSrM8 https://www.youtube.com/watch?v=r6Ij_34xTD0 https://www.youtube.com/watch?v=YhynsA9_fPc Descripci\u00f3n Mapbox Mapbox es una plataforma para crear y utilizar mapas personalizados. Ofrece una variedad de herramientas y APIs para crear mapas interactivos, como la biblioteca JavaScript Mapbox GL JS y los Mapbox Maps SDKs para Android e iOS. Algunas de las caracter\u00edsticas que ofrece Mapbox son: Estilos de mapas personalizados: Mapbox te permite personalizar la apariencia de tus mapas creando tus propios estilos de mapa con Mapbox Studio o usando alguno de los muchos estilos predise\u00f1ados que est\u00e1n disponibles. Geocodificaci\u00f3n y reverse geocodificaci\u00f3n: Mapbox ofrece servicios de geocodificaci\u00f3n y reverse geocodificaci\u00f3n, que permiten convertir direcciones y nombres de lugares en coordenadas geogr\u00e1ficas y viceversa. Datos en tiempo real: Mapbox puede mostrar datos en tiempo real en tus mapas, como informaci\u00f3n de tr\u00e1fico, actualizaciones del tiempo, etc. Navegaci\u00f3n: Mapbox ofrece APIs de navegaci\u00f3n y enrutamiento que se pueden utilizar para crear indicaciones paso a paso y otras funcionalidades de navegaci\u00f3n para tus aplicaciones. Im\u00e1genes de sat\u00e9lite: Mapbox proporciona acceso a im\u00e1genes de sat\u00e9lite y a\u00e9reas de alta resoluci\u00f3n que se pueden superponer encima de tus mapas para proporcionar contexto adicional y detalle. Mapbox es utilizado por una amplia gama de empresas y organizaciones, como Foursquare, The Weather Channel y el Censo de los Estados Unidos, entre otras. \u00bfC\u00f3mo empezar? Utilizamos nuestro correo de estudiante UPC!! Nos creamos usuario en MapBox.com Cada usuario tiene un Access Token necessario para desarrollar y usar aplicaciones de Mapbox De forma gratuita MapBox nos ofrece hasta 50.000 cargas cada mes Empezamos con MapBox Studio Paso 1-Creamos nuestro propio estilo Entramos en https://account.mapbox.com/ seleccionamos nuestro avatar (parte superior-derecha) --> Studio Dentro de Studio tenemos tres opciones b\u00e1sicas Opciones Descripci\u00f3n Styles Para crear nuestros estilos pr\u00f2pios Tilesets Para subir nuestros datos y convertirlos en Vector Tiles y/o integrarlos con nuestros estilos Dataset Para subir capas GeoJson que pueden ser convertidas a Tilesets Seleccionamos --> Styles --> New style Seleccionamos un estilo como base (Base) y cambiamos variaci\u00f3n colores (Galaxy) --> Customize Cambiamos nombre del estilo --Parte superior izquierda- por \"Bicing\" Los colores y aspecto de nuestro mapa deben estar condicionados por aquello que querramos mostrar o para dar contexto a los datos que vamos a a\u00f1adir Paso 2- Empezamos edici\u00f3n Podemos editar a dos niveles Por components: S\u00f3n agrupaciones de capas por temas, los cambios afectar\u00e1n a todas las capas del tema (edici\u00f3n r\u00e1pida) Por capas: Editaremos capas de forma individual Para editar click encima del nombre del componente y(o layer) Dedicamos 30 minutos a explorar i editar nuestro estilo Paso 3- Publicaci\u00f3n Una vez hemos acabado --> Publish your style --> Publish Share, develop, and use your style Share style --> Preview only --> Pegamos URL en navegador Developer resources --> Style URL y Access token (copiamos para nuestras aplicaciones con Mapbox GL JS) Pr\u00e1ctica Copia el vinculo de Preview only y a\u00f1adelo dentro de apartado \"Pr\u00e1cticas\" de nuestro index.html S\u00fabelo a GitHub Saber m\u00e1s... Utilizar el estilo en desktop Si seleccionamos \"Third party\" tambi\u00e9n podemos consumir el estilo com WMTS (Raster) QGIS!! Cartogram otra forma divertida de editar un estilo Buscamos y descargamos una foto, logo, etc.. Nos vamos a https://apps.mapbox.com/cartogram/ y creamos otro estilo","title":"2.2.Plataformas de mapas, ejemplo Mapbox"},{"location":"2.2.introduccion_a_mapbox_studio/#web","text":"https://www.mapbox.com/","title":"Web"},{"location":"2.2.introduccion_a_mapbox_studio/#productos","text":"https://www.mapbox.com/products/","title":"Productos"},{"location":"2.2.introduccion_a_mapbox_studio/#apis","text":"https://www.mapbox.com/api-documentation/","title":"APIs"},{"location":"2.2.introduccion_a_mapbox_studio/#pagina-referencia-mapbox-gl","text":"https://www.mapbox.com/mapbox-gl-js/api/","title":"P\u00e1gina refer\u00e9ncia MapBox GL!!"},{"location":"2.2.introduccion_a_mapbox_studio/#github","text":"https://github.com/mapbox","title":"GitHUB"},{"location":"2.2.introduccion_a_mapbox_studio/#tutoriales","text":"https://docs.mapbox.com/help/tutorials/?product=Mapbox+GL+JS https://www.mapbox.com/mapbox-gl-js/example/simple-map/ https://www.mapbox.com/help/tutorials/ https://www.mapbox.com/help/studio-manual/ https://ovrdc.github.io/gis-tutorials/mapbox/","title":"Tutoriales"},{"location":"2.2.introduccion_a_mapbox_studio/#videos","text":"https://www.youtube.com/watch?v=jrnoFU5Wkdo https://www.youtube.com/watch?v=Zn3Xx-TSrM8 https://www.youtube.com/watch?v=r6Ij_34xTD0 https://www.youtube.com/watch?v=YhynsA9_fPc","title":"Videos"},{"location":"2.2.introduccion_a_mapbox_studio/#descripcion-mapbox","text":"Mapbox es una plataforma para crear y utilizar mapas personalizados. Ofrece una variedad de herramientas y APIs para crear mapas interactivos, como la biblioteca JavaScript Mapbox GL JS y los Mapbox Maps SDKs para Android e iOS. Algunas de las caracter\u00edsticas que ofrece Mapbox son: Estilos de mapas personalizados: Mapbox te permite personalizar la apariencia de tus mapas creando tus propios estilos de mapa con Mapbox Studio o usando alguno de los muchos estilos predise\u00f1ados que est\u00e1n disponibles. Geocodificaci\u00f3n y reverse geocodificaci\u00f3n: Mapbox ofrece servicios de geocodificaci\u00f3n y reverse geocodificaci\u00f3n, que permiten convertir direcciones y nombres de lugares en coordenadas geogr\u00e1ficas y viceversa. Datos en tiempo real: Mapbox puede mostrar datos en tiempo real en tus mapas, como informaci\u00f3n de tr\u00e1fico, actualizaciones del tiempo, etc. Navegaci\u00f3n: Mapbox ofrece APIs de navegaci\u00f3n y enrutamiento que se pueden utilizar para crear indicaciones paso a paso y otras funcionalidades de navegaci\u00f3n para tus aplicaciones. Im\u00e1genes de sat\u00e9lite: Mapbox proporciona acceso a im\u00e1genes de sat\u00e9lite y a\u00e9reas de alta resoluci\u00f3n que se pueden superponer encima de tus mapas para proporcionar contexto adicional y detalle. Mapbox es utilizado por una amplia gama de empresas y organizaciones, como Foursquare, The Weather Channel y el Censo de los Estados Unidos, entre otras.","title":"Descripci\u00f3n Mapbox"},{"location":"2.2.introduccion_a_mapbox_studio/#como-empezar","text":"Utilizamos nuestro correo de estudiante UPC!! Nos creamos usuario en MapBox.com Cada usuario tiene un Access Token necessario para desarrollar y usar aplicaciones de Mapbox De forma gratuita MapBox nos ofrece hasta 50.000 cargas cada mes","title":"\u00bfC\u00f3mo empezar?"},{"location":"2.2.introduccion_a_mapbox_studio/#empezamos-con-mapbox-studio","text":"","title":"Empezamos con MapBox Studio"},{"location":"2.2.introduccion_a_mapbox_studio/#paso-1-creamos-nuestro-propio-estilo","text":"Entramos en https://account.mapbox.com/ seleccionamos nuestro avatar (parte superior-derecha) --> Studio Dentro de Studio tenemos tres opciones b\u00e1sicas Opciones Descripci\u00f3n Styles Para crear nuestros estilos pr\u00f2pios Tilesets Para subir nuestros datos y convertirlos en Vector Tiles y/o integrarlos con nuestros estilos Dataset Para subir capas GeoJson que pueden ser convertidas a Tilesets Seleccionamos --> Styles --> New style Seleccionamos un estilo como base (Base) y cambiamos variaci\u00f3n colores (Galaxy) --> Customize Cambiamos nombre del estilo --Parte superior izquierda- por \"Bicing\" Los colores y aspecto de nuestro mapa deben estar condicionados por aquello que querramos mostrar o para dar contexto a los datos que vamos a a\u00f1adir","title":"Paso 1-Creamos nuestro propio estilo"},{"location":"2.2.introduccion_a_mapbox_studio/#paso-2-empezamos-edicion","text":"Podemos editar a dos niveles Por components: S\u00f3n agrupaciones de capas por temas, los cambios afectar\u00e1n a todas las capas del tema (edici\u00f3n r\u00e1pida) Por capas: Editaremos capas de forma individual Para editar click encima del nombre del componente y(o layer) Dedicamos 30 minutos a explorar i editar nuestro estilo","title":"Paso 2- Empezamos edici\u00f3n"},{"location":"2.2.introduccion_a_mapbox_studio/#paso-3-publicacion","text":"Una vez hemos acabado --> Publish your style --> Publish Share, develop, and use your style Share style --> Preview only --> Pegamos URL en navegador Developer resources --> Style URL y Access token (copiamos para nuestras aplicaciones con Mapbox GL JS) Pr\u00e1ctica Copia el vinculo de Preview only y a\u00f1adelo dentro de apartado \"Pr\u00e1cticas\" de nuestro index.html S\u00fabelo a GitHub","title":"Paso 3- Publicaci\u00f3n"},{"location":"2.2.introduccion_a_mapbox_studio/#saber-mas","text":"Utilizar el estilo en desktop","title":"Saber m\u00e1s..."},{"location":"2.2.introduccion_a_mapbox_studio/#cartogram-otra-forma-divertida-de-editar-un-estilo","text":"Buscamos y descargamos una foto, logo, etc.. Nos vamos a https://apps.mapbox.com/cartogram/ y creamos otro estilo","title":"Cartogram otra forma divertida de editar un estilo"},{"location":"2.3.tecnologias_javascript/","text":"JavaScript JavaScript es un lenguaje de programaci\u00f3n que se utiliza com\u00fanmente para crear elementos interactivos en sitios web. Es un lenguaje de script del lado del cliente, lo que significa que es ejecutado por el navegador web en lugar de en el servidor. JavaScript se utiliza para a\u00f1adir interactividad a las p\u00e1ginas web, como animaciones, validaci\u00f3n de formularios y manejo de eventos de usuario como clics y acciones de pasar el rat\u00f3n. Tambi\u00e9n se puede utilizar para realizar solicitudes HTTP para recuperar datos de un servidor y para manipular el Modelo de Objeto del Documento (DOM) de una p\u00e1gina web. JavaScript es un componente esencial del desarrollo web moderno y es compatible con todos los principales navegadores web. A menudo se utiliza junto con otras tecnolog\u00edas como HTML y CSS para crear sitios web din\u00e1micos e interactivos. 1995: JavaScript se lanza por primera vez bajo el nombre de LiveScript. 1996: JavaScript se renombra a su nombre actual y se incorpora al navegador web Netscape Navigator 2.0. 1997: Se publica la primera versi\u00f3n estable de JavaScript, la versi\u00f3n 1.1. 1999: Se publica la versi\u00f3n 1.3 de JavaScript. 2000: Se publica la versi\u00f3n 1.5 de JavaScript. 2002: Se publica la versi\u00f3n 1.6 de JavaScript. 2005: Se publica la versi\u00f3n 1.7 de JavaScript. 2006: Se publica la versi\u00f3n 2.0 de JavaScript (tambi\u00e9n conocida como ECMAScript 3). 2009: Se publica la versi\u00f3n 3.1 de JavaScript (tambi\u00e9n conocida como ECMAScript 5). 2011: Se publica la versi\u00f3n 5.1 de JavaScript (tambi\u00e9n conocida como ECMAScript 5.1). 2015: Se publica la versi\u00f3n 6 de ECMAScript (tambi\u00e9n conocida como ECMAScript 2015 o JavaScript 6). 2016: Se publica la versi\u00f3n 7 de ECMAScript (tambi\u00e9n conocida como ECMAScript 2016 o JavaScript 7). 2017: Se publica la versi\u00f3n 8 de ECMAScript (tambi\u00e9n conocida como ECMAScript 2017 o JavaScript 8). 2018: Se publica la versi\u00f3n 9 de ECMAScript (tambi\u00e9n conocida como ECMAScript 2018 o JavaScript 9). 2019: Se publica la versi\u00f3n 10 de ECMAScript (tambi\u00e9n conocida como ECMAScript 2019 o JavaScript 10). 2020: Se publica la versi\u00f3n 11 de ECMAScript (tambi\u00e9n conocida como ECMAScript 2020 o JavaScript 11). Cada nueva versi\u00f3n de ECMAScript a\u00f1ade nuevas caracter\u00edsticas y mejoras al lenguaje de programaci\u00f3n JavaScript. Las \u00faltimas versiones de ECMAScript tambi\u00e9n se conocen como ECMAScript N, donde N es el a\u00f1o en el que se public\u00f3 la versi\u00f3n. Para aprender JavaScript https://github.com/micromata/awesome-javascript-learning Tecnolog\u00edas basadas en Javascript Hay muchas tecnolog\u00edas que se basan en JavaScript, entre ellas: Node.js : Node.js es un tiempo de ejecuci\u00f3n de JavaScript que te permite ejecutar JavaScript en el lado del servidor. Est\u00e1 construido sobre el motor de JavaScript V8 de Chrome y se utiliza com\u00fanmente para crear aplicaciones de back-end y APIs. Angular : Angular es un marco de JavaScript del lado del cliente que se utiliza para crear aplicaciones web de una sola p\u00e1gina. Ofrece una serie de caracter\u00edsticas para construir interfaces de usuario complejas, como plantillas, programaci\u00f3n reactiva y inyecci\u00f3n de dependencias. React : React es una biblioteca de JavaScript para crear interfaces de usuario. Est\u00e1 dise\u00f1ada para ser utilizada para construir componentes de UI reutilizables y a menudo se utiliza en combinaci\u00f3n con otras bibliotecas o marcos, como Redux. Vue.js : Vue.js es un marco de JavaScript del lado del cliente que est\u00e1 dise\u00f1ado para crear aplicaciones web de una sola p\u00e1gina. Ofrece una sintaxis ligera y f\u00e1cil de aprender y a menudo se utiliza para crear interfaces de usuario e integrarlas con APIs. Electron : Electron es un marco para crear aplicaciones de escritorio multiplataforma utilizando JavaScript, HTML y CSS. Se utiliza por muchas aplicaciones populares, como Slack, Visual Studio Code y Skype. Svelte.js :Svelte es un marco de JavaScript del lado del cliente que est\u00e1 dise\u00f1ado para crear aplicaciones web e interfaces de usuario. Es conocido por su tama\u00f1o peque\u00f1o y su rendimiento r\u00e1pido, ya que compila el c\u00f3digo en tiempo de compilaci\u00f3n en lugar de en tiempo de ejecuci\u00f3n, lo que resulta en tama\u00f1os de paquete m\u00e1s peque\u00f1os y una renderizaci\u00f3n m\u00e1s r\u00e1pida. Todas estas tecnolog\u00edas utilizan NPM (Node Package Manager) para instalar librerias Javascript \u00bfC\u00f3mo trabajaremos nosotros? Vanilla Javascript Vanilla JavaScript, tambi\u00e9n conocido como JavaScript puro, es el lenguaje de programaci\u00f3n JavaScript sin utilizar ning\u00fan marco de terceros ni librer\u00edas. Se refiere a la versi\u00f3n del lenguaje de programaci\u00f3n sin capas adicionales de abstracci\u00f3n o dependencias externas. La ventaja de usar Vanilla JavaScript es que es m\u00e1s ligero y r\u00e1pido que utilizar marcos o librer\u00edas externas. Adem\u00e1s, puede ser m\u00e1s f\u00e1cil de aprender y entender para aquellos que est\u00e9n empezando con JavaScript, ya que no hay que preocuparse por la sintaxis o las convenciones de un marco espec\u00edfico. Sin embargo, Vanilla JavaScript tambi\u00e9n puede requerir m\u00e1s trabajo y escribir m\u00e1s c\u00f3digo para implementar funcionalidades complejas, ya que no incluye muchas de las herramientas y funcionalidades que se encuentran en marcos y librer\u00edas m\u00e1s grandes. En resumen, Vanilla JavaScript es una buena opci\u00f3n para proyectos m\u00e1s peque\u00f1os o para aquellos que prefieren tener un mayor control sobre su c\u00f3digo y dependencias. En vanilla Javascript normalmente de utilizan CDN para trabajar con librerias Javascript CDN Content Delivery Network Un CDN (Content Delivery Network o Red de Distribuci\u00f3n de Contenidos) es una red de servidores distribuidos geogr\u00e1ficamente que se utilizan para entregar contenido a los usuarios de Internet de manera r\u00e1pida y eficiente. Un CDN de JavaScript es una red de servidores que almacenan y entregan archivos JavaScript a los usuarios. Esto se hace para mejorar la velocidad y el rendimiento de las aplicaciones y sitios web que utilizan JavaScript, ya que los archivos se descargan desde el servidor m\u00e1s cercano en lugar de tener que ser descargados desde un servidor centralizado. Los CDN de JavaScript tambi\u00e9n pueden proporcionar otras ventajas, como la reducci\u00f3n del tr\u00e1fico en el servidor principal y la protecci\u00f3n contra el tr\u00e1fico de spam y la sobrecarga. Muchas librer\u00edas y marcos de JavaScript populares, como Mapbox, Bootstrap y Turjs, se ofrecen a trav\u00e9s de CDN para facilitar su uso en aplicaciones y sitios web. Utilizaremos les CDN para acceder e incorporar librer\u00edas y nuevas funcionalidades a nuestros visores, Ejemplo <script src=\"https://cdnjs.cloudflare.com/ajax/libs/Turf.js/6.5.0/turf.min.js\" integrity=\"sha512-Q7HOppxoH0L2M7hreVoFCtUZimR2YaY0fBewIYzkCgmNtgOOZ5IgMNYxHgfps0qrO1ef5m7L1FeHrhXlq1I9HA==\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"></script>","title":"2.3.Tecnolog\u00edas JavaScript"},{"location":"2.3.tecnologias_javascript/#javascript","text":"JavaScript es un lenguaje de programaci\u00f3n que se utiliza com\u00fanmente para crear elementos interactivos en sitios web. Es un lenguaje de script del lado del cliente, lo que significa que es ejecutado por el navegador web en lugar de en el servidor. JavaScript se utiliza para a\u00f1adir interactividad a las p\u00e1ginas web, como animaciones, validaci\u00f3n de formularios y manejo de eventos de usuario como clics y acciones de pasar el rat\u00f3n. Tambi\u00e9n se puede utilizar para realizar solicitudes HTTP para recuperar datos de un servidor y para manipular el Modelo de Objeto del Documento (DOM) de una p\u00e1gina web. JavaScript es un componente esencial del desarrollo web moderno y es compatible con todos los principales navegadores web. A menudo se utiliza junto con otras tecnolog\u00edas como HTML y CSS para crear sitios web din\u00e1micos e interactivos. 1995: JavaScript se lanza por primera vez bajo el nombre de LiveScript. 1996: JavaScript se renombra a su nombre actual y se incorpora al navegador web Netscape Navigator 2.0. 1997: Se publica la primera versi\u00f3n estable de JavaScript, la versi\u00f3n 1.1. 1999: Se publica la versi\u00f3n 1.3 de JavaScript. 2000: Se publica la versi\u00f3n 1.5 de JavaScript. 2002: Se publica la versi\u00f3n 1.6 de JavaScript. 2005: Se publica la versi\u00f3n 1.7 de JavaScript. 2006: Se publica la versi\u00f3n 2.0 de JavaScript (tambi\u00e9n conocida como ECMAScript 3). 2009: Se publica la versi\u00f3n 3.1 de JavaScript (tambi\u00e9n conocida como ECMAScript 5). 2011: Se publica la versi\u00f3n 5.1 de JavaScript (tambi\u00e9n conocida como ECMAScript 5.1). 2015: Se publica la versi\u00f3n 6 de ECMAScript (tambi\u00e9n conocida como ECMAScript 2015 o JavaScript 6). 2016: Se publica la versi\u00f3n 7 de ECMAScript (tambi\u00e9n conocida como ECMAScript 2016 o JavaScript 7). 2017: Se publica la versi\u00f3n 8 de ECMAScript (tambi\u00e9n conocida como ECMAScript 2017 o JavaScript 8). 2018: Se publica la versi\u00f3n 9 de ECMAScript (tambi\u00e9n conocida como ECMAScript 2018 o JavaScript 9). 2019: Se publica la versi\u00f3n 10 de ECMAScript (tambi\u00e9n conocida como ECMAScript 2019 o JavaScript 10). 2020: Se publica la versi\u00f3n 11 de ECMAScript (tambi\u00e9n conocida como ECMAScript 2020 o JavaScript 11). Cada nueva versi\u00f3n de ECMAScript a\u00f1ade nuevas caracter\u00edsticas y mejoras al lenguaje de programaci\u00f3n JavaScript. Las \u00faltimas versiones de ECMAScript tambi\u00e9n se conocen como ECMAScript N, donde N es el a\u00f1o en el que se public\u00f3 la versi\u00f3n.","title":"JavaScript"},{"location":"2.3.tecnologias_javascript/#para-aprender-javascript","text":"https://github.com/micromata/awesome-javascript-learning","title":"Para aprender JavaScript"},{"location":"2.3.tecnologias_javascript/#tecnologias-basadas-en-javascript","text":"Hay muchas tecnolog\u00edas que se basan en JavaScript, entre ellas: Node.js : Node.js es un tiempo de ejecuci\u00f3n de JavaScript que te permite ejecutar JavaScript en el lado del servidor. Est\u00e1 construido sobre el motor de JavaScript V8 de Chrome y se utiliza com\u00fanmente para crear aplicaciones de back-end y APIs. Angular : Angular es un marco de JavaScript del lado del cliente que se utiliza para crear aplicaciones web de una sola p\u00e1gina. Ofrece una serie de caracter\u00edsticas para construir interfaces de usuario complejas, como plantillas, programaci\u00f3n reactiva y inyecci\u00f3n de dependencias. React : React es una biblioteca de JavaScript para crear interfaces de usuario. Est\u00e1 dise\u00f1ada para ser utilizada para construir componentes de UI reutilizables y a menudo se utiliza en combinaci\u00f3n con otras bibliotecas o marcos, como Redux. Vue.js : Vue.js es un marco de JavaScript del lado del cliente que est\u00e1 dise\u00f1ado para crear aplicaciones web de una sola p\u00e1gina. Ofrece una sintaxis ligera y f\u00e1cil de aprender y a menudo se utiliza para crear interfaces de usuario e integrarlas con APIs. Electron : Electron es un marco para crear aplicaciones de escritorio multiplataforma utilizando JavaScript, HTML y CSS. Se utiliza por muchas aplicaciones populares, como Slack, Visual Studio Code y Skype. Svelte.js :Svelte es un marco de JavaScript del lado del cliente que est\u00e1 dise\u00f1ado para crear aplicaciones web e interfaces de usuario. Es conocido por su tama\u00f1o peque\u00f1o y su rendimiento r\u00e1pido, ya que compila el c\u00f3digo en tiempo de compilaci\u00f3n en lugar de en tiempo de ejecuci\u00f3n, lo que resulta en tama\u00f1os de paquete m\u00e1s peque\u00f1os y una renderizaci\u00f3n m\u00e1s r\u00e1pida. Todas estas tecnolog\u00edas utilizan NPM (Node Package Manager) para instalar librerias Javascript","title":"Tecnolog\u00edas basadas en Javascript"},{"location":"2.3.tecnologias_javascript/#como-trabajaremos-nosotros","text":"","title":"\u00bfC\u00f3mo trabajaremos nosotros?"},{"location":"2.3.tecnologias_javascript/#vanilla-javascript","text":"Vanilla JavaScript, tambi\u00e9n conocido como JavaScript puro, es el lenguaje de programaci\u00f3n JavaScript sin utilizar ning\u00fan marco de terceros ni librer\u00edas. Se refiere a la versi\u00f3n del lenguaje de programaci\u00f3n sin capas adicionales de abstracci\u00f3n o dependencias externas. La ventaja de usar Vanilla JavaScript es que es m\u00e1s ligero y r\u00e1pido que utilizar marcos o librer\u00edas externas. Adem\u00e1s, puede ser m\u00e1s f\u00e1cil de aprender y entender para aquellos que est\u00e9n empezando con JavaScript, ya que no hay que preocuparse por la sintaxis o las convenciones de un marco espec\u00edfico. Sin embargo, Vanilla JavaScript tambi\u00e9n puede requerir m\u00e1s trabajo y escribir m\u00e1s c\u00f3digo para implementar funcionalidades complejas, ya que no incluye muchas de las herramientas y funcionalidades que se encuentran en marcos y librer\u00edas m\u00e1s grandes. En resumen, Vanilla JavaScript es una buena opci\u00f3n para proyectos m\u00e1s peque\u00f1os o para aquellos que prefieren tener un mayor control sobre su c\u00f3digo y dependencias. En vanilla Javascript normalmente de utilizan CDN para trabajar con librerias Javascript","title":"Vanilla Javascript"},{"location":"2.3.tecnologias_javascript/#cdn-content-delivery-network","text":"Un CDN (Content Delivery Network o Red de Distribuci\u00f3n de Contenidos) es una red de servidores distribuidos geogr\u00e1ficamente que se utilizan para entregar contenido a los usuarios de Internet de manera r\u00e1pida y eficiente. Un CDN de JavaScript es una red de servidores que almacenan y entregan archivos JavaScript a los usuarios. Esto se hace para mejorar la velocidad y el rendimiento de las aplicaciones y sitios web que utilizan JavaScript, ya que los archivos se descargan desde el servidor m\u00e1s cercano en lugar de tener que ser descargados desde un servidor centralizado. Los CDN de JavaScript tambi\u00e9n pueden proporcionar otras ventajas, como la reducci\u00f3n del tr\u00e1fico en el servidor principal y la protecci\u00f3n contra el tr\u00e1fico de spam y la sobrecarga. Muchas librer\u00edas y marcos de JavaScript populares, como Mapbox, Bootstrap y Turjs, se ofrecen a trav\u00e9s de CDN para facilitar su uso en aplicaciones y sitios web. Utilizaremos les CDN para acceder e incorporar librer\u00edas y nuevas funcionalidades a nuestros visores, Ejemplo <script src=\"https://cdnjs.cloudflare.com/ajax/libs/Turf.js/6.5.0/turf.min.js\" integrity=\"sha512-Q7HOppxoH0L2M7hreVoFCtUZimR2YaY0fBewIYzkCgmNtgOOZ5IgMNYxHgfps0qrO1ef5m7L1FeHrhXlq1I9HA==\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"></script>","title":"CDN Content Delivery Network"},{"location":"3.1.introduccion_a_mapbox_gs_js/","text":"Librer\u00eda Mapbox GL JS Mapbox GL JS es una librer\u00eda de JavaScript para mostrar mapas en p\u00e1ginas web. Es parte de la plataforma Mapbox y est\u00e1 dise\u00f1ada para ser utilizada junto con otras herramientas y servicios de Mapbox. Algunas de las caracter\u00edsticas de Mapbox GL JS son: Estilos de mapas personalizados : Mapbox GL JS te permite crear estilos de mapas personalizados utilizando Mapbox Studio o utilizar alguno de los muchos estilos predise\u00f1ados que est\u00e1n disponibles. Mapas interactivos : Mapbox GL JS proporciona una serie de funcionalidades interactivas, como panor\u00e1mica y zoom, marcadores y ventanas emergentes, y capas. Datos en tiempo real : Mapbox GL JS puede mostrar datos en tiempo real en tus mapas, como informaci\u00f3n de tr\u00e1fico, actualizaciones del tiempo, etc. Geocodificaci\u00f3n y reverse geocodificaci\u00f3n : Mapbox GL JS incluye funcionalidades de geocodificaci\u00f3n y reverse geocodificaci\u00f3n, que te permiten convertir direcciones y nombres de lugares en coordenadas geogr\u00e1ficas y viceversa. Navegaci\u00f3n : Mapbox GL JS ofrece APIs de navegaci\u00f3n y enrutamiento que se pueden utilizar para crear indicaciones paso a paso y otras funcionalidades de navegaci\u00f3n para tus aplicaciones. P\u00e1ginas indispensables para trabajar con MapBox GL API Reference https://www.mapbox.com/mapbox-gl-js/api/ Ejemplos https://docs.mapbox.com/mapbox-gl-js/example/ Siempre que utilizemos la librer\u00eda de Mapbox GL JS deberemos a\u00f1adir nuestro Access Token \u00bfC\u00f3mo empezar? Descargamos geoweb.zip y descomprimir el contenido dentro de nuestro directorio geoweb de nuestro proyecto en local. Deber\u00edamos tener esta estructura /geoweb \u251c\u2500\u2500 /css \u251c\u2500\u2500 /datos \u251c\u2500\u2500 /images \u251c\u2500\u2500 index.html \u251c\u2500\u2500 /js \u2514\u2500\u2500 README.md Paso 1 Abrimos VSCODE y creamos mapbox-basico.html dentro de nuestro directorio /geoweb A\u00f1adiremos el siguiente c\u00f3digo que es la estructura b\u00e1sica de una p\u00e1gina : < html lang = \"es\" > < head > < title > Mapbox b\u00e1sico </ title > < meta charset = \"utf-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta name = \"author\" content = \"autor\" /> < meta name = \"description\" content = \"descripci\u00f3n p\u00e1gina\" > < meta name = \"robots\" content = \"index,follow\" > </ head > < body > </ body > </ html > Vamos a crear un mapa con Mapbox, para ello incluiremos en la cabecera <head> : * La librer\u00eda JavaScript mapbox-gl.js (que contiene el c\u00f3digo de la liber\u00eda) * La hoja de estilo mapbox-gl.css (con la hoja de estilos de la librer\u00eda): < link rel = \"stylesheet\" href = \"https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.css\" /> < script src = \"https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.js\" ></ script > Dentro de la etiqueta <body> encontramos el marcado para el mapa, que genera un \u00fanico elemento de documento. Tambi\u00e9n damos al contenedor <div> un atributo id para que podamos hacer referencia a \u00e9l en nuestro c\u00f3digo: < body > < div id = \"map\" ></ div > </ body > Nuestra p\u00e1gina tendria este aspecto < html lang = \"es\" > < head > < title > Mapbox b\u00e1sico </ title > < meta charset = \"utf-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta name = \"author\" content = \"autor\" /> < meta name = \"description\" content = \"descripci\u00f3n p\u00e1gina\" > < meta name = \"robots\" content = \"index,follow\" > < link rel = \"stylesheet\" href = \"https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.css\" /> < script src = \"https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.js\" ></ script > </ head > < body > < div id = \"map\" ></ div > </ body > </ html > A\u00f1adiremos un estilo al mapa para que ocupe toda la p\u00e1gina web, dentro la etiqueta <style/> dentro del <head> < style > body { margin : 0 ; padding : 0 ; overflow : hidden ; } # map { height : 100 % ; width : 100 % ; } </ style > Ahora nuestra p\u00e1gina tendria este aspecto < html lang = \"es\" > < head > < title > Mapbox b\u00e1sico </ title > < meta charset = \"utf-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta name = \"author\" content = \"autor\" /> < meta name = \"description\" content = \"descripci\u00f3n p\u00e1gina\" > < meta name = \"robots\" content = \"index,follow\" > < link rel = \"stylesheet\" href = \"https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.css\" /> < script src = \"https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.js\" ></ script > < style > body { margin : 0 ; padding : 0 ; overflow : hidden ; } # map { height : 100 % ; width : 100 % ; } </ style > </ head > < body > < div id = \"map\" ></ div > </ body > </ html > Crearemos la funci\u00f3n init() para crear un Mapa - mapboxgl.Map - y a\u00f1adir un estilo El objeto principal del mapa en Mapbox gl js se llama mapboxgl.Map mapboxgl.Map Es el constructor principal del mapa https://docs.mapbox.com/mapbox-gl-js/api/#map var map = new mapboxgl . Map ({ container : 'map' , // container id style : 'mapbox://styles/mapbox/streets-v11' , // stylesheet location center : [ - 74.5 , 40 ], // starting position [lng, lat] zoom : 9 // starting zoom }); Las opciones del mapa o controles siempre se pasan de la misma forma { nombre_opcion1 : \"valor_opcion2\" , nombre_opcion2 : \"valor_opcion2\" , ... }; Ahora crearemos el tag <script> justo encima de </head> y empezaremos a programar dentro del \u00e9l < script > var map ; // tambien const map; function init () { mapboxgl . accessToken = 'pk.eyJ1IjoiZ2lzbWFzdGVybTIiLCJhIjoiY2plZHhubTQxMTNoYzMza3Rqa3kxYTdrOCJ9.53B1E6mKD_EQOVb2Y0-SsA' ; map = new mapboxgl . Map ({ container : 'map' , style : 'mapbox://styles/mapbox/outdoors-v11' , center : [ 2.16859 , 41.3954 ], zoom : 13 , attributionControl : false }); } </ script > Llamaremos a la funci\u00f3n init() desde el evento onLoad del <body> < body onLoad = \"init()\" > La p\u00e1gina final nos quedar\u00eda as\u00ed Mapbox b\u00e1sico final < html lang = \"es\" > < head > < title > Mapbox b\u00e1sico </ title > < meta charset = \"utf-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta name = \"author\" content = \"autor\" /> < meta name = \"description\" content = \"descripci\u00f3n p\u00e1gina\" > < meta name = \"robots\" content = \"index,follow\" > < link rel = \"stylesheet\" href = \"https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.css\" /> < script src = \"https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.js\" ></ script > < style > body { margin : 0 ; padding : 0 ; overflow : hidden ; } # map { height : 100 % ; width : 100 % ; } </ style > < script > var map ; // tambien const map; function init () { mapboxgl . accessToken = 'pk.eyJ1IjoiZ2lzbWFzdGVybTIiLCJhIjoiY2plZHhubTQxMTNoYzMza3Rqa3kxYTdrOCJ9.53B1E6mKD_EQOVb2Y0-SsA' ; map = new mapboxgl . Map ({ container : 'map' , style : 'mapbox://styles/mapbox/outdoors-v11' , center : [ 2.16859 , 41.3954 ], zoom : 13 , attributionControl : false }); } </ script > </ head > < body onLoad = \"init()\" > < div id = \"map\" ></ div > </ body > </ html > \u00bfQue acabamos de hacer? Miramos dentro del tag <script> Hemos creado la variable global map Usamos mapboxgl.Map para instanciar el objeto mapa, pasando el id del <div> d\u00f3nde ir\u00e1 el mapa Utilizamos las opciones center , style y zoom iniciar el mapa Visualizamos con Live Server! Paso 2 Cambiamos el estilo outdoors por nuestro estilo y cambiamos nuestro token (hay que hacerlo siempre!!) < html lang = \"es\" > < head > < title > Mapbox b\u00e1sico </ title > < meta charset = \"utf-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta name = \"author\" content = \"autor\" /> < meta name = \"description\" content = \"descripci\u00f3n p\u00e1gina\" > < meta name = \"robots\" content = \"index,follow\" > < link rel = \"stylesheet\" href = \"https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.css\" /> < script src = \"https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.js\" ></ script > < style > body { margin : 0 ; padding : 0 ; overflow : hidden ; } # map { height : 100 % ; width : 100 % ; } </ style > < script > var map ; // tambien const map; function init () { mapboxgl . accessToken = 'pk.eyJ1IjoiZ2lzbWFzdGVybTIiLCJhIjoiY2plZHhubTQxMTNoYzMza3Rqa3kxYTdrOCJ9.53B1E6mKD_EQOVb2Y0-SsA' ; map = new mapboxgl . Map ({ container : 'map' , style : 'mapbox://styles/gismasterm2/ckyiybz965inm14pp3pd3981c' , center : [ 2.16859 , 41.3954 ], zoom : 13 , attributionControl : false }); } </ script > </ head > < body onLoad = \"init()\" > < div id = \"map\" ></ div > </ body > </ html > \u00bfC\u00f3mo a\u00f1adiriamos la opci\u00f3n hash al mapa ? Paso 3 - Podemos a\u00f1adir algunos controles Controles https://docs.mapbox.com/mapbox-gl-js/api/markers/#navigationcontrol NavigationControl GeolocateControl AttributionControl ScaleControl FullscreenControl Popup Marker < html lang = \"es\" > < head > < title > Mapbox b\u00e1sico </ title > < meta charset = \"utf-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta name = \"author\" content = \"autor\" /> < meta name = \"description\" content = \"descripci\u00f3n p\u00e1gina\" > < meta name = \"robots\" content = \"index,follow\" > < link rel = \"stylesheet\" href = \"https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.css\" /> < script src = \"https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.js\" ></ script > < style > body { margin : 0 ; padding : 0 ; overflow : hidden ; } # map { height : 100 % ; width : 100 % ; } </ style > < script > var map ; // tambien const map; function init () { mapboxgl . accessToken = 'pk.eyJ1IjoiZ2lzbWFzdGVybTIiLCJhIjoiY2plZHhubTQxMTNoYzMza3Rqa3kxYTdrOCJ9.53B1E6mKD_EQOVb2Y0-SsA' ; map = new mapboxgl . Map ({ container : 'map' , style : 'mapbox://styles/gismasterm2/ckyiybz965inm14pp3pd3981c' , center : [ 2.16859 , 41.3954 ], zoom : 13 , attributionControl : false }); map . addControl ( new mapboxgl . AttributionControl ({ compact : true })); map . addControl ( new mapboxgl . NavigationControl ()); } </ script > </ head > < body onLoad = \"init()\" > < div id = \"map\" ></ div > </ body > </ html > \u00bfA\u00f1adimos control GeoLocalizaci\u00f3n? https://docs.mapbox.com/mapbox-gl-js/api/#geolocatecontrol map . addControl ( new mapboxgl . GeolocateControl ()); o con opciones... map . addControl ( new mapboxgl . GeolocateControl ({ positionOptions : { enableHighAccuracy : true }, trackUserLocation : true })); \u00bfQue pasar\u00eda si edito mi estilo en Mapbox Studio? \u00bfSubimos el ejemplo al GitHub? git pull git add . git commit -m \"mapa mapbox\" git push","title":"3.1.Librerias de mapas, ejemplo Mapox GL JS"},{"location":"3.1.introduccion_a_mapbox_gs_js/#libreria-mapbox-gl-js","text":"Mapbox GL JS es una librer\u00eda de JavaScript para mostrar mapas en p\u00e1ginas web. Es parte de la plataforma Mapbox y est\u00e1 dise\u00f1ada para ser utilizada junto con otras herramientas y servicios de Mapbox. Algunas de las caracter\u00edsticas de Mapbox GL JS son: Estilos de mapas personalizados : Mapbox GL JS te permite crear estilos de mapas personalizados utilizando Mapbox Studio o utilizar alguno de los muchos estilos predise\u00f1ados que est\u00e1n disponibles. Mapas interactivos : Mapbox GL JS proporciona una serie de funcionalidades interactivas, como panor\u00e1mica y zoom, marcadores y ventanas emergentes, y capas. Datos en tiempo real : Mapbox GL JS puede mostrar datos en tiempo real en tus mapas, como informaci\u00f3n de tr\u00e1fico, actualizaciones del tiempo, etc. Geocodificaci\u00f3n y reverse geocodificaci\u00f3n : Mapbox GL JS incluye funcionalidades de geocodificaci\u00f3n y reverse geocodificaci\u00f3n, que te permiten convertir direcciones y nombres de lugares en coordenadas geogr\u00e1ficas y viceversa. Navegaci\u00f3n : Mapbox GL JS ofrece APIs de navegaci\u00f3n y enrutamiento que se pueden utilizar para crear indicaciones paso a paso y otras funcionalidades de navegaci\u00f3n para tus aplicaciones.","title":"Librer\u00eda Mapbox GL JS"},{"location":"3.1.introduccion_a_mapbox_gs_js/#paginas-indispensables-para-trabajar-con-mapbox-gl","text":"API Reference https://www.mapbox.com/mapbox-gl-js/api/ Ejemplos https://docs.mapbox.com/mapbox-gl-js/example/ Siempre que utilizemos la librer\u00eda de Mapbox GL JS deberemos a\u00f1adir nuestro Access Token","title":"P\u00e1ginas indispensables para trabajar con MapBox GL"},{"location":"3.1.introduccion_a_mapbox_gs_js/#como-empezar","text":"Descargamos geoweb.zip y descomprimir el contenido dentro de nuestro directorio geoweb de nuestro proyecto en local. Deber\u00edamos tener esta estructura /geoweb \u251c\u2500\u2500 /css \u251c\u2500\u2500 /datos \u251c\u2500\u2500 /images \u251c\u2500\u2500 index.html \u251c\u2500\u2500 /js \u2514\u2500\u2500 README.md","title":"\u00bfC\u00f3mo empezar?"},{"location":"3.1.introduccion_a_mapbox_gs_js/#paso-1-abrimos-vscode-y-creamos-mapbox-basicohtml-dentro-de-nuestro-directorio-geoweb","text":"A\u00f1adiremos el siguiente c\u00f3digo que es la estructura b\u00e1sica de una p\u00e1gina : < html lang = \"es\" > < head > < title > Mapbox b\u00e1sico </ title > < meta charset = \"utf-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta name = \"author\" content = \"autor\" /> < meta name = \"description\" content = \"descripci\u00f3n p\u00e1gina\" > < meta name = \"robots\" content = \"index,follow\" > </ head > < body > </ body > </ html > Vamos a crear un mapa con Mapbox, para ello incluiremos en la cabecera <head> : * La librer\u00eda JavaScript mapbox-gl.js (que contiene el c\u00f3digo de la liber\u00eda) * La hoja de estilo mapbox-gl.css (con la hoja de estilos de la librer\u00eda): < link rel = \"stylesheet\" href = \"https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.css\" /> < script src = \"https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.js\" ></ script > Dentro de la etiqueta <body> encontramos el marcado para el mapa, que genera un \u00fanico elemento de documento. Tambi\u00e9n damos al contenedor <div> un atributo id para que podamos hacer referencia a \u00e9l en nuestro c\u00f3digo: < body > < div id = \"map\" ></ div > </ body > Nuestra p\u00e1gina tendria este aspecto < html lang = \"es\" > < head > < title > Mapbox b\u00e1sico </ title > < meta charset = \"utf-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta name = \"author\" content = \"autor\" /> < meta name = \"description\" content = \"descripci\u00f3n p\u00e1gina\" > < meta name = \"robots\" content = \"index,follow\" > < link rel = \"stylesheet\" href = \"https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.css\" /> < script src = \"https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.js\" ></ script > </ head > < body > < div id = \"map\" ></ div > </ body > </ html > A\u00f1adiremos un estilo al mapa para que ocupe toda la p\u00e1gina web, dentro la etiqueta <style/> dentro del <head> < style > body { margin : 0 ; padding : 0 ; overflow : hidden ; } # map { height : 100 % ; width : 100 % ; } </ style > Ahora nuestra p\u00e1gina tendria este aspecto < html lang = \"es\" > < head > < title > Mapbox b\u00e1sico </ title > < meta charset = \"utf-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta name = \"author\" content = \"autor\" /> < meta name = \"description\" content = \"descripci\u00f3n p\u00e1gina\" > < meta name = \"robots\" content = \"index,follow\" > < link rel = \"stylesheet\" href = \"https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.css\" /> < script src = \"https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.js\" ></ script > < style > body { margin : 0 ; padding : 0 ; overflow : hidden ; } # map { height : 100 % ; width : 100 % ; } </ style > </ head > < body > < div id = \"map\" ></ div > </ body > </ html > Crearemos la funci\u00f3n init() para crear un Mapa - mapboxgl.Map - y a\u00f1adir un estilo El objeto principal del mapa en Mapbox gl js se llama mapboxgl.Map mapboxgl.Map Es el constructor principal del mapa https://docs.mapbox.com/mapbox-gl-js/api/#map var map = new mapboxgl . Map ({ container : 'map' , // container id style : 'mapbox://styles/mapbox/streets-v11' , // stylesheet location center : [ - 74.5 , 40 ], // starting position [lng, lat] zoom : 9 // starting zoom }); Las opciones del mapa o controles siempre se pasan de la misma forma { nombre_opcion1 : \"valor_opcion2\" , nombre_opcion2 : \"valor_opcion2\" , ... }; Ahora crearemos el tag <script> justo encima de </head> y empezaremos a programar dentro del \u00e9l < script > var map ; // tambien const map; function init () { mapboxgl . accessToken = 'pk.eyJ1IjoiZ2lzbWFzdGVybTIiLCJhIjoiY2plZHhubTQxMTNoYzMza3Rqa3kxYTdrOCJ9.53B1E6mKD_EQOVb2Y0-SsA' ; map = new mapboxgl . Map ({ container : 'map' , style : 'mapbox://styles/mapbox/outdoors-v11' , center : [ 2.16859 , 41.3954 ], zoom : 13 , attributionControl : false }); } </ script > Llamaremos a la funci\u00f3n init() desde el evento onLoad del <body> < body onLoad = \"init()\" > La p\u00e1gina final nos quedar\u00eda as\u00ed","title":"Paso 1 Abrimos VSCODE y creamos mapbox-basico.html dentro de nuestro directorio /geoweb"},{"location":"3.1.introduccion_a_mapbox_gs_js/#mapbox-basico-final","text":"< html lang = \"es\" > < head > < title > Mapbox b\u00e1sico </ title > < meta charset = \"utf-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta name = \"author\" content = \"autor\" /> < meta name = \"description\" content = \"descripci\u00f3n p\u00e1gina\" > < meta name = \"robots\" content = \"index,follow\" > < link rel = \"stylesheet\" href = \"https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.css\" /> < script src = \"https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.js\" ></ script > < style > body { margin : 0 ; padding : 0 ; overflow : hidden ; } # map { height : 100 % ; width : 100 % ; } </ style > < script > var map ; // tambien const map; function init () { mapboxgl . accessToken = 'pk.eyJ1IjoiZ2lzbWFzdGVybTIiLCJhIjoiY2plZHhubTQxMTNoYzMza3Rqa3kxYTdrOCJ9.53B1E6mKD_EQOVb2Y0-SsA' ; map = new mapboxgl . Map ({ container : 'map' , style : 'mapbox://styles/mapbox/outdoors-v11' , center : [ 2.16859 , 41.3954 ], zoom : 13 , attributionControl : false }); } </ script > </ head > < body onLoad = \"init()\" > < div id = \"map\" ></ div > </ body > </ html > \u00bfQue acabamos de hacer? Miramos dentro del tag <script> Hemos creado la variable global map Usamos mapboxgl.Map para instanciar el objeto mapa, pasando el id del <div> d\u00f3nde ir\u00e1 el mapa Utilizamos las opciones center , style y zoom iniciar el mapa Visualizamos con Live Server!","title":"Mapbox b\u00e1sico final"},{"location":"3.1.introduccion_a_mapbox_gs_js/#paso-2-cambiamos-el-estilo-outdoors-por-nuestro-estilo-y-cambiamos-nuestro-token-hay-que-hacerlo-siempre","text":"< html lang = \"es\" > < head > < title > Mapbox b\u00e1sico </ title > < meta charset = \"utf-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta name = \"author\" content = \"autor\" /> < meta name = \"description\" content = \"descripci\u00f3n p\u00e1gina\" > < meta name = \"robots\" content = \"index,follow\" > < link rel = \"stylesheet\" href = \"https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.css\" /> < script src = \"https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.js\" ></ script > < style > body { margin : 0 ; padding : 0 ; overflow : hidden ; } # map { height : 100 % ; width : 100 % ; } </ style > < script > var map ; // tambien const map; function init () { mapboxgl . accessToken = 'pk.eyJ1IjoiZ2lzbWFzdGVybTIiLCJhIjoiY2plZHhubTQxMTNoYzMza3Rqa3kxYTdrOCJ9.53B1E6mKD_EQOVb2Y0-SsA' ; map = new mapboxgl . Map ({ container : 'map' , style : 'mapbox://styles/gismasterm2/ckyiybz965inm14pp3pd3981c' , center : [ 2.16859 , 41.3954 ], zoom : 13 , attributionControl : false }); } </ script > </ head > < body onLoad = \"init()\" > < div id = \"map\" ></ div > </ body > </ html > \u00bfC\u00f3mo a\u00f1adiriamos la opci\u00f3n hash al mapa ?","title":"Paso 2 Cambiamos el estilo outdoors por nuestro estilo y cambiamos nuestro token (hay que hacerlo siempre!!)"},{"location":"3.1.introduccion_a_mapbox_gs_js/#paso-3-podemos-anadir-algunos-controles","text":"Controles https://docs.mapbox.com/mapbox-gl-js/api/markers/#navigationcontrol NavigationControl GeolocateControl AttributionControl ScaleControl FullscreenControl Popup Marker < html lang = \"es\" > < head > < title > Mapbox b\u00e1sico </ title > < meta charset = \"utf-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta name = \"author\" content = \"autor\" /> < meta name = \"description\" content = \"descripci\u00f3n p\u00e1gina\" > < meta name = \"robots\" content = \"index,follow\" > < link rel = \"stylesheet\" href = \"https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.css\" /> < script src = \"https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.js\" ></ script > < style > body { margin : 0 ; padding : 0 ; overflow : hidden ; } # map { height : 100 % ; width : 100 % ; } </ style > < script > var map ; // tambien const map; function init () { mapboxgl . accessToken = 'pk.eyJ1IjoiZ2lzbWFzdGVybTIiLCJhIjoiY2plZHhubTQxMTNoYzMza3Rqa3kxYTdrOCJ9.53B1E6mKD_EQOVb2Y0-SsA' ; map = new mapboxgl . Map ({ container : 'map' , style : 'mapbox://styles/gismasterm2/ckyiybz965inm14pp3pd3981c' , center : [ 2.16859 , 41.3954 ], zoom : 13 , attributionControl : false }); map . addControl ( new mapboxgl . AttributionControl ({ compact : true })); map . addControl ( new mapboxgl . NavigationControl ()); } </ script > </ head > < body onLoad = \"init()\" > < div id = \"map\" ></ div > </ body > </ html > \u00bfA\u00f1adimos control GeoLocalizaci\u00f3n? https://docs.mapbox.com/mapbox-gl-js/api/#geolocatecontrol map . addControl ( new mapboxgl . GeolocateControl ()); o con opciones... map . addControl ( new mapboxgl . GeolocateControl ({ positionOptions : { enableHighAccuracy : true }, trackUserLocation : true })); \u00bfQue pasar\u00eda si edito mi estilo en Mapbox Studio? \u00bfSubimos el ejemplo al GitHub? git pull git add . git commit -m \"mapa mapbox\" git push","title":"Paso 3 - Podemos a\u00f1adir algunos controles"},{"location":"3.2.mapa_global/","text":"Mapa con proyecci\u00f3n global Normalmente la liberias de mapas muestran los mapas en proyeccion ESPG:3857 o tamb\u00eden llamada \"Web Mercator\" Esta proyecci\u00f3n se utiliza com\u00fanmente porque preserva \u00e1ngulos y formas, lo que la hace adecuada para aplicaciones como mapas web que se muestran en una superficie plana. Tambi\u00e9n se utiliza ampliamente porque permite una f\u00e1cil conversi\u00f3n hacia y desde el Sistema Geod\u00e9sico Mundial (WGS84), que es un sistema de coordenadas est\u00e1ndar utilizado para coordenadas GPS. Pero toda proyecci\u00f3n de la tierra sobre un plano, persentar\u00e1 deformaciones. La libreria de Mapbox GL Js nos permite trabajar de forma adaptable con diferentes proyecciones El tipo de proyecci\u00f3n es una opcion de mapboxgl.Map https://docs.mapbox.com/mapbox-gl-js/style-spec/projection/ Creamos nuestro mapa global Paso 1 Abrimos VSCODE y creamos mapbox-global.html dentro de nuestro directorio /geoweb Copiamos el contenido de nuestro mapbox-basico.html < html lang = \"es\" > < head > < title > Mapbox b\u00e1sico </ title > < meta charset = \"utf-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta name = \"author\" content = \"autor\" /> < meta name = \"description\" content = \"descripci\u00f3n p\u00e1gina\" > < meta name = \"robots\" content = \"index,follow\" > < link rel = \"stylesheet\" href = \"https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.css\" /> < script src = \"https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.js\" ></ script > < style > body { margin : 0 ; padding : 0 ; overflow : hidden ; } # map { height : 100 % ; width : 100 % ; } </ style > < script > var map ; // tambien const map; function init () { mapboxgl . accessToken = 'pk.eyJ1IjoiZ2lzbWFzdGVybTIiLCJhIjoiY2plZHhubTQxMTNoYzMza3Rqa3kxYTdrOCJ9.53B1E6mKD_EQOVb2Y0-SsA' ; map = new mapboxgl . Map ({ container : 'map' , style : 'mapbox://styles/gismasterm2/ckyiybz965inm14pp3pd3981c' , center : [ 2.16859 , 41.3954 ], zoom : 13 , attributionControl : false }); map . addControl ( new mapboxgl . AttributionControl ({ compact : true })); map . addControl ( new mapboxgl . NavigationControl ()); } </ script > </ head > < body onLoad = \"init()\" > < div id = \"map\" ></ div > </ body > </ html > Paso 2 Cambiamos el estilo por estilo satellite y coordenadas y nivel de zoom < html lang = \"es\" > < head > < title > Mapbox global </ title > < meta charset = \"utf-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta name = \"author\" content = \"autor\" /> < meta name = \"description\" content = \"descripci\u00f3n p\u00e1gina\" > < meta name = \"robots\" content = \"index,follow\" > < link rel = \"stylesheet\" href = \"https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.css\" /> < script src = \"https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.js\" ></ script > < style > body { margin : 0 ; padding : 0 ; overflow : hidden ; } # map { height : 100 % ; width : 100 % ; } </ style > < script > var map ; // tambien const map; function init () { mapboxgl . accessToken = 'pk.eyJ1IjoiZ2lzbWFzdGVybTIiLCJhIjoiY2plZHhubTQxMTNoYzMza3Rqa3kxYTdrOCJ9.53B1E6mKD_EQOVb2Y0-SsA' ; map = new mapboxgl . Map ({ container : 'map' , style : 'mapbox://styles/mapbox/satellite-streets-v11' , center : [ 0 , 0 ], zoom : 2.3 , attributionControl : false }); map . addControl ( new mapboxgl . AttributionControl ({ compact : true })); map . addControl ( new mapboxgl . NavigationControl ()); } </ script > </ head > < body onLoad = \"init()\" > < div id = \"map\" ></ div > </ body > </ html > Visualizamos Paso 3 - A\u00f1adimos proyecci\u00f3n \"globe\" y efectos de ambiente En versiones V12 de estilos de Mapbox estos estan por defecto < html lang = \"es\" > < head > < title > Mapbox global </ title > < meta charset = \"utf-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta name = \"author\" content = \"autor\" /> < meta name = \"description\" content = \"descripci\u00f3n p\u00e1gina\" > < meta name = \"robots\" content = \"index,follow\" > < link rel = \"stylesheet\" href = \"https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.css\" /> < script src = \"https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.js\" ></ script > < style > body { margin : 0 ; padding : 0 ; overflow : hidden ; } # map { height : 100 % ; width : 100 % ; } </ style > < script > var map ; // tambien const map; function init () { mapboxgl . accessToken = 'pk.eyJ1IjoiZ2lzbWFzdGVybTIiLCJhIjoiY2plZHhubTQxMTNoYzMza3Rqa3kxYTdrOCJ9.53B1E6mKD_EQOVb2Y0-SsA' ; map = new mapboxgl . Map ({ container : 'map' , style : 'mapbox://styles/mapbox/satellite-streets-v11' , center : [ 0 , 0 ], zoom : 2.3 , projection : 'globe' , attributionControl : false }); map . addControl ( new mapboxgl . AttributionControl ({ compact : true })); map . addControl ( new mapboxgl . NavigationControl ()); map . on ( 'load' , () => { map . setFog ({}); }); } </ script > </ head > < body onLoad = \"init()\" > < div id = \"map\" ></ div > </ body > </ html > Diferente codificaci\u00f3n para hacer lo mismo map.on('load', () => { map.setFog({}); }); es igual a map.on('load',function(){ map.setFog({}); }); map.on(\"load\") es un evento del mapa !! https://docs.mapbox.com/mapbox-gl-js/api/map/#map-events Visualizamos Paso 3 - A\u00f1adimos el plugin de geocodificaci\u00f3n Los Plugins son controles extra encapsuladas fuera del core de la libreria https://docs.mapbox.com/mapbox-gl-js/plugins/ Control mapbox-gl-geocoder Ejemplo uso: https://docs.mapbox.com/mapbox-gl-js/example/mapbox-gl-geocoder API: https://github.com/mapbox/mapbox-gl-geocoder/blob/main/API.md#mapboxgeocoder A\u00f1adimos las librerias e instanciamos control < html lang = \"es\" > < head > < title > Mapbox global </ title > < meta charset = \"utf-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta name = \"author\" content = \"autor\" /> < meta name = \"description\" content = \"descripci\u00f3n p\u00e1gina\" > < meta name = \"robots\" content = \"index,follow\" > < link rel = \"stylesheet\" href = \"https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.css\" /> < script src = \"https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.js\" ></ script > < script src = \"https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v5.0.0/mapbox-gl-geocoder.min.js\" ></ script > < link rel = \"stylesheet\" href = \"https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v5.0.0/mapbox-gl-geocoder.css\" type = \"text/css\" > < style > body { margin : 0 ; padding : 0 ; overflow : hidden ; } # map { height : 100 % ; width : 100 % ; } </ style > < script > var map ; // tambien const map; function init () { mapboxgl . accessToken = 'pk.eyJ1IjoiZ2lzbWFzdGVybTIiLCJhIjoiY2plZHhubTQxMTNoYzMza3Rqa3kxYTdrOCJ9.53B1E6mKD_EQOVb2Y0-SsA' ; map = new mapboxgl . Map ({ container : 'map' , style : 'mapbox://styles/mapbox/satellite-streets-v11' , center : [ 0 , 0 ], zoom : 2.3 , projection : 'globe' , attributionControl : false }); map . addControl ( new mapboxgl . AttributionControl ({ compact : true })); map . addControl ( new mapboxgl . NavigationControl ()); map . on ( 'load' , () => { map . setFog ({}); }); map . addControl ( new MapboxGeocoder ({ accessToken : mapboxgl . accessToken , mapboxgl : mapboxgl }) ); } </ script > </ head > < body onLoad = \"init()\" > < div id = \"map\" ></ div > </ body > </ html > \u00bfC\u00f3mo har\u00edamos para que el control apareciera colapsado com un bot\u00f3n? Miramos opciones del control https://github.com/mapbox/mapbox-gl-geocoder/blob/main/API.md#mapboxgeocoder \u00bfSubimos el ejemplo al GitHub? git pull git add . git commit -m \"mapa global\" git push","title":"3.2.Mi primer mapa global"},{"location":"3.2.mapa_global/#mapa-con-proyeccion-global","text":"Normalmente la liberias de mapas muestran los mapas en proyeccion ESPG:3857 o tamb\u00eden llamada \"Web Mercator\" Esta proyecci\u00f3n se utiliza com\u00fanmente porque preserva \u00e1ngulos y formas, lo que la hace adecuada para aplicaciones como mapas web que se muestran en una superficie plana. Tambi\u00e9n se utiliza ampliamente porque permite una f\u00e1cil conversi\u00f3n hacia y desde el Sistema Geod\u00e9sico Mundial (WGS84), que es un sistema de coordenadas est\u00e1ndar utilizado para coordenadas GPS. Pero toda proyecci\u00f3n de la tierra sobre un plano, persentar\u00e1 deformaciones. La libreria de Mapbox GL Js nos permite trabajar de forma adaptable con diferentes proyecciones El tipo de proyecci\u00f3n es una opcion de mapboxgl.Map https://docs.mapbox.com/mapbox-gl-js/style-spec/projection/","title":"Mapa con proyecci\u00f3n global"},{"location":"3.2.mapa_global/#creamos-nuestro-mapa-global","text":"","title":"Creamos nuestro mapa global"},{"location":"3.2.mapa_global/#paso-1-abrimos-vscode-y-creamos-mapbox-globalhtml-dentro-de-nuestro-directorio-geoweb","text":"Copiamos el contenido de nuestro mapbox-basico.html < html lang = \"es\" > < head > < title > Mapbox b\u00e1sico </ title > < meta charset = \"utf-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta name = \"author\" content = \"autor\" /> < meta name = \"description\" content = \"descripci\u00f3n p\u00e1gina\" > < meta name = \"robots\" content = \"index,follow\" > < link rel = \"stylesheet\" href = \"https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.css\" /> < script src = \"https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.js\" ></ script > < style > body { margin : 0 ; padding : 0 ; overflow : hidden ; } # map { height : 100 % ; width : 100 % ; } </ style > < script > var map ; // tambien const map; function init () { mapboxgl . accessToken = 'pk.eyJ1IjoiZ2lzbWFzdGVybTIiLCJhIjoiY2plZHhubTQxMTNoYzMza3Rqa3kxYTdrOCJ9.53B1E6mKD_EQOVb2Y0-SsA' ; map = new mapboxgl . Map ({ container : 'map' , style : 'mapbox://styles/gismasterm2/ckyiybz965inm14pp3pd3981c' , center : [ 2.16859 , 41.3954 ], zoom : 13 , attributionControl : false }); map . addControl ( new mapboxgl . AttributionControl ({ compact : true })); map . addControl ( new mapboxgl . NavigationControl ()); } </ script > </ head > < body onLoad = \"init()\" > < div id = \"map\" ></ div > </ body > </ html >","title":"Paso 1 Abrimos VSCODE y creamos mapbox-global.html dentro de nuestro directorio /geoweb"},{"location":"3.2.mapa_global/#paso-2-cambiamos-el-estilo-por-estilo-satellite-y-coordenadas-y-nivel-de-zoom","text":"< html lang = \"es\" > < head > < title > Mapbox global </ title > < meta charset = \"utf-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta name = \"author\" content = \"autor\" /> < meta name = \"description\" content = \"descripci\u00f3n p\u00e1gina\" > < meta name = \"robots\" content = \"index,follow\" > < link rel = \"stylesheet\" href = \"https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.css\" /> < script src = \"https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.js\" ></ script > < style > body { margin : 0 ; padding : 0 ; overflow : hidden ; } # map { height : 100 % ; width : 100 % ; } </ style > < script > var map ; // tambien const map; function init () { mapboxgl . accessToken = 'pk.eyJ1IjoiZ2lzbWFzdGVybTIiLCJhIjoiY2plZHhubTQxMTNoYzMza3Rqa3kxYTdrOCJ9.53B1E6mKD_EQOVb2Y0-SsA' ; map = new mapboxgl . Map ({ container : 'map' , style : 'mapbox://styles/mapbox/satellite-streets-v11' , center : [ 0 , 0 ], zoom : 2.3 , attributionControl : false }); map . addControl ( new mapboxgl . AttributionControl ({ compact : true })); map . addControl ( new mapboxgl . NavigationControl ()); } </ script > </ head > < body onLoad = \"init()\" > < div id = \"map\" ></ div > </ body > </ html > Visualizamos","title":"Paso 2 Cambiamos el estilo por estilo satellite y coordenadas y nivel de zoom"},{"location":"3.2.mapa_global/#paso-3-anadimos-proyeccion-globe-y-efectos-de-ambiente","text":"En versiones V12 de estilos de Mapbox estos estan por defecto < html lang = \"es\" > < head > < title > Mapbox global </ title > < meta charset = \"utf-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta name = \"author\" content = \"autor\" /> < meta name = \"description\" content = \"descripci\u00f3n p\u00e1gina\" > < meta name = \"robots\" content = \"index,follow\" > < link rel = \"stylesheet\" href = \"https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.css\" /> < script src = \"https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.js\" ></ script > < style > body { margin : 0 ; padding : 0 ; overflow : hidden ; } # map { height : 100 % ; width : 100 % ; } </ style > < script > var map ; // tambien const map; function init () { mapboxgl . accessToken = 'pk.eyJ1IjoiZ2lzbWFzdGVybTIiLCJhIjoiY2plZHhubTQxMTNoYzMza3Rqa3kxYTdrOCJ9.53B1E6mKD_EQOVb2Y0-SsA' ; map = new mapboxgl . Map ({ container : 'map' , style : 'mapbox://styles/mapbox/satellite-streets-v11' , center : [ 0 , 0 ], zoom : 2.3 , projection : 'globe' , attributionControl : false }); map . addControl ( new mapboxgl . AttributionControl ({ compact : true })); map . addControl ( new mapboxgl . NavigationControl ()); map . on ( 'load' , () => { map . setFog ({}); }); } </ script > </ head > < body onLoad = \"init()\" > < div id = \"map\" ></ div > </ body > </ html > Diferente codificaci\u00f3n para hacer lo mismo map.on('load', () => { map.setFog({}); }); es igual a map.on('load',function(){ map.setFog({}); }); map.on(\"load\") es un evento del mapa !! https://docs.mapbox.com/mapbox-gl-js/api/map/#map-events Visualizamos","title":"Paso 3 - A\u00f1adimos proyecci\u00f3n \"globe\" y efectos de ambiente"},{"location":"3.2.mapa_global/#paso-3-anadimos-el-plugin-de-geocodificacion","text":"Los Plugins son controles extra encapsuladas fuera del core de la libreria https://docs.mapbox.com/mapbox-gl-js/plugins/ Control mapbox-gl-geocoder Ejemplo uso: https://docs.mapbox.com/mapbox-gl-js/example/mapbox-gl-geocoder API: https://github.com/mapbox/mapbox-gl-geocoder/blob/main/API.md#mapboxgeocoder A\u00f1adimos las librerias e instanciamos control < html lang = \"es\" > < head > < title > Mapbox global </ title > < meta charset = \"utf-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta name = \"author\" content = \"autor\" /> < meta name = \"description\" content = \"descripci\u00f3n p\u00e1gina\" > < meta name = \"robots\" content = \"index,follow\" > < link rel = \"stylesheet\" href = \"https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.css\" /> < script src = \"https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.js\" ></ script > < script src = \"https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v5.0.0/mapbox-gl-geocoder.min.js\" ></ script > < link rel = \"stylesheet\" href = \"https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v5.0.0/mapbox-gl-geocoder.css\" type = \"text/css\" > < style > body { margin : 0 ; padding : 0 ; overflow : hidden ; } # map { height : 100 % ; width : 100 % ; } </ style > < script > var map ; // tambien const map; function init () { mapboxgl . accessToken = 'pk.eyJ1IjoiZ2lzbWFzdGVybTIiLCJhIjoiY2plZHhubTQxMTNoYzMza3Rqa3kxYTdrOCJ9.53B1E6mKD_EQOVb2Y0-SsA' ; map = new mapboxgl . Map ({ container : 'map' , style : 'mapbox://styles/mapbox/satellite-streets-v11' , center : [ 0 , 0 ], zoom : 2.3 , projection : 'globe' , attributionControl : false }); map . addControl ( new mapboxgl . AttributionControl ({ compact : true })); map . addControl ( new mapboxgl . NavigationControl ()); map . on ( 'load' , () => { map . setFog ({}); }); map . addControl ( new MapboxGeocoder ({ accessToken : mapboxgl . accessToken , mapboxgl : mapboxgl }) ); } </ script > </ head > < body onLoad = \"init()\" > < div id = \"map\" ></ div > </ body > </ html > \u00bfC\u00f3mo har\u00edamos para que el control apareciera colapsado com un bot\u00f3n? Miramos opciones del control https://github.com/mapbox/mapbox-gl-geocoder/blob/main/API.md#mapboxgeocoder \u00bfSubimos el ejemplo al GitHub? git pull git add . git commit -m \"mapa global\" git push","title":"Paso 3 - A\u00f1adimos el plugin de geocodificaci\u00f3n"},{"location":"3.3.visor_catastro/","text":"Descripci\u00f3n Nos han encargado realizar un mapa para visualizar edificios de Barcelona Sabemos que la direccion Direccion General de Catastro ofrece servicio de descarga de edificios http://www.catastro.minhap.es/webinspire/index.html Sabemos tambi\u00e9n que existe un plugin de QGIS para hacer una descarga m\u00e1s f\u00e1cil el \"Spanish Inspire Catastral Downloader\" Mapbox.com no ofrece opciones como servidor para hospedar y convertir datos a Vector-Tiles Mapbox tiene un estio mundial oscuro que tambi\u00e9n nos puede servir como fondo mapbox://styles/mapbox/dark-v10 En la specificaci\u00f3n de Style de Mapbox los pol\u00edgonos tienen tienen el \"paint property\" \"fill-extrusion\" d\u00f3nde que puedo cambiar de color y extrudir geometrias https://docs.mapbox.com/mapbox-gl-js/style-spec/#layers-fill-extrusion Paso 1: Preparamos datos Descargamos archivo ya convertido contrucciones.zip No guarde\u00eds el archivo dentro de /geoweb Si quisieramos preparar los datos o descargar otro municipio Podr\u00edamos descargar todas las construcciones de Barcelona (321 mil pol\u00edgonos) directamente de la Direccion General de Catastro http://www.catastro.minhap.es/webinspire/index.html Descargar\u00edamos los datos http://www.catastro.minhap.es/INSPIRE/Buildings/08/08900-BARCELONA/A.ES.SDGC.BU.08900.zip o utilizar\u00edamos QGIS + complemento \"Spanish Inspire Catastral Downloader\" Convertir\u00edamos el archivo A.ES.SDGC.BU.08900.buildingpart.gml a SHP \"contrucciones.shp\" con QGIS (coordenadas lat/lon EPSG:4326) Paso 2:Entramos en MapbBox.com i cargamos los datos Lo cargamos como Tileset dentro de MapBox, a\u00f1adimos contrucciones.zip SIN DESCOMPRIMIR Entramos en MapBox.com Studio --> Tilesets --> New tileset Arrastramos contrucciones.zip * Copiamos ID y nombre de la capa Paso 3:Crear edificios.html En este ejemplo y en adelante vamos a eutilizar el archivo css /geoweb/css/estilobase.css El archivo estilobase.css es este body { margin : 0 ; } # map { height : 100 % ; width : 100 % ; background-color : #ffffff } * Vamos a VSCode y creamos el archivo edificios.html dentro de /geoweb < html > < head > < meta charset = 'utf-8' /> < title > Edificios </ title > < meta name = 'viewport' content = 'initial-scale=1,maximum-scale=1,user-scalable=no' /> < script src = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.js' ></ script > < link href = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.css' rel = 'stylesheet' /> < link href = 'css/estilobase.css' rel = 'stylesheet' /> < script src = 'js/edificios.js' ></ script > < script > //A\u00f1adir vuestor token y/o estilo !! var map ; function init () { mapboxgl . accessToken = 'pk.eyJ1IjoiZ2lzbWFzdGVybTIiLCJhIjoiY2plZHhubTQxMTNoYzMza3Rqa3kxYTdrOCJ9.53B1E6mKD_EQOVb2Y0-SsA' ; map = new mapboxgl . Map ({ container : 'map' , style : 'mapbox://styles/mapbox/dark-v10' , center : [ 2.16859 , 41.3954 ], zoom : 15 , attributionControl : false , pitch : 45 , hash : true }); map . addControl ( new mapboxgl . AttributionControl ({ compact : true })); map . addControl ( new mapboxgl . NavigationControl ()); } // final init </ script > </ head > < body onload = \"init()\" > < div id = \"map\" ></ div > </ body > </ html > Paso 4: Creamos archivo JS Dentro de nuestro directorio /geoweb/js/ creamos el archivo edificios.js , d\u00f3nde crearemos funciones especificas de nuestro proyecto Creamos la funci\u00f3n addEdificiosCapa() function addEdificiosCapa () { map . addSource ( \"edificios_source\" , { \"type\" : \"vector\" , \"url\" : \"mapbox://gismasterm2.2gkan1gt\" // Nuestor ID Tileset }); //fin map source map . addLayer ({ \"id\" : \"edificios\" , \"type\" : \"fill-extrusion\" , \"source\" : \"edificios_source\" , \"source-layer\" : \"construcciones-324xyz\" , // Nuestro nombre Tileset \"maxzoom\" : 21 , \"minzoom\" : 15 , // \"filter\": [\">\", \"numberOfFl\", 0], \"paint\" : { \"fill-extrusion-color\" : [ \"interpolate\" , [ \"linear\" ], [ \"number\" , [ \"get\" , \"numberOfFl\" ]], 0 , \"#FFFFFF\" , 1 , \"#e6b03d\" , 3 , \"#e6b03d\" , 6 , \"#3de66d\" , 9 , \"#3de6b1\" , 12 , \"#22ecf0\" , 15 , \"#14b1fd\" , 20 , \"#3d73e6\" , 40 , \"#123a8f\" , 60 , \"#ce2f7e\" , 106 , \"#ff4d4d\" ], \"fill-extrusion-height\" : [ \"interpolate\" , [ \"linear\" ], [ \"zoom\" ], 8 , 0 , 12.5 , 0 , 14 , [ \"*\" , 1 , [ \"to-number\" , [ \"get\" , \"numberOfFl\" ]]], 16 , [ \"*\" , 1.5 , [ \"to-number\" , [ \"get\" , \"numberOfFl\" ]]], 20 , [ \"*\" , 2 , [ \"to-number\" , [ \"get\" , \"numberOfFl\" ]]] ], \"fill-extrusion-opacity\" : 0.9 } } //,\"road-label\" ); } //fin funcion Paso 4: Llamamos funciones en el evento load de map Llamamos a la funci\u00f3n addEdificiosCapa() < html > < head > < meta charset = 'utf-8' /> < title > Edificios </ title > < meta name = 'viewport' content = 'initial-scale=1,maximum-scale=1,user-scalable=no' /> < script src = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.js' ></ script > < link href = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.css' rel = 'stylesheet' /> < link href = 'css/estilobase.css' rel = 'stylesheet' /> < script src = 'js/edificios.js' ></ script > < script > //A\u00f1adir vuestor token y/o estilo !! var map ; function init () { mapboxgl . accessToken = 'pk.eyJ1IjoiZ2lzbWFzdGVybTIiLCJhIjoiY2plZHhubTQxMTNoYzMza3Rqa3kxYTdrOCJ9.53B1E6mKD_EQOVb2Y0-SsA' ; map = new mapboxgl . Map ({ container : 'map' , style : 'mapbox://styles/mapbox/dark-v10' , center : [ 2.16859 , 41.3954 ], zoom : 15 , attributionControl : false , pitch : 45 , hash : true }); map . addControl ( new mapboxgl . AttributionControl ({ compact : true })); map . addControl ( new mapboxgl . NavigationControl ()); map . on ( 'load' , function () { addEdificiosCapa (); }); //fin onload } // final init </ script > </ head > < body onload = \"init()\" > < div id = \"map\" ></ div > </ body > </ html > visualizamos el mapa Descomentamos filtro y orden de capas para una mejor visualizaci\u00f3n en edificios.js \u00bfQue ha cambiado? function addEdificiosCapa () { map . addSource ( \"edificios_source\" , { \"type\" : \"vector\" , \"url\" : \"mapbox://gismasterm2.2gkan1gt\" // Nuestor ID Tileset }); //fin map source map . addLayer ({ \"id\" : \"edificios\" , \"type\" : \"fill-extrusion\" , \"source\" : \"edificios_source\" , \"source-layer\" : \"construcciones-324xyz\" , // Nuestro nombre Tileset \"maxzoom\" : 21 , \"minzoom\" : 14 , \"filter\" : [ \">\" , \"numberOfFl\" , 0 ], \"paint\" : { \"fill-extrusion-color\" : [ \"interpolate\" , [ \"linear\" ], [ \"number\" , [ \"get\" , \"numberOfFl\" ]], 0 , \"#FFFFFF\" , 1 , \"#e6b03d\" , 3 , \"#e6b03d\" , 6 , \"#3de66d\" , 9 , \"#3de6b1\" , 12 , \"#22ecf0\" , 15 , \"#14b1fd\" , 20 , \"#3d73e6\" , 40 , \"#123a8f\" , 60 , \"#ce2f7e\" , 106 , \"#ff4d4d\" ], \"fill-extrusion-height\" : [ \"interpolate\" , [ \"linear\" ], [ \"zoom\" ], 8 , 0 , 12.5 , 0 , 14 , [ \"*\" , 1 , [ \"to-number\" , [ \"get\" , \"numberOfFl\" ]]], 16 , [ \"*\" , 1.5 , [ \"to-number\" , [ \"get\" , \"numberOfFl\" ]]], 20 , [ \"*\" , 2 , [ \"to-number\" , [ \"get\" , \"numberOfFl\" ]]] ], \"fill-extrusion-opacity\" : 0.9 } } , \"road-label\" ); } //fin funcion Paso 5: Opciones de filtro Vamos a crear una funcionalidad para filtrar edificios seg\u00fan su n\u00famero de pisos Creamos un elementos HTML de tipo input:range para poder filtrar < html > < head > < meta charset = 'utf-8' /> < title > Edificios </ title > < meta name = 'viewport' content = 'initial-scale=1,maximum-scale=1,user-scalable=no' /> < script src = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.js' ></ script > < link href = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.css' rel = 'stylesheet' /> < link href = 'css/estilobase.css' rel = 'stylesheet' /> < script src = 'js/edificios.js' ></ script > < script > //A\u00f1adir vuestor token y/o estilo !! var map ; function init () { mapboxgl . accessToken = 'pk.eyJ1IjoiZ2lzbWFzdGVybTIiLCJhIjoiY2plZHhubTQxMTNoYzMza3Rqa3kxYTdrOCJ9.53B1E6mKD_EQOVb2Y0-SsA' ; map = new mapboxgl . Map ({ container : 'map' , style : 'mapbox://styles/mapbox/dark-v10' , center : [ 2.16859 , 41.3954 ], zoom : 15 , attributionControl : false , pitch : 45 , hash : true }); map . addControl ( new mapboxgl . AttributionControl ({ compact : true })); map . addControl ( new mapboxgl . NavigationControl ()); map . on ( 'load' , function () { addEdificiosCapa (); }); //fin onload } // final init </ script > </ head > < body onload = \"init()\" > < div class = \"panelTopIzquierda\" > < label id = \"altura\" > M\u00e1s de 0 pisos </ label > < input id = \"slider\" type = \"range\" min = \"1\" max = \"50\" step = \"1\" value = \"0\" /> </ div > < div id = \"map\" ></ div > </ body > </ html > A\u00f1adimos a estilobase.css las siguientes clases . panelTopIzquierda { position : absolute ; top : 45 px ; left : 20 px ; width : 200 px ; z-index : 1000 ; background-color : rgba ( 255 , 255 , 255 , 0.9 ); padding : 10 px ; font-size : 20 px ; color : #333333 ; border-radius : 5 px ; } . panelTopIzquierda label { font-size : 0.85 em ; } . panelTopIzquierda input { cursor : pointer ; width : 95 % ; } Paso 6: Funci\u00f3n de filtro A\u00f1adimos a edificios.js la funcion filtrarEdificios() function filtrarEdificios ( valor ) { map . setFilter ( \"edificios\" , [ \">\" , \"numberOfFl\" , parseInt ( valor )]); document . getElementById ( \"altura\" ). innerHTML = \"M\u00e1s de <b>\" + valor + \"</b> pisos\" ; } Paso 7: Evento onChange LLamamos a la funci\u00f3n de desde el evento onChange del objeto input de HTML < html > < head > < meta charset = 'utf-8' /> < title > Edificios </ title > < meta name = 'viewport' content = 'initial-scale=1,maximum-scale=1,user-scalable=no' /> < script src = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.js' ></ script > < link href = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.css' rel = 'stylesheet' /> < link href = 'css/estilobase.css' rel = 'stylesheet' /> < script src = 'js/utils.js' ></ script > < script src = 'js/edificios.js' ></ script > < script > //A\u00f1adir vuestor token y/o estilo !! var map ; function init () { mapboxgl . accessToken = 'pk.eyJ1IjoiZ2lzbWFzdGVybTIiLCJhIjoiY2plZHhubTQxMTNoYzMza3Rqa3kxYTdrOCJ9.53B1E6mKD_EQOVb2Y0-SsA' ; map = new mapboxgl . Map ({ container : 'map' , style : 'mapbox://styles/mapbox/dark-v10' , center : [ 2.16859 , 41.3954 ], zoom : 15 , attributionControl : false , pitch : 45 , hash : true }); map . addControl ( new mapboxgl . AttributionControl ({ compact : true })); map . addControl ( new mapboxgl . NavigationControl ()); map . on ( 'load' , function () { addEdificiosCapa (); addPopupToMap ( \"edificios\" ); }); //fin onload } // final init </ script > </ head > < body onload = \"init()\" > < div class = \"panelTopIzquierda\" > < label id = \"altura\" > M\u00e1s de 0 pisos </ label > < input onChange = \"filtrarEdificios(this.value)\" id = \"slider\" type = \"range\" min = \"1\" max = \"50\" step = \"1\" value = \"0\" /> </ div > < div id = \"map\" ></ div > </ body > </ html > Activar/ desactivar capa via c\u00f3digo map . setLayoutProperty ( \"edificios\" , \"visibility\" , \"visible\" ); map . setLayoutProperty ( \"edificios\" , \"visibility\" , \"none\" ); desactivar capas cuyo id contenga 'label' for ( var i = 0 ; i < map . getStyle (). layers . length ; i ++ ){ if ( map . getStyle (). layers [ i ]. id . indexOf ( \"label\" ) !=- 1 ){ map . setLayoutProperty ( map . getStyle (). layers [ i ]. id , \"visibility\" , \"none\" ); } } A\u00f1adir funcion Popup personalizado dentro de edificios.js function addPopupToMapEdificios ( nombreCapa ) { map . on ( 'click' , nombreCapa , function ( e ) { var text = \"\" ; //console.info(e); for ( key in e . features [ 0 ]. properties ) { if ( key == \"numberOfFl\" ) { text += \"<b>Numero de plantas</b>:\" + e . features [ 0 ]. properties [ key ] + \"<br>\" ; } if ( key == \"localId\" ) { //localId 0004702DF3800C_part1 //http://ovc.catastro.meh.es/OVCServWeb/OVCWcfLibres/OVCFotoFachada.svc/RecuperarFotoFachadaGet?ReferenciaCatastral=0004701DF3800C //https://www1.sedecatastro.gob.es/CYCBienInmueble/OVCListaBienes.aspx?rc1=0004701&rc2=DF3800C var localId = e . features [ 0 ]. properties [ key ]; var localIdSplit = localId . split ( \"_\" ); // 0004702DF3800C part1 var parte1 = localIdSplit [ 0 ]. substring ( 0 , 7 ); var parte2 = localIdSplit [ 0 ]. substring ( 7 , localIdSplit [ 0 ]. length ); text += \"<img width=200 src=http://ovc.catastro.meh.es/OVCServWeb/OVCWcfLibres/OVCFotoFachada.svc/RecuperarFotoFachadaGet?ReferenciaCatastral=\" + localId + \"><br>\" ; text += \"<a target=blank href=https://www1.sedecatastro.gob.es/CYCBienInmueble/OVCListaBienes.aspx?rc1=\" + parte1 + \"&rc2=\" + parte2 + \">Ficha</a><br>\" ; } } new mapboxgl . Popup () . setLngLat ( e . lngLat ) . setHTML ( text ) . addTo ( map ); }); map . on ( 'mouseenter' , nombreCapa , function () { map . getCanvas (). style . cursor = 'pointer' ; }); map . on ( 'mouseleave' , nombreCapa , function () { map . getCanvas (). style . cursor = '' ; }); } Paso 8: Llamamos funci\u00f3n addPopupToMapEdificios LLamamos a la funci\u00f3n de desde el evento load del mapa < html > < head > < meta charset = 'utf-8' /> < title > Edificios </ title > < meta name = 'viewport' content = 'initial-scale=1,maximum-scale=1,user-scalable=no' /> < script src = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.js' ></ script > < link href = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.css' rel = 'stylesheet' /> < link href = 'css/estilobase.css' rel = 'stylesheet' /> < script src = 'js/utils.js' ></ script > < script src = 'js/edificios.js' ></ script > < script > //A\u00f1adir vuestor token y/o estilo !! var map ; function init () { mapboxgl . accessToken = 'pk.eyJ1IjoiZ2lzbWFzdGVybTIiLCJhIjoiY2plZHhubTQxMTNoYzMza3Rqa3kxYTdrOCJ9.53B1E6mKD_EQOVb2Y0-SsA' ; map = new mapboxgl . Map ({ container : 'map' , style : 'mapbox://styles/mapbox/dark-v10' , center : [ 2.16859 , 41.3954 ], zoom : 15 , attributionControl : false , pitch : 45 , hash : true }); map . addControl ( new mapboxgl . AttributionControl ({ compact : true })); map . addControl ( new mapboxgl . NavigationControl ()); map . on ( 'load' , function () { addEdificiosCapa (); addPopupToMapEdificios ( \"edificios\" ); }); //fin onload } // final init </ script > </ head > < body onload = \"init()\" > < div class = \"panelTopIzquierda\" > < label id = \"altura\" > M\u00e1s de 0 pisos </ label > < input onChange = \"filtrarEdificios(this.value)\" id = \"slider\" type = \"range\" min = \"1\" max = \"50\" step = \"1\" value = \"0\" /> </ div > < div id = \"map\" ></ div > </ body > </ html > Visualizamos mapa Geocodificador Mapbox GL https://github.com/mapbox/mapbox-gl-geocoder/blob/master/API.md < html > < head > < meta charset = 'utf-8' /> < title > Edificios </ title > < meta name = 'viewport' content = 'initial-scale=1,maximum-scale=1,user-scalable=no' /> < script src = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.js' ></ script > < link href = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.css' rel = 'stylesheet' /> < script src = \"https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.4.2/mapbox-gl-geocoder.min.js\" ></ script > < link rel = \"stylesheet\" href = \"https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.4.2/mapbox-gl-geocoder.css\" type = \"text/css\" /> < link href = 'css/estilobase.css' rel = 'stylesheet' /> < script src = 'js/edificios.js' ></ script > < script > //A\u00f1adir vuestor token y/o estilo !! var map ; function init () { mapboxgl . accessToken = 'pk.eyJ1IjoiZ2lzbWFzdGVybTIiLCJhIjoiY2plZHhubTQxMTNoYzMza3Rqa3kxYTdrOCJ9.53B1E6mKD_EQOVb2Y0-SsA' ; map = new mapboxgl . Map ({ container : 'map' , style : 'mapbox://styles/mapbox/dark-v10' , center : [ 2.16859 , 41.3954 ], zoom : 15 , attributionControl : false , pitch : 45 , hash : true }); map . addControl ( new mapboxgl . AttributionControl ({ compact : true })); map . addControl ( new mapboxgl . NavigationControl ()); map . addControl ( new MapboxGeocoder ({ accessToken : mapboxgl . accessToken , mapboxgl : mapboxgl })); map . on ( 'load' , function () { addEdificiosCapa (); addPopupToMapEdificios ( \"edificios\" ); }); //fin onload } // final init </ script > </ head > < body onload = \"init()\" > < div class = \"panelTopIzquierda\" > < label id = \"altura\" > M\u00e1s de 0 pisos </ label > < input onChange = \"filtrarEdificios(this.value)\" id = \"slider\" type = \"range\" min = \"1\" max = \"50\" step = \"1\" value = \"0\" /> </ div > < div id = \"map\" ></ div > </ body > </ html > Miramos opciones de Geocoder. \u00bfLimit\u00e1mos b\u00fasquedas del geocoder por caja de coordenadas de Barcelona? [2.1066 , 41.3000 , 2.2536 , 41.4468] \u00bfPonemos t\u00edtulo? \u00bfSubimos el ejemplo al GitHub? git pull git add . git commit -m \"visor catastro\" git push Saber m\u00e1s.. Podemos programas el evento click sobre el mapa y no sobre una capa conresta, obtener los vectores de todas las capas y filtrar por la capa que nos interesa. La funci\u00f3n addPopupToMapEdificios quedaria as\u00ed y funcionaria en 2d c\u00f3mo en 3d function addPopupToMapEdificios ( nombreCapa ) { map . on ( 'click' , function ( e ) { var text = \"\" ; var bbox = [[ e . point . x - 10 , e . point . y - 10 ], [ e . point . x + 10 , e . point . y + 10 ]]; var features = map . queryRenderedFeatures ( bbox , { layers : [ nombreCapa ] }); if ( features . length > 0 ) { for ( key in features [ 0 ]. properties ) { if ( key == \"numberOfFl\" ) { text += \"<b>Numero de plantas</b>:\" + features [ 0 ]. properties [ key ] + \"<br>\" ; } if ( key == \"localId\" ) { //localId 0004702DF3800C_part1 //http://ovc.catastro.meh.es/OVCServWeb/OVCWcfLibres/OVCFotoFachada.svc/RecuperarFotoFachadaGet?ReferenciaCatastral=0004701DF3800C //https://www1.sedecatastro.gob.es/CYCBienInmueble/OVCListaBienes.aspx?rc1=0004701&rc2=DF3800C var localId = features [ 0 ]. properties [ key ]; var localIdSplit = localId . split ( \"_\" ); // 0004702DF3800C part1 var parte1 = localIdSplit [ 0 ]. substring ( 0 , 7 ); var parte2 = localIdSplit [ 0 ]. substring ( 7 , localIdSplit [ 0 ]. length ); text += \"<img width=200 src=http://ovc.catastro.meh.es/OVCServWeb/OVCWcfLibres/OVCFotoFachada.svc/RecuperarFotoFachadaGet?ReferenciaCatastral=\" + localId + \"><br>\" ; text += \"<a target=blank href=https://www1.sedecatastro.gob.es/CYCBienInmueble/OVCListaBienes.aspx?rc1=\" + parte1 + \"&rc2=\" + parte2 + \">Ficha</a><br>\" ; } } new mapboxgl . Popup () . setLngLat ( e . lngLat ) . setHTML ( text ) . addTo ( map ); } }); map . on ( 'mouseenter' , nombreCapa , function () { map . getCanvas (). style . cursor = 'pointer' ; }); map . on ( 'mouseleave' , nombreCapa , function () { map . getCanvas (). style . cursor = '' ; }); }","title":"3.3.Visor catastro"},{"location":"3.3.visor_catastro/#descripcion","text":"Nos han encargado realizar un mapa para visualizar edificios de Barcelona Sabemos que la direccion Direccion General de Catastro ofrece servicio de descarga de edificios http://www.catastro.minhap.es/webinspire/index.html Sabemos tambi\u00e9n que existe un plugin de QGIS para hacer una descarga m\u00e1s f\u00e1cil el \"Spanish Inspire Catastral Downloader\" Mapbox.com no ofrece opciones como servidor para hospedar y convertir datos a Vector-Tiles Mapbox tiene un estio mundial oscuro que tambi\u00e9n nos puede servir como fondo mapbox://styles/mapbox/dark-v10 En la specificaci\u00f3n de Style de Mapbox los pol\u00edgonos tienen tienen el \"paint property\" \"fill-extrusion\" d\u00f3nde que puedo cambiar de color y extrudir geometrias https://docs.mapbox.com/mapbox-gl-js/style-spec/#layers-fill-extrusion","title":"Descripci\u00f3n"},{"location":"3.3.visor_catastro/#paso-1-preparamos-datos","text":"Descargamos archivo ya convertido contrucciones.zip No guarde\u00eds el archivo dentro de /geoweb Si quisieramos preparar los datos o descargar otro municipio Podr\u00edamos descargar todas las construcciones de Barcelona (321 mil pol\u00edgonos) directamente de la Direccion General de Catastro http://www.catastro.minhap.es/webinspire/index.html Descargar\u00edamos los datos http://www.catastro.minhap.es/INSPIRE/Buildings/08/08900-BARCELONA/A.ES.SDGC.BU.08900.zip o utilizar\u00edamos QGIS + complemento \"Spanish Inspire Catastral Downloader\" Convertir\u00edamos el archivo A.ES.SDGC.BU.08900.buildingpart.gml a SHP \"contrucciones.shp\" con QGIS (coordenadas lat/lon EPSG:4326)","title":"Paso 1: Preparamos datos"},{"location":"3.3.visor_catastro/#paso-2entramos-en-mapbboxcom-i-cargamos-los-datos","text":"Lo cargamos como Tileset dentro de MapBox, a\u00f1adimos contrucciones.zip SIN DESCOMPRIMIR Entramos en MapBox.com Studio --> Tilesets --> New tileset Arrastramos contrucciones.zip * Copiamos ID y nombre de la capa","title":"Paso 2:Entramos en MapbBox.com i cargamos los datos"},{"location":"3.3.visor_catastro/#paso-3crear-edificioshtml","text":"En este ejemplo y en adelante vamos a eutilizar el archivo css /geoweb/css/estilobase.css El archivo estilobase.css es este body { margin : 0 ; } # map { height : 100 % ; width : 100 % ; background-color : #ffffff } * Vamos a VSCode y creamos el archivo edificios.html dentro de /geoweb < html > < head > < meta charset = 'utf-8' /> < title > Edificios </ title > < meta name = 'viewport' content = 'initial-scale=1,maximum-scale=1,user-scalable=no' /> < script src = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.js' ></ script > < link href = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.css' rel = 'stylesheet' /> < link href = 'css/estilobase.css' rel = 'stylesheet' /> < script src = 'js/edificios.js' ></ script > < script > //A\u00f1adir vuestor token y/o estilo !! var map ; function init () { mapboxgl . accessToken = 'pk.eyJ1IjoiZ2lzbWFzdGVybTIiLCJhIjoiY2plZHhubTQxMTNoYzMza3Rqa3kxYTdrOCJ9.53B1E6mKD_EQOVb2Y0-SsA' ; map = new mapboxgl . Map ({ container : 'map' , style : 'mapbox://styles/mapbox/dark-v10' , center : [ 2.16859 , 41.3954 ], zoom : 15 , attributionControl : false , pitch : 45 , hash : true }); map . addControl ( new mapboxgl . AttributionControl ({ compact : true })); map . addControl ( new mapboxgl . NavigationControl ()); } // final init </ script > </ head > < body onload = \"init()\" > < div id = \"map\" ></ div > </ body > </ html >","title":"Paso 3:Crear edificios.html"},{"location":"3.3.visor_catastro/#paso-4-creamos-archivo-js","text":"Dentro de nuestro directorio /geoweb/js/ creamos el archivo edificios.js , d\u00f3nde crearemos funciones especificas de nuestro proyecto Creamos la funci\u00f3n addEdificiosCapa() function addEdificiosCapa () { map . addSource ( \"edificios_source\" , { \"type\" : \"vector\" , \"url\" : \"mapbox://gismasterm2.2gkan1gt\" // Nuestor ID Tileset }); //fin map source map . addLayer ({ \"id\" : \"edificios\" , \"type\" : \"fill-extrusion\" , \"source\" : \"edificios_source\" , \"source-layer\" : \"construcciones-324xyz\" , // Nuestro nombre Tileset \"maxzoom\" : 21 , \"minzoom\" : 15 , // \"filter\": [\">\", \"numberOfFl\", 0], \"paint\" : { \"fill-extrusion-color\" : [ \"interpolate\" , [ \"linear\" ], [ \"number\" , [ \"get\" , \"numberOfFl\" ]], 0 , \"#FFFFFF\" , 1 , \"#e6b03d\" , 3 , \"#e6b03d\" , 6 , \"#3de66d\" , 9 , \"#3de6b1\" , 12 , \"#22ecf0\" , 15 , \"#14b1fd\" , 20 , \"#3d73e6\" , 40 , \"#123a8f\" , 60 , \"#ce2f7e\" , 106 , \"#ff4d4d\" ], \"fill-extrusion-height\" : [ \"interpolate\" , [ \"linear\" ], [ \"zoom\" ], 8 , 0 , 12.5 , 0 , 14 , [ \"*\" , 1 , [ \"to-number\" , [ \"get\" , \"numberOfFl\" ]]], 16 , [ \"*\" , 1.5 , [ \"to-number\" , [ \"get\" , \"numberOfFl\" ]]], 20 , [ \"*\" , 2 , [ \"to-number\" , [ \"get\" , \"numberOfFl\" ]]] ], \"fill-extrusion-opacity\" : 0.9 } } //,\"road-label\" ); } //fin funcion","title":"Paso 4: Creamos archivo JS"},{"location":"3.3.visor_catastro/#paso-4-llamamos-funciones-en-el-evento-load-de-map","text":"Llamamos a la funci\u00f3n addEdificiosCapa() < html > < head > < meta charset = 'utf-8' /> < title > Edificios </ title > < meta name = 'viewport' content = 'initial-scale=1,maximum-scale=1,user-scalable=no' /> < script src = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.js' ></ script > < link href = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.css' rel = 'stylesheet' /> < link href = 'css/estilobase.css' rel = 'stylesheet' /> < script src = 'js/edificios.js' ></ script > < script > //A\u00f1adir vuestor token y/o estilo !! var map ; function init () { mapboxgl . accessToken = 'pk.eyJ1IjoiZ2lzbWFzdGVybTIiLCJhIjoiY2plZHhubTQxMTNoYzMza3Rqa3kxYTdrOCJ9.53B1E6mKD_EQOVb2Y0-SsA' ; map = new mapboxgl . Map ({ container : 'map' , style : 'mapbox://styles/mapbox/dark-v10' , center : [ 2.16859 , 41.3954 ], zoom : 15 , attributionControl : false , pitch : 45 , hash : true }); map . addControl ( new mapboxgl . AttributionControl ({ compact : true })); map . addControl ( new mapboxgl . NavigationControl ()); map . on ( 'load' , function () { addEdificiosCapa (); }); //fin onload } // final init </ script > </ head > < body onload = \"init()\" > < div id = \"map\" ></ div > </ body > </ html > visualizamos el mapa Descomentamos filtro y orden de capas para una mejor visualizaci\u00f3n en edificios.js \u00bfQue ha cambiado? function addEdificiosCapa () { map . addSource ( \"edificios_source\" , { \"type\" : \"vector\" , \"url\" : \"mapbox://gismasterm2.2gkan1gt\" // Nuestor ID Tileset }); //fin map source map . addLayer ({ \"id\" : \"edificios\" , \"type\" : \"fill-extrusion\" , \"source\" : \"edificios_source\" , \"source-layer\" : \"construcciones-324xyz\" , // Nuestro nombre Tileset \"maxzoom\" : 21 , \"minzoom\" : 14 , \"filter\" : [ \">\" , \"numberOfFl\" , 0 ], \"paint\" : { \"fill-extrusion-color\" : [ \"interpolate\" , [ \"linear\" ], [ \"number\" , [ \"get\" , \"numberOfFl\" ]], 0 , \"#FFFFFF\" , 1 , \"#e6b03d\" , 3 , \"#e6b03d\" , 6 , \"#3de66d\" , 9 , \"#3de6b1\" , 12 , \"#22ecf0\" , 15 , \"#14b1fd\" , 20 , \"#3d73e6\" , 40 , \"#123a8f\" , 60 , \"#ce2f7e\" , 106 , \"#ff4d4d\" ], \"fill-extrusion-height\" : [ \"interpolate\" , [ \"linear\" ], [ \"zoom\" ], 8 , 0 , 12.5 , 0 , 14 , [ \"*\" , 1 , [ \"to-number\" , [ \"get\" , \"numberOfFl\" ]]], 16 , [ \"*\" , 1.5 , [ \"to-number\" , [ \"get\" , \"numberOfFl\" ]]], 20 , [ \"*\" , 2 , [ \"to-number\" , [ \"get\" , \"numberOfFl\" ]]] ], \"fill-extrusion-opacity\" : 0.9 } } , \"road-label\" ); } //fin funcion","title":"Paso 4: Llamamos funciones en el evento load de map"},{"location":"3.3.visor_catastro/#paso-5-opciones-de-filtro","text":"Vamos a crear una funcionalidad para filtrar edificios seg\u00fan su n\u00famero de pisos Creamos un elementos HTML de tipo input:range para poder filtrar < html > < head > < meta charset = 'utf-8' /> < title > Edificios </ title > < meta name = 'viewport' content = 'initial-scale=1,maximum-scale=1,user-scalable=no' /> < script src = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.js' ></ script > < link href = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.css' rel = 'stylesheet' /> < link href = 'css/estilobase.css' rel = 'stylesheet' /> < script src = 'js/edificios.js' ></ script > < script > //A\u00f1adir vuestor token y/o estilo !! var map ; function init () { mapboxgl . accessToken = 'pk.eyJ1IjoiZ2lzbWFzdGVybTIiLCJhIjoiY2plZHhubTQxMTNoYzMza3Rqa3kxYTdrOCJ9.53B1E6mKD_EQOVb2Y0-SsA' ; map = new mapboxgl . Map ({ container : 'map' , style : 'mapbox://styles/mapbox/dark-v10' , center : [ 2.16859 , 41.3954 ], zoom : 15 , attributionControl : false , pitch : 45 , hash : true }); map . addControl ( new mapboxgl . AttributionControl ({ compact : true })); map . addControl ( new mapboxgl . NavigationControl ()); map . on ( 'load' , function () { addEdificiosCapa (); }); //fin onload } // final init </ script > </ head > < body onload = \"init()\" > < div class = \"panelTopIzquierda\" > < label id = \"altura\" > M\u00e1s de 0 pisos </ label > < input id = \"slider\" type = \"range\" min = \"1\" max = \"50\" step = \"1\" value = \"0\" /> </ div > < div id = \"map\" ></ div > </ body > </ html > A\u00f1adimos a estilobase.css las siguientes clases . panelTopIzquierda { position : absolute ; top : 45 px ; left : 20 px ; width : 200 px ; z-index : 1000 ; background-color : rgba ( 255 , 255 , 255 , 0.9 ); padding : 10 px ; font-size : 20 px ; color : #333333 ; border-radius : 5 px ; } . panelTopIzquierda label { font-size : 0.85 em ; } . panelTopIzquierda input { cursor : pointer ; width : 95 % ; }","title":"Paso 5: Opciones de filtro"},{"location":"3.3.visor_catastro/#paso-6-funcion-de-filtro","text":"A\u00f1adimos a edificios.js la funcion filtrarEdificios() function filtrarEdificios ( valor ) { map . setFilter ( \"edificios\" , [ \">\" , \"numberOfFl\" , parseInt ( valor )]); document . getElementById ( \"altura\" ). innerHTML = \"M\u00e1s de <b>\" + valor + \"</b> pisos\" ; }","title":"Paso 6: Funci\u00f3n de filtro"},{"location":"3.3.visor_catastro/#paso-7-evento-onchange","text":"LLamamos a la funci\u00f3n de desde el evento onChange del objeto input de HTML < html > < head > < meta charset = 'utf-8' /> < title > Edificios </ title > < meta name = 'viewport' content = 'initial-scale=1,maximum-scale=1,user-scalable=no' /> < script src = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.js' ></ script > < link href = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.css' rel = 'stylesheet' /> < link href = 'css/estilobase.css' rel = 'stylesheet' /> < script src = 'js/utils.js' ></ script > < script src = 'js/edificios.js' ></ script > < script > //A\u00f1adir vuestor token y/o estilo !! var map ; function init () { mapboxgl . accessToken = 'pk.eyJ1IjoiZ2lzbWFzdGVybTIiLCJhIjoiY2plZHhubTQxMTNoYzMza3Rqa3kxYTdrOCJ9.53B1E6mKD_EQOVb2Y0-SsA' ; map = new mapboxgl . Map ({ container : 'map' , style : 'mapbox://styles/mapbox/dark-v10' , center : [ 2.16859 , 41.3954 ], zoom : 15 , attributionControl : false , pitch : 45 , hash : true }); map . addControl ( new mapboxgl . AttributionControl ({ compact : true })); map . addControl ( new mapboxgl . NavigationControl ()); map . on ( 'load' , function () { addEdificiosCapa (); addPopupToMap ( \"edificios\" ); }); //fin onload } // final init </ script > </ head > < body onload = \"init()\" > < div class = \"panelTopIzquierda\" > < label id = \"altura\" > M\u00e1s de 0 pisos </ label > < input onChange = \"filtrarEdificios(this.value)\" id = \"slider\" type = \"range\" min = \"1\" max = \"50\" step = \"1\" value = \"0\" /> </ div > < div id = \"map\" ></ div > </ body > </ html > Activar/ desactivar capa via c\u00f3digo map . setLayoutProperty ( \"edificios\" , \"visibility\" , \"visible\" ); map . setLayoutProperty ( \"edificios\" , \"visibility\" , \"none\" ); desactivar capas cuyo id contenga 'label' for ( var i = 0 ; i < map . getStyle (). layers . length ; i ++ ){ if ( map . getStyle (). layers [ i ]. id . indexOf ( \"label\" ) !=- 1 ){ map . setLayoutProperty ( map . getStyle (). layers [ i ]. id , \"visibility\" , \"none\" ); } } A\u00f1adir funcion Popup personalizado dentro de edificios.js function addPopupToMapEdificios ( nombreCapa ) { map . on ( 'click' , nombreCapa , function ( e ) { var text = \"\" ; //console.info(e); for ( key in e . features [ 0 ]. properties ) { if ( key == \"numberOfFl\" ) { text += \"<b>Numero de plantas</b>:\" + e . features [ 0 ]. properties [ key ] + \"<br>\" ; } if ( key == \"localId\" ) { //localId 0004702DF3800C_part1 //http://ovc.catastro.meh.es/OVCServWeb/OVCWcfLibres/OVCFotoFachada.svc/RecuperarFotoFachadaGet?ReferenciaCatastral=0004701DF3800C //https://www1.sedecatastro.gob.es/CYCBienInmueble/OVCListaBienes.aspx?rc1=0004701&rc2=DF3800C var localId = e . features [ 0 ]. properties [ key ]; var localIdSplit = localId . split ( \"_\" ); // 0004702DF3800C part1 var parte1 = localIdSplit [ 0 ]. substring ( 0 , 7 ); var parte2 = localIdSplit [ 0 ]. substring ( 7 , localIdSplit [ 0 ]. length ); text += \"<img width=200 src=http://ovc.catastro.meh.es/OVCServWeb/OVCWcfLibres/OVCFotoFachada.svc/RecuperarFotoFachadaGet?ReferenciaCatastral=\" + localId + \"><br>\" ; text += \"<a target=blank href=https://www1.sedecatastro.gob.es/CYCBienInmueble/OVCListaBienes.aspx?rc1=\" + parte1 + \"&rc2=\" + parte2 + \">Ficha</a><br>\" ; } } new mapboxgl . Popup () . setLngLat ( e . lngLat ) . setHTML ( text ) . addTo ( map ); }); map . on ( 'mouseenter' , nombreCapa , function () { map . getCanvas (). style . cursor = 'pointer' ; }); map . on ( 'mouseleave' , nombreCapa , function () { map . getCanvas (). style . cursor = '' ; }); }","title":"Paso 7: Evento onChange"},{"location":"3.3.visor_catastro/#paso-8-llamamos-funcion-addpopuptomapedificios","text":"LLamamos a la funci\u00f3n de desde el evento load del mapa < html > < head > < meta charset = 'utf-8' /> < title > Edificios </ title > < meta name = 'viewport' content = 'initial-scale=1,maximum-scale=1,user-scalable=no' /> < script src = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.js' ></ script > < link href = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.css' rel = 'stylesheet' /> < link href = 'css/estilobase.css' rel = 'stylesheet' /> < script src = 'js/utils.js' ></ script > < script src = 'js/edificios.js' ></ script > < script > //A\u00f1adir vuestor token y/o estilo !! var map ; function init () { mapboxgl . accessToken = 'pk.eyJ1IjoiZ2lzbWFzdGVybTIiLCJhIjoiY2plZHhubTQxMTNoYzMza3Rqa3kxYTdrOCJ9.53B1E6mKD_EQOVb2Y0-SsA' ; map = new mapboxgl . Map ({ container : 'map' , style : 'mapbox://styles/mapbox/dark-v10' , center : [ 2.16859 , 41.3954 ], zoom : 15 , attributionControl : false , pitch : 45 , hash : true }); map . addControl ( new mapboxgl . AttributionControl ({ compact : true })); map . addControl ( new mapboxgl . NavigationControl ()); map . on ( 'load' , function () { addEdificiosCapa (); addPopupToMapEdificios ( \"edificios\" ); }); //fin onload } // final init </ script > </ head > < body onload = \"init()\" > < div class = \"panelTopIzquierda\" > < label id = \"altura\" > M\u00e1s de 0 pisos </ label > < input onChange = \"filtrarEdificios(this.value)\" id = \"slider\" type = \"range\" min = \"1\" max = \"50\" step = \"1\" value = \"0\" /> </ div > < div id = \"map\" ></ div > </ body > </ html > Visualizamos mapa Geocodificador Mapbox GL https://github.com/mapbox/mapbox-gl-geocoder/blob/master/API.md < html > < head > < meta charset = 'utf-8' /> < title > Edificios </ title > < meta name = 'viewport' content = 'initial-scale=1,maximum-scale=1,user-scalable=no' /> < script src = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.js' ></ script > < link href = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.css' rel = 'stylesheet' /> < script src = \"https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.4.2/mapbox-gl-geocoder.min.js\" ></ script > < link rel = \"stylesheet\" href = \"https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.4.2/mapbox-gl-geocoder.css\" type = \"text/css\" /> < link href = 'css/estilobase.css' rel = 'stylesheet' /> < script src = 'js/edificios.js' ></ script > < script > //A\u00f1adir vuestor token y/o estilo !! var map ; function init () { mapboxgl . accessToken = 'pk.eyJ1IjoiZ2lzbWFzdGVybTIiLCJhIjoiY2plZHhubTQxMTNoYzMza3Rqa3kxYTdrOCJ9.53B1E6mKD_EQOVb2Y0-SsA' ; map = new mapboxgl . Map ({ container : 'map' , style : 'mapbox://styles/mapbox/dark-v10' , center : [ 2.16859 , 41.3954 ], zoom : 15 , attributionControl : false , pitch : 45 , hash : true }); map . addControl ( new mapboxgl . AttributionControl ({ compact : true })); map . addControl ( new mapboxgl . NavigationControl ()); map . addControl ( new MapboxGeocoder ({ accessToken : mapboxgl . accessToken , mapboxgl : mapboxgl })); map . on ( 'load' , function () { addEdificiosCapa (); addPopupToMapEdificios ( \"edificios\" ); }); //fin onload } // final init </ script > </ head > < body onload = \"init()\" > < div class = \"panelTopIzquierda\" > < label id = \"altura\" > M\u00e1s de 0 pisos </ label > < input onChange = \"filtrarEdificios(this.value)\" id = \"slider\" type = \"range\" min = \"1\" max = \"50\" step = \"1\" value = \"0\" /> </ div > < div id = \"map\" ></ div > </ body > </ html > Miramos opciones de Geocoder. \u00bfLimit\u00e1mos b\u00fasquedas del geocoder por caja de coordenadas de Barcelona? [2.1066 , 41.3000 , 2.2536 , 41.4468] \u00bfPonemos t\u00edtulo? \u00bfSubimos el ejemplo al GitHub? git pull git add . git commit -m \"visor catastro\" git push","title":"Paso 8: Llamamos funci\u00f3n addPopupToMapEdificios"},{"location":"3.3.visor_catastro/#saber-mas","text":"Podemos programas el evento click sobre el mapa y no sobre una capa conresta, obtener los vectores de todas las capas y filtrar por la capa que nos interesa. La funci\u00f3n addPopupToMapEdificios quedaria as\u00ed y funcionaria en 2d c\u00f3mo en 3d function addPopupToMapEdificios ( nombreCapa ) { map . on ( 'click' , function ( e ) { var text = \"\" ; var bbox = [[ e . point . x - 10 , e . point . y - 10 ], [ e . point . x + 10 , e . point . y + 10 ]]; var features = map . queryRenderedFeatures ( bbox , { layers : [ nombreCapa ] }); if ( features . length > 0 ) { for ( key in features [ 0 ]. properties ) { if ( key == \"numberOfFl\" ) { text += \"<b>Numero de plantas</b>:\" + features [ 0 ]. properties [ key ] + \"<br>\" ; } if ( key == \"localId\" ) { //localId 0004702DF3800C_part1 //http://ovc.catastro.meh.es/OVCServWeb/OVCWcfLibres/OVCFotoFachada.svc/RecuperarFotoFachadaGet?ReferenciaCatastral=0004701DF3800C //https://www1.sedecatastro.gob.es/CYCBienInmueble/OVCListaBienes.aspx?rc1=0004701&rc2=DF3800C var localId = features [ 0 ]. properties [ key ]; var localIdSplit = localId . split ( \"_\" ); // 0004702DF3800C part1 var parte1 = localIdSplit [ 0 ]. substring ( 0 , 7 ); var parte2 = localIdSplit [ 0 ]. substring ( 7 , localIdSplit [ 0 ]. length ); text += \"<img width=200 src=http://ovc.catastro.meh.es/OVCServWeb/OVCWcfLibres/OVCFotoFachada.svc/RecuperarFotoFachadaGet?ReferenciaCatastral=\" + localId + \"><br>\" ; text += \"<a target=blank href=https://www1.sedecatastro.gob.es/CYCBienInmueble/OVCListaBienes.aspx?rc1=\" + parte1 + \"&rc2=\" + parte2 + \">Ficha</a><br>\" ; } } new mapboxgl . Popup () . setLngLat ( e . lngLat ) . setHTML ( text ) . addTo ( map ); } }); map . on ( 'mouseenter' , nombreCapa , function () { map . getCanvas (). style . cursor = 'pointer' ; }); map . on ( 'mouseleave' , nombreCapa , function () { map . getCanvas (). style . cursor = '' ; }); }","title":"Saber m\u00e1s.."},{"location":"4.1.storytelling/","text":"Introducci\u00f3n Los Storytelling o StoryMaps s\u00f3n una combinaci\u00f3n de mapas con textos narrativos, im\u00e1genes y contenido multimedia que nos permite crear un hilo narrativo para contar una historia Es un recurso muy utilizado por ejemplo en publicaciones digitales. Si tenemos una historia que contar con una mapa, nos ser\u00e0 una herramienta muy \u00fatil. Ejemplo de StoryTelling Save the Nile publicado por AlJazeera Post 8 compelling stories told with the Storytelling solution Informaci\u00f3n y templates https://www.mapbox.com/solutions/interactive-storytelling https://github.com/mapbox/storytelling \u00bfC\u00f3mo empezar? Mapbox ofrece un template para empezar a crear hist\u00f3rias sin apenas programaci\u00f3n, b\u00e1sicamenten s\u00f3lo habr\u00e1 que editar un archivo de configuraci\u00f3n. Vamos descarganos datos/storytelling.zip y descoprimiremos su contenido dentro del directorio de trabajo geoweb Observaremos que tenemos tres nuevos archivos Archivos Description storytelling.html Archivo principal basado en template de mapbox config.js Archivo de configuracion helper.html Mapa de ayuda para capturar coordenadas i vistas Para saber m\u00e1s: https://github.com/mapbox/storytelling#getting-started Para ver toda la sesi\u00f3n 4 ver Videos 5 y 6 Nuestro StoryTelling Vamos a crear un storyTelling sobre los principales volcanes en activos del mundo Paso 1: Visualizamos storytelling.html Si hacemos scroll veremos que s\u00f3lo tenemos un volcan Necesitamos entender y editar el archivo config.js para poder a\u00f1adir m\u00e1s contenido Paso 2: Abrimos config.js Cambiamos el access token y ponemos el nuestro var config = { style : 'mapbox://styles/mapbox/satellite-v9' , accessToken : 'pk.eyJ1IjoiZ2lzbWFzdGVybTIiLCJhIjoiY2plZHhubTQxMTNoYzMza3Rqa3kxYTdrOCJ9.53B1E6mKD_EQOVb2Y0-SsA' , showMarkers : false , markerColor : '#3FB1CE' , theme : 'dark' , use3dTerrain : true , title : 'Volcanes' , subtitle : 'Los principales volcanes activos del mundo' , byline : 'M2B ' , footer : 'Source: Wikipedia' , chapters : [ { id : 'volcan1' , alignment : 'left' , hidden : false , title : 'Eyjafjallaj\u00f6kull, Islandia' , image : 'https://upload.wikimedia.org/wikipedia/commons/e/e4/Eyjafjallaj%C3%B6kull_first_crater_20100329.jpg' , description : 'Tambi\u00e9n conocido como Eyjafj\u00f6ll,2\u200b o Eyjafjalla,3\u200b es un volc\u00e1n situado al norte de Sk\u00f3gar, en la regi\u00f3n de Su\u00f0urland, al sur de Islandia.4\u200b Tiene entre 1651 m y 1666 m de altitud,\u200b y ha estado moderadamente activo en los \u00faltimos 8000 a\u00f1os.' , location : { center : [ - 19.62 , 63.63 ], zoom : 13.5 , pitch : 60 , bearing : 0 }, mapAnimation : 'flyTo' , rotateAnimation : true , callback : '' , onChapterEnter : [ // { // layer: 'layer-name', // opacity: 1, // duration: 5000 // } ], onChapterExit : [ // { // layer: 'layer-name', // opacity: 0 // } ] } ] }; Las principales opciones del documento config son: Items en negrita son obligatorios . style : Url estilo de MapBox , puede ser un nuestro propio accessToken : Mapbox access token. showMarkers : Mostrar un marker. markerColor : Color hexadecimal del marker. theme : Tema b\u00e1sico CSS (light o dark). use3dTerrain : Activar 3D terrain. (Optional) title : T\u00edtulo de la hist\u00f3ria. (Optional) subtitle : Subt\u00edtulo (Optional) byline : Cr\u00e9ditos del autor. (Optional) footer : Citati\u00f3n de fuentes. chapters : Es una matriz que contiene cada una de las visualizaciones (\u00edtems) de la hist\u00f3ria id : id \u00fanico que se assigna a un HTML id de un div . alignment : Define d\u00f3nde va aparecer el texto de la hist\u00f3ria. Las opciones son; center , left , right , y full . title : T\u00edtulo de la secci\u00f3n. image : Imagen descriptiva. description : Descripci\u00f3n de la secci\u00f3n. Puede contener texto en formato HTML. location : Localizaci\u00f3n del mapa. center : Centro del mapa en coordenadads longitude, latitude zoom : Nivel de zoom. pitch : \u00c1ngulo de inclinaci\u00f3n de la c\u00e1mara. bearing : Rotaci\u00f3n del mapa respeto al norte. mapAnimation : Define el tipo de animaci\u00f3n para la transici\u00f3n entre lugares. Soportas 'flyTo', 'easeTo', y 'jumpTo' animations. Per defecto es flyTo . rotateAnimation : Si es true . El mapa rotar\u00e1 90 grados durante 24 segundos. callback : pPuede ejcutar una funci\u00f3n de Javascript para por ejemplo mostrar un gr\u00e0fico. onChapterEnter : Podemos cambiar partes del estilo de las capas al inciar la secci\u00f3n. layer : Nombre de la capa. opacity : Opacidad. 0 transparente, 1 opaca. duration : Duraci\u00f3n de la transisci\u00f3n en milisegundos. Por defecto 300.. onChapterExit : lo mismo onChapterEnter pero al salir de la secci\u00f3n. Paso 3: A\u00f1adimos un nuevo volcan Para a\u00f1adir nuevo contenido tenemos que a\u00f1adir item dentro de chapters , cada item lo debemos separar por coma var config = { style : 'mapbox://styles/mapbox/satellite-v9' , accessToken : 'pk.eyJ1IjoiZ2lzbWFzdGVybTIiLCJhIjoiY2plZHhubTQxMTNoYzMza3Rqa3kxYTdrOCJ9.53B1E6mKD_EQOVb2Y0-SsA' , showMarkers : false , markerColor : '#3FB1CE' , theme : 'dark' , use3dTerrain : true , title : 'Volcanes' , subtitle : 'Los principales volcanes activos del mundo' , byline : 'M2B ' , footer : 'Source: Wikipedia' , chapters : [ { id : 'volcan1' , alignment : 'left' , hidden : false , title : 'Eyjafjallaj\u00f6kull, Islandia' , image : 'https://upload.wikimedia.org/wikipedia/commons/e/e4/Eyjafjallaj%C3%B6kull_first_crater_20100329.jpg' , description : 'Tambi\u00e9n conocido como Eyjafj\u00f6ll,2\u200b o Eyjafjalla,3\u200b es un volc\u00e1n situado al norte de Sk\u00f3gar, en la regi\u00f3n de Su\u00f0urland, al sur de Islandia.4\u200b Tiene entre 1651 m y 1666 m de altitud,\u200b y ha estado moderadamente activo en los \u00faltimos 8000 a\u00f1os.' , location : { center : [ - 19.62 , 63.63 ], zoom : 13.5 , pitch : 60 , bearing : 0 }, mapAnimation : 'flyTo' , rotateAnimation : true , callback : '' , onChapterEnter : [ // { // layer: 'layer-name', // opacity: 1, // duration: 5000 // } ], onChapterExit : [ // { // layer: 'layer-name', // opacity: 0 // } ] },{ id : 'volcan2' , alignment : 'right' , hidden : false , title : 'Monte Vesubio, Italia' , image : 'https://upload.wikimedia.org/wikipedia/commons/2/24/Cr%C3%A1ter_del_Vesubio.jpg' , description : 'Es un volc\u00e1n activo del tipo vesubiano situado frente a la bah\u00eda de N\u00e1poles y a unos nueve kil\u00f3metros de distancia de la ciudad de N\u00e1poles. Se encuentra en la ciudad metropolitana de N\u00e1poles, perteneciente a la regi\u00f3n italiana de la Campania. Tiene una altura m\u00e1xima de 1281 m s. n. m. y se alza al sur de la cadena principal de los Apeninos.' , location : { center : [ 14.42555555 , 40.82138888 ], zoom : 14.5 , pitch : 60 , bearing : - 43.2 }, mapAnimation : 'flyTo' , rotateAnimation : true , callback : '' , onChapterEnter : [], onChapterExit : [] } ] }; Paso 4: Subimos ejemplo a Github Editamos tambi\u00e9n index.html git pull git add . git commit -m \"storytelling\" git push origin main Pr\u00e1ctica Intentamos a\u00f1adir dos o m\u00e1s volcanes Buscamos en la wikipedia informaci\u00f3n e imagenes Intentamos mejorar el texto de la descripcion de los volcanes Podemos a\u00f1adir parte c\u00f3digo HTML enla descripci\u00f3n c\u00f3mo por ejemplo un hiperv\u00ednculo o un embed de un v\u00eddeo Podemos intentar cambiar estilos CSS Volvemos a subir los cambios a GitHub git pull git add . git commit -m \"a\u00f1adidos m\u00e1s volcanes\" git push origin main Un StoryTelling podr\u00eda ser un buen ejemplo de pr\u00e1ctica final!!","title":"4.1.StoryTelling"},{"location":"4.1.storytelling/#introduccion","text":"Los Storytelling o StoryMaps s\u00f3n una combinaci\u00f3n de mapas con textos narrativos, im\u00e1genes y contenido multimedia que nos permite crear un hilo narrativo para contar una historia Es un recurso muy utilizado por ejemplo en publicaciones digitales. Si tenemos una historia que contar con una mapa, nos ser\u00e0 una herramienta muy \u00fatil. Ejemplo de StoryTelling Save the Nile publicado por AlJazeera Post 8 compelling stories told with the Storytelling solution","title":"Introducci\u00f3n"},{"location":"4.1.storytelling/#informacion-y-templates","text":"https://www.mapbox.com/solutions/interactive-storytelling https://github.com/mapbox/storytelling","title":"Informaci\u00f3n y templates"},{"location":"4.1.storytelling/#como-empezar","text":"Mapbox ofrece un template para empezar a crear hist\u00f3rias sin apenas programaci\u00f3n, b\u00e1sicamenten s\u00f3lo habr\u00e1 que editar un archivo de configuraci\u00f3n. Vamos descarganos datos/storytelling.zip y descoprimiremos su contenido dentro del directorio de trabajo geoweb Observaremos que tenemos tres nuevos archivos Archivos Description storytelling.html Archivo principal basado en template de mapbox config.js Archivo de configuracion helper.html Mapa de ayuda para capturar coordenadas i vistas Para saber m\u00e1s: https://github.com/mapbox/storytelling#getting-started Para ver toda la sesi\u00f3n 4 ver Videos 5 y 6","title":"\u00bfC\u00f3mo empezar?"},{"location":"4.1.storytelling/#nuestro-storytelling","text":"Vamos a crear un storyTelling sobre los principales volcanes en activos del mundo","title":"Nuestro StoryTelling"},{"location":"4.1.storytelling/#paso-1-visualizamos-storytellinghtml","text":"Si hacemos scroll veremos que s\u00f3lo tenemos un volcan Necesitamos entender y editar el archivo config.js para poder a\u00f1adir m\u00e1s contenido","title":"Paso 1: Visualizamos storytelling.html"},{"location":"4.1.storytelling/#paso-2-abrimos-configjs","text":"Cambiamos el access token y ponemos el nuestro var config = { style : 'mapbox://styles/mapbox/satellite-v9' , accessToken : 'pk.eyJ1IjoiZ2lzbWFzdGVybTIiLCJhIjoiY2plZHhubTQxMTNoYzMza3Rqa3kxYTdrOCJ9.53B1E6mKD_EQOVb2Y0-SsA' , showMarkers : false , markerColor : '#3FB1CE' , theme : 'dark' , use3dTerrain : true , title : 'Volcanes' , subtitle : 'Los principales volcanes activos del mundo' , byline : 'M2B ' , footer : 'Source: Wikipedia' , chapters : [ { id : 'volcan1' , alignment : 'left' , hidden : false , title : 'Eyjafjallaj\u00f6kull, Islandia' , image : 'https://upload.wikimedia.org/wikipedia/commons/e/e4/Eyjafjallaj%C3%B6kull_first_crater_20100329.jpg' , description : 'Tambi\u00e9n conocido como Eyjafj\u00f6ll,2\u200b o Eyjafjalla,3\u200b es un volc\u00e1n situado al norte de Sk\u00f3gar, en la regi\u00f3n de Su\u00f0urland, al sur de Islandia.4\u200b Tiene entre 1651 m y 1666 m de altitud,\u200b y ha estado moderadamente activo en los \u00faltimos 8000 a\u00f1os.' , location : { center : [ - 19.62 , 63.63 ], zoom : 13.5 , pitch : 60 , bearing : 0 }, mapAnimation : 'flyTo' , rotateAnimation : true , callback : '' , onChapterEnter : [ // { // layer: 'layer-name', // opacity: 1, // duration: 5000 // } ], onChapterExit : [ // { // layer: 'layer-name', // opacity: 0 // } ] } ] };","title":"Paso 2: Abrimos config.js"},{"location":"4.1.storytelling/#las-principales-opciones-del-documento-config-son","text":"Items en negrita son obligatorios . style : Url estilo de MapBox , puede ser un nuestro propio accessToken : Mapbox access token. showMarkers : Mostrar un marker. markerColor : Color hexadecimal del marker. theme : Tema b\u00e1sico CSS (light o dark). use3dTerrain : Activar 3D terrain. (Optional) title : T\u00edtulo de la hist\u00f3ria. (Optional) subtitle : Subt\u00edtulo (Optional) byline : Cr\u00e9ditos del autor. (Optional) footer : Citati\u00f3n de fuentes. chapters : Es una matriz que contiene cada una de las visualizaciones (\u00edtems) de la hist\u00f3ria id : id \u00fanico que se assigna a un HTML id de un div . alignment : Define d\u00f3nde va aparecer el texto de la hist\u00f3ria. Las opciones son; center , left , right , y full . title : T\u00edtulo de la secci\u00f3n. image : Imagen descriptiva. description : Descripci\u00f3n de la secci\u00f3n. Puede contener texto en formato HTML. location : Localizaci\u00f3n del mapa. center : Centro del mapa en coordenadads longitude, latitude zoom : Nivel de zoom. pitch : \u00c1ngulo de inclinaci\u00f3n de la c\u00e1mara. bearing : Rotaci\u00f3n del mapa respeto al norte. mapAnimation : Define el tipo de animaci\u00f3n para la transici\u00f3n entre lugares. Soportas 'flyTo', 'easeTo', y 'jumpTo' animations. Per defecto es flyTo . rotateAnimation : Si es true . El mapa rotar\u00e1 90 grados durante 24 segundos. callback : pPuede ejcutar una funci\u00f3n de Javascript para por ejemplo mostrar un gr\u00e0fico. onChapterEnter : Podemos cambiar partes del estilo de las capas al inciar la secci\u00f3n. layer : Nombre de la capa. opacity : Opacidad. 0 transparente, 1 opaca. duration : Duraci\u00f3n de la transisci\u00f3n en milisegundos. Por defecto 300.. onChapterExit : lo mismo onChapterEnter pero al salir de la secci\u00f3n.","title":"Las principales opciones del documento config son:"},{"location":"4.1.storytelling/#paso-3-anadimos-un-nuevo-volcan","text":"Para a\u00f1adir nuevo contenido tenemos que a\u00f1adir item dentro de chapters , cada item lo debemos separar por coma var config = { style : 'mapbox://styles/mapbox/satellite-v9' , accessToken : 'pk.eyJ1IjoiZ2lzbWFzdGVybTIiLCJhIjoiY2plZHhubTQxMTNoYzMza3Rqa3kxYTdrOCJ9.53B1E6mKD_EQOVb2Y0-SsA' , showMarkers : false , markerColor : '#3FB1CE' , theme : 'dark' , use3dTerrain : true , title : 'Volcanes' , subtitle : 'Los principales volcanes activos del mundo' , byline : 'M2B ' , footer : 'Source: Wikipedia' , chapters : [ { id : 'volcan1' , alignment : 'left' , hidden : false , title : 'Eyjafjallaj\u00f6kull, Islandia' , image : 'https://upload.wikimedia.org/wikipedia/commons/e/e4/Eyjafjallaj%C3%B6kull_first_crater_20100329.jpg' , description : 'Tambi\u00e9n conocido como Eyjafj\u00f6ll,2\u200b o Eyjafjalla,3\u200b es un volc\u00e1n situado al norte de Sk\u00f3gar, en la regi\u00f3n de Su\u00f0urland, al sur de Islandia.4\u200b Tiene entre 1651 m y 1666 m de altitud,\u200b y ha estado moderadamente activo en los \u00faltimos 8000 a\u00f1os.' , location : { center : [ - 19.62 , 63.63 ], zoom : 13.5 , pitch : 60 , bearing : 0 }, mapAnimation : 'flyTo' , rotateAnimation : true , callback : '' , onChapterEnter : [ // { // layer: 'layer-name', // opacity: 1, // duration: 5000 // } ], onChapterExit : [ // { // layer: 'layer-name', // opacity: 0 // } ] },{ id : 'volcan2' , alignment : 'right' , hidden : false , title : 'Monte Vesubio, Italia' , image : 'https://upload.wikimedia.org/wikipedia/commons/2/24/Cr%C3%A1ter_del_Vesubio.jpg' , description : 'Es un volc\u00e1n activo del tipo vesubiano situado frente a la bah\u00eda de N\u00e1poles y a unos nueve kil\u00f3metros de distancia de la ciudad de N\u00e1poles. Se encuentra en la ciudad metropolitana de N\u00e1poles, perteneciente a la regi\u00f3n italiana de la Campania. Tiene una altura m\u00e1xima de 1281 m s. n. m. y se alza al sur de la cadena principal de los Apeninos.' , location : { center : [ 14.42555555 , 40.82138888 ], zoom : 14.5 , pitch : 60 , bearing : - 43.2 }, mapAnimation : 'flyTo' , rotateAnimation : true , callback : '' , onChapterEnter : [], onChapterExit : [] } ] };","title":"Paso 3: A\u00f1adimos un nuevo volcan"},{"location":"4.1.storytelling/#paso-4-subimos-ejemplo-a-github","text":"Editamos tambi\u00e9n index.html git pull git add . git commit -m \"storytelling\" git push origin main","title":"Paso 4: Subimos ejemplo a Github"},{"location":"4.1.storytelling/#practica","text":"Intentamos a\u00f1adir dos o m\u00e1s volcanes Buscamos en la wikipedia informaci\u00f3n e imagenes Intentamos mejorar el texto de la descripcion de los volcanes Podemos a\u00f1adir parte c\u00f3digo HTML enla descripci\u00f3n c\u00f3mo por ejemplo un hiperv\u00ednculo o un embed de un v\u00eddeo Podemos intentar cambiar estilos CSS Volvemos a subir los cambios a GitHub git pull git add . git commit -m \"a\u00f1adidos m\u00e1s volcanes\" git push origin main Un StoryTelling podr\u00eda ser un buen ejemplo de pr\u00e1ctica final!!","title":"Pr\u00e1ctica"},{"location":"5.1.introduccion_mapas_3d/","text":"Introducci\u00f3n Gracias a la pot\u00e9ncia de WebGL y los nuevos navegadores , cada vez hay m\u00e1s librerias geoweb con capacidades 3D La visualizaci\u00f3n 3D no s\u00f3lo se limita a la extrusi\u00f3n del terreno s\u00edno que va m\u00e1s all\u00e1, como por ejemplo visualizaci\u00f3n de nubes de puntos lidar , visi\u00f3n hiperrealista de ciudades Algunas librer\u00edas geo con capacidades 3D MapBox GL JS Cesium JS Deck.GL Procedural Threejs Potree ArcGis API JavaScript Algunos formatos 3D geo 3D-Tiles : Especificaci\u00f3n est\u00e1ndar OGC creada por Cesium para la creaci\u00f3n de pir\u00e0mides de datos vectores con informaci\u00f3n 3D . 3D Scene Layers (I3S) :Especificaci\u00f3n est\u00e1ndar OGC creada por ESRI para la creaci\u00f3n de pir\u00e0mides de datos vectores con informaci\u00f3n 3D Terrain-RGB : Datos de elevaci\u00f3n codificados en teselas PNG rasterizadas como valores de color que pueden ser decodificados a alturas en metros. Formula para pasar el color a metros : height = -10000 + ((R * 256 * 256 + G * 256 + B) * 0.1) Capacidades 3D de MapBox GLS Mapbox puede extrudir pol\u00edgonos Mostrar el terreno en 3D Mostar objectos y textura 3D https://openicgc.github.io/exemples/maplibre/icgc-model3d-maplibre-code.html C\u00f3mo ver un mapa 3D en Mapbox GL M\u00e9todo setTerrain https://docs.mapbox.com/mapbox-gl-js/api/map/#map#setterrain Paso 1 : Creamos con VSCode mapa3d.html Vamos a VSCode y creamos el archivo mapa3d.html dentro de /geoweb Utilizamos opcion pitch para inclinar el mapa al inicio < html > < head > < meta charset = 'utf-8' /> < title > Mapa 3D </ title > < meta name = 'viewport' content = 'initial-scale=1,maximum-scale=1,user-scalable=no' /> < script src = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.js' ></ script > < link href = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.css' rel = 'stylesheet' /> < link href = 'css/estilobase.css' rel = 'stylesheet' /> < script src = 'js/3d.js' ></ script > < script > //A\u00f1adir vuestor token!! var map ; function init () { mapboxgl . accessToken = 'pk.eyJ1IjoiZ2lzbWFzdGVybTIiLCJhIjoiY2plZHhubTQxMTNoYzMza3Rqa3kxYTdrOCJ9.53B1E6mKD_EQOVb2Y0-SsA' ; map = new mapboxgl . Map ({ container : 'map' , style : 'mapbox://styles/mapbox/satellite-streets-v10' , center : [ 2.16859 , 41.3954 ], zoom : 12 , attributionControl : false , pitch : 45 , hash : true }); map . addControl ( new mapboxgl . AttributionControl ({ compact : true })); map . addControl ( new mapboxgl . NavigationControl ()); } // final init </ script > </ head > < body onload = \"init()\" > < div id = \"map\" ></ div > </ body > </ html > Paso 3: Creamos archivo 3d.js Dentro de nuestro directorio /geoweb/js/ creamos el archivo 3d.js , d\u00f3nde crearemos funciones especificas de nuestro proyecto Creamos la funci\u00f3n add3D() function add3D () { map . addSource ( 'mapbox-dem' , { 'type' : 'raster-dem' , 'url' : 'mapbox://mapbox.mapbox-terrain-dem-v1' , 'tileSize' : 512 , 'maxzoom' : 14 }); map . addLayer ({ 'id' : 'sky' , 'type' : 'sky' , 'paint' : { 'sky-type' : 'atmosphere' , 'sky-atmosphere-sun' : [ 0.0 , 0.0 ], 'sky-atmosphere-sun-intensity' : 15 } }); map . setTerrain ({ 'source' : 'mapbox-dem' , 'exaggeration' : 1.5 }); } //fin funcion Paso 4: Llamamos funciones en el evento load de map Llamamos a la funci\u00f3n add3D() < html > < head > < meta charset = 'utf-8' /> < title > Mapa 3D </ title > < meta name = 'viewport' content = 'initial-scale=1,maximum-scale=1,user-scalable=no' /> < script src = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.js' ></ script > < link href = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.css' rel = 'stylesheet' /> < link href = 'css/estilobase.css' rel = 'stylesheet' /> < script src = 'js/3d.js' ></ script > < script > //A\u00f1adir vuestor token!! var map ; function init () { mapboxgl . accessToken = 'pk.eyJ1IjoiZ2lzbWFzdGVybTIiLCJhIjoiY2plZHhubTQxMTNoYzMza3Rqa3kxYTdrOCJ9.53B1E6mKD_EQOVb2Y0-SsA' ; map = new mapboxgl . Map ({ container : 'map' , style : 'mapbox://styles/mapbox/satellite-streets-v10' , center : [ 2.16859 , 41.3954 ], zoom : 12 , attributionControl : false , pitch : 45 , hash : true }); map . addControl ( new mapboxgl . AttributionControl ({ compact : true })); map . addControl ( new mapboxgl . NavigationControl ()); map . on ( 'load' , function () { add3D (); }); //fin onload } // final init </ script > </ head > < body onload = \"init()\" > < div id = \"map\" ></ div > </ body > </ html > visualizamos el mapa Editamos index.html y subimos el ejemplo al GitHub git pull git add . git commit -m \"visor 3d\" git push ANEXO \u00bfPodr\u00edamos pasar a 3D el visor de edificios de Catastro?\u00bfC\u00f3mo?","title":"5.1.Introducci\u00f3n Mapas 3D"},{"location":"5.1.introduccion_mapas_3d/#introduccion","text":"Gracias a la pot\u00e9ncia de WebGL y los nuevos navegadores , cada vez hay m\u00e1s librerias geoweb con capacidades 3D La visualizaci\u00f3n 3D no s\u00f3lo se limita a la extrusi\u00f3n del terreno s\u00edno que va m\u00e1s all\u00e1, como por ejemplo visualizaci\u00f3n de nubes de puntos lidar , visi\u00f3n hiperrealista de ciudades","title":"Introducci\u00f3n"},{"location":"5.1.introduccion_mapas_3d/#algunas-librerias-geo-con-capacidades-3d","text":"MapBox GL JS Cesium JS Deck.GL Procedural Threejs Potree ArcGis API JavaScript","title":"Algunas librer\u00edas geo con capacidades 3D"},{"location":"5.1.introduccion_mapas_3d/#algunos-formatos-3d-geo","text":"3D-Tiles : Especificaci\u00f3n est\u00e1ndar OGC creada por Cesium para la creaci\u00f3n de pir\u00e0mides de datos vectores con informaci\u00f3n 3D . 3D Scene Layers (I3S) :Especificaci\u00f3n est\u00e1ndar OGC creada por ESRI para la creaci\u00f3n de pir\u00e0mides de datos vectores con informaci\u00f3n 3D Terrain-RGB : Datos de elevaci\u00f3n codificados en teselas PNG rasterizadas como valores de color que pueden ser decodificados a alturas en metros. Formula para pasar el color a metros : height = -10000 + ((R * 256 * 256 + G * 256 + B) * 0.1)","title":"Algunos formatos 3D geo"},{"location":"5.1.introduccion_mapas_3d/#capacidades-3d-de-mapbox-gls","text":"Mapbox puede extrudir pol\u00edgonos Mostrar el terreno en 3D Mostar objectos y textura 3D https://openicgc.github.io/exemples/maplibre/icgc-model3d-maplibre-code.html","title":"Capacidades 3D de MapBox GLS"},{"location":"5.1.introduccion_mapas_3d/#como-ver-un-mapa-3d-en-mapbox-gl","text":"M\u00e9todo setTerrain https://docs.mapbox.com/mapbox-gl-js/api/map/#map#setterrain","title":"C\u00f3mo ver un mapa 3D en Mapbox GL"},{"location":"5.1.introduccion_mapas_3d/#paso-1-creamos-con-vscode-mapa3dhtml","text":"Vamos a VSCode y creamos el archivo mapa3d.html dentro de /geoweb Utilizamos opcion pitch para inclinar el mapa al inicio < html > < head > < meta charset = 'utf-8' /> < title > Mapa 3D </ title > < meta name = 'viewport' content = 'initial-scale=1,maximum-scale=1,user-scalable=no' /> < script src = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.js' ></ script > < link href = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.css' rel = 'stylesheet' /> < link href = 'css/estilobase.css' rel = 'stylesheet' /> < script src = 'js/3d.js' ></ script > < script > //A\u00f1adir vuestor token!! var map ; function init () { mapboxgl . accessToken = 'pk.eyJ1IjoiZ2lzbWFzdGVybTIiLCJhIjoiY2plZHhubTQxMTNoYzMza3Rqa3kxYTdrOCJ9.53B1E6mKD_EQOVb2Y0-SsA' ; map = new mapboxgl . Map ({ container : 'map' , style : 'mapbox://styles/mapbox/satellite-streets-v10' , center : [ 2.16859 , 41.3954 ], zoom : 12 , attributionControl : false , pitch : 45 , hash : true }); map . addControl ( new mapboxgl . AttributionControl ({ compact : true })); map . addControl ( new mapboxgl . NavigationControl ()); } // final init </ script > </ head > < body onload = \"init()\" > < div id = \"map\" ></ div > </ body > </ html >","title":"Paso 1 : Creamos con VSCode mapa3d.html"},{"location":"5.1.introduccion_mapas_3d/#paso-3-creamos-archivo-3djs","text":"Dentro de nuestro directorio /geoweb/js/ creamos el archivo 3d.js , d\u00f3nde crearemos funciones especificas de nuestro proyecto Creamos la funci\u00f3n add3D() function add3D () { map . addSource ( 'mapbox-dem' , { 'type' : 'raster-dem' , 'url' : 'mapbox://mapbox.mapbox-terrain-dem-v1' , 'tileSize' : 512 , 'maxzoom' : 14 }); map . addLayer ({ 'id' : 'sky' , 'type' : 'sky' , 'paint' : { 'sky-type' : 'atmosphere' , 'sky-atmosphere-sun' : [ 0.0 , 0.0 ], 'sky-atmosphere-sun-intensity' : 15 } }); map . setTerrain ({ 'source' : 'mapbox-dem' , 'exaggeration' : 1.5 }); } //fin funcion","title":"Paso 3: Creamos archivo 3d.js"},{"location":"5.1.introduccion_mapas_3d/#paso-4-llamamos-funciones-en-el-evento-load-de-map","text":"Llamamos a la funci\u00f3n add3D() < html > < head > < meta charset = 'utf-8' /> < title > Mapa 3D </ title > < meta name = 'viewport' content = 'initial-scale=1,maximum-scale=1,user-scalable=no' /> < script src = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.js' ></ script > < link href = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.css' rel = 'stylesheet' /> < link href = 'css/estilobase.css' rel = 'stylesheet' /> < script src = 'js/3d.js' ></ script > < script > //A\u00f1adir vuestor token!! var map ; function init () { mapboxgl . accessToken = 'pk.eyJ1IjoiZ2lzbWFzdGVybTIiLCJhIjoiY2plZHhubTQxMTNoYzMza3Rqa3kxYTdrOCJ9.53B1E6mKD_EQOVb2Y0-SsA' ; map = new mapboxgl . Map ({ container : 'map' , style : 'mapbox://styles/mapbox/satellite-streets-v10' , center : [ 2.16859 , 41.3954 ], zoom : 12 , attributionControl : false , pitch : 45 , hash : true }); map . addControl ( new mapboxgl . AttributionControl ({ compact : true })); map . addControl ( new mapboxgl . NavigationControl ()); map . on ( 'load' , function () { add3D (); }); //fin onload } // final init </ script > </ head > < body onload = \"init()\" > < div id = \"map\" ></ div > </ body > </ html > visualizamos el mapa","title":"Paso 4: Llamamos funciones en el evento load de map"},{"location":"5.1.introduccion_mapas_3d/#_1","text":"Editamos index.html y subimos el ejemplo al GitHub git pull git add . git commit -m \"visor 3d\" git push","title":""},{"location":"5.1.introduccion_mapas_3d/#anexo","text":"\u00bfPodr\u00edamos pasar a 3D el visor de edificios de Catastro?\u00bfC\u00f3mo?","title":"ANEXO"},{"location":"5.2.formato_geojson/","text":"Introducci\u00f3n Podemos a\u00f1adir datos propios a nuestros mapas En mapbox tendremos que especificar un: map.addSource() y el tipo de fuente map.addLayer() d\u00f3nde se va a denifir como renderizar los datos Un tipo de source aceptado por MapBox es GeoJSON GeoJSON Es el constructor principal del mapa https://docs.mapbox.com/mapbox-gl-js/style-spec/#sources-geojson Formato GeoJSON GeoJSON es un formato para codificar una variedad de estructuras de datos geogr\u00e1ficos. Se basa en la Notaci\u00f3n de Objetos de JavaScript (JSON), un formato de intercambio de datos de c\u00f3digo abierto. GeoJSON admite los siguientes tipos de geometr\u00eda: Punto, LineString, Pol\u00edgono, MultiPoint, MultiLineString, MultiPol\u00edgono y GeometryCollection. Tambi\u00e9n puede representar los siguientes tipos no geom\u00e9tricos: Feature y FeatureCollection. Aqu\u00ed hay un ejemplo de un objeto GeoJSON simple que representa un punto con una longitud y latitud: { \"type\" : \"Point\" , \"coordinates\" : [ 30.5 , 50.5 ] } Y aqu\u00ed hay un ejemplo de una FeatureCollection de GeoJSON que contiene una sola Feature con una geometr\u00eda de Punto: { \"type\" : \"FeatureCollection\" , \"features\" : [ { \"type\" : \"Feature\" , \"geometry\" : { \"type\" : \"Point\" , \"coordinates\" : [ 30.5 , 50.5 ] }, \"properties\" : { \"name\" : \"Mi Punto\" } } ] } GeoJSON se utiliza a menudo para representar datos geogr\u00e1ficos en mapas y APIs basados en web, y es compatible con muchas bibliotecas de mapeo de c\u00f3digo abierto y comerciales. Recursos La especificaci\u00f3n oficial del formato GeoJSON es mantenida por el GeoJSON Working Group del Internet Engineering Task Force (IETF). Puedes encontrar la especificaci\u00f3n en la siguiente URL: https://tools.ietf.org/html/rfc7946 Adem\u00e1s de la especificaci\u00f3n, hay muchos recursos disponibles en l\u00ednea que proporcionan m\u00e1s informaci\u00f3n y ejemplos de c\u00f3mo usar GeoJSON. Aqu\u00ed hay algunos ejemplos: El repositorio de GitHub de GeoJSON ( https://github.com/geojson/geojson-spec ) contiene los \u00faltimos borradores de la especificaci\u00f3n, as\u00ed como herramientas y recursos para trabajar con GeoJSON. La Wiki de GeoJSON ( https://wiki.geojson.org/ ) proporciona una colecci\u00f3n de recursos mantenidos por la comunidad, incluyendo ejemplos, bibliotecas y herramientas para trabajar con GeoJSON. El sitio web de GeoJSON ( https://geojson.org/ ) proporciona una visi\u00f3n general del formato, as\u00ed como ejemplos y herramientas para trabajar con GeoJSON. El sitio web de geojson.io ( https://geojson.io/ ) es una herramienta en l\u00ednea para crear, editar y visualizar datos GeoJSON. Proporciona una interfaz simple para dibujar geometr\u00edas y agregar propiedades a las caracter\u00edsticas. Con QGis podemos convertir a GeoJson i sistema de referencia EPSG:4326","title":"5.2.Formato GeoJson"},{"location":"5.2.formato_geojson/#introduccion","text":"Podemos a\u00f1adir datos propios a nuestros mapas En mapbox tendremos que especificar un: map.addSource() y el tipo de fuente map.addLayer() d\u00f3nde se va a denifir como renderizar los datos Un tipo de source aceptado por MapBox es GeoJSON GeoJSON Es el constructor principal del mapa https://docs.mapbox.com/mapbox-gl-js/style-spec/#sources-geojson","title":"Introducci\u00f3n"},{"location":"5.2.formato_geojson/#formato-geojson","text":"GeoJSON es un formato para codificar una variedad de estructuras de datos geogr\u00e1ficos. Se basa en la Notaci\u00f3n de Objetos de JavaScript (JSON), un formato de intercambio de datos de c\u00f3digo abierto. GeoJSON admite los siguientes tipos de geometr\u00eda: Punto, LineString, Pol\u00edgono, MultiPoint, MultiLineString, MultiPol\u00edgono y GeometryCollection. Tambi\u00e9n puede representar los siguientes tipos no geom\u00e9tricos: Feature y FeatureCollection. Aqu\u00ed hay un ejemplo de un objeto GeoJSON simple que representa un punto con una longitud y latitud: { \"type\" : \"Point\" , \"coordinates\" : [ 30.5 , 50.5 ] } Y aqu\u00ed hay un ejemplo de una FeatureCollection de GeoJSON que contiene una sola Feature con una geometr\u00eda de Punto: { \"type\" : \"FeatureCollection\" , \"features\" : [ { \"type\" : \"Feature\" , \"geometry\" : { \"type\" : \"Point\" , \"coordinates\" : [ 30.5 , 50.5 ] }, \"properties\" : { \"name\" : \"Mi Punto\" } } ] } GeoJSON se utiliza a menudo para representar datos geogr\u00e1ficos en mapas y APIs basados en web, y es compatible con muchas bibliotecas de mapeo de c\u00f3digo abierto y comerciales.","title":"Formato GeoJSON"},{"location":"5.2.formato_geojson/#recursos","text":"La especificaci\u00f3n oficial del formato GeoJSON es mantenida por el GeoJSON Working Group del Internet Engineering Task Force (IETF). Puedes encontrar la especificaci\u00f3n en la siguiente URL: https://tools.ietf.org/html/rfc7946 Adem\u00e1s de la especificaci\u00f3n, hay muchos recursos disponibles en l\u00ednea que proporcionan m\u00e1s informaci\u00f3n y ejemplos de c\u00f3mo usar GeoJSON. Aqu\u00ed hay algunos ejemplos: El repositorio de GitHub de GeoJSON ( https://github.com/geojson/geojson-spec ) contiene los \u00faltimos borradores de la especificaci\u00f3n, as\u00ed como herramientas y recursos para trabajar con GeoJSON. La Wiki de GeoJSON ( https://wiki.geojson.org/ ) proporciona una colecci\u00f3n de recursos mantenidos por la comunidad, incluyendo ejemplos, bibliotecas y herramientas para trabajar con GeoJSON. El sitio web de GeoJSON ( https://geojson.org/ ) proporciona una visi\u00f3n general del formato, as\u00ed como ejemplos y herramientas para trabajar con GeoJSON. El sitio web de geojson.io ( https://geojson.io/ ) es una herramienta en l\u00ednea para crear, editar y visualizar datos GeoJSON. Proporciona una interfaz simple para dibujar geometr\u00edas y agregar propiedades a las caracter\u00edsticas. Con QGis podemos convertir a GeoJson i sistema de referencia EPSG:4326","title":"Recursos"},{"location":"5.3.visor_rutas/","text":"Introducci\u00f3n Utilizando el mapa 3D vamos a crear un peque\u00f1o visor de rutas Dentro del directorio de /geoweb/datos tenmos el archivo rutas.geojson que contiene tres cuatro rutas Visor de rutas Paso 1: Con VSCODE abrimos mapa3d.html i lo guardamos c\u00f3mo mapa-rutas3d.html Cambiamos el t\u00edtulo Cambiamos center y zoom para abrir mapa sobre una ruta < html > < head > < meta charset = 'utf-8' /> < title > Mapa rutas 3D </ title > < meta name = 'viewport' content = 'initial-scale=1,maximum-scale=1,user-scalable=no' /> < script src = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.js' ></ script > < link href = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.css' rel = 'stylesheet' /> < link href = 'css/estilobase.css' rel = 'stylesheet' /> < script src = 'js/3d.js' ></ script > < script > //A\u00f1adir vuestor token!! var map ; function init () { mapboxgl . accessToken = 'pk.eyJ1IjoiZ2lzbWFzdGVybTIiLCJhIjoiY2plZHhubTQxMTNoYzMza3Rqa3kxYTdrOCJ9.53B1E6mKD_EQOVb2Y0-SsA' ; map = new mapboxgl . Map ({ container : 'map' , style : 'mapbox://styles/mapbox/satellite-streets-v10' , center : [ 1.77878 , 41.60044 ], zoom : 14 ,, attributionControl : false , pitch : 45 , hash : true }); map . addControl ( new mapboxgl . AttributionControl ({ compact : true })); map . addControl ( new mapboxgl . NavigationControl ()); map . on ( 'load' , function () { add3D ( 'mapbox-dem' ); }); //fin onload } // final init </ script > </ head > < body onload = \"init()\" > < div id = \"map\" ></ div > </ body > </ html > Paso 2: Creamos archivo rutas.js Dentro de nuestro directorio /geoweb/js/ creamos el archivo rutas.js , d\u00f3nde crearemos funciones especificas de nuestro proyecto Creamos la funci\u00f3n addRutas() function addRutas () { var url = 'datos/rutas.geojson' ; map . addSource ( 'rutas' , { type : 'geojson' , data : url }); map . addLayer ({ 'id' : 'route' , 'type' : 'line' , 'source' : 'rutas' , 'layout' : { 'line-join' : 'round' , 'line-cap' : 'round' }, 'paint' : { 'line-color' : '#ff0000' , 'line-width' : 3 } }); } //fin funcion Paso 3: Llamar funci\u00f3n addRuta Llamamos a la funci\u00f3n addRuta() y cambiamos coordenadas iniciales y nivel de zoom del mapa para empezar encima de una ruta < html > < head > < meta charset = 'utf-8' /> < title > Mapa rutas 3D </ title > < meta name = 'viewport' content = 'initial-scale=1,maximum-scale=1,user-scalable=no' /> < script src = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.js' ></ script > < link href = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.css' rel = 'stylesheet' /> < link href = 'css/estilobase.css' rel = 'stylesheet' /> < script src = 'js/3d.js' ></ script > < script src = 'js/rutas.js' ></ script > < script > //A\u00f1adir vuestor token!! var map ; function init () { mapboxgl . accessToken = 'pk.eyJ1IjoiZ2lzbWFzdGVybTIiLCJhIjoiY2plZHhubTQxMTNoYzMza3Rqa3kxYTdrOCJ9.53B1E6mKD_EQOVb2Y0-SsA' ; map = new mapboxgl . Map ({ container : 'map' , style : 'mapbox://styles/mapbox/satellite-streets-v10' , center : [ 1.77878 , 41.60044 ], zoom : 14 , attributionControl : false , pitch : 45 , hash : true }); map . addControl ( new mapboxgl . AttributionControl ({ compact : true })); map . addControl ( new mapboxgl . NavigationControl ()); map . on ( 'load' , function () { add3D ( 'mapbox-dem' ); addRutas (); }); //fin onload } // final init </ script > </ head > < body onload = \"init()\" > < div id = \"map\" ></ div > </ body > </ html > Visualizamos mapa Paso 4: Opciones de seleci\u00f3n Vamos a crear una funcionalidad para hacer zoom a las tres rutas Creamos un elementos HTML de tipo <select> para poder seleccionar una ruta < html > < head > < meta charset = 'utf-8' /> < title > Mapa rutas 3D </ title > < meta name = 'viewport' content = 'initial-scale=1,maximum-scale=1,user-scalable=no' /> < script src = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.js' ></ script > < link href = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.css' rel = 'stylesheet' /> < link href = 'css/estilobase.css' rel = 'stylesheet' /> < script src = 'js/3d.js' ></ script > < script src = 'js/rutas.js' ></ script > < script > //A\u00f1adir vuestor token!! var map ; function init () { mapboxgl . accessToken = 'pk.eyJ1IjoiZ2lzbWFzdGVybTIiLCJhIjoiY2plZHhubTQxMTNoYzMza3Rqa3kxYTdrOCJ9.53B1E6mKD_EQOVb2Y0-SsA' ; map = new mapboxgl . Map ({ container : 'map' , style : 'mapbox://styles/mapbox/satellite-streets-v10' , center : [ 1.77878 , 41.60044 ], zoom : 14 , attributionControl : false , pitch : 45 , hash : true }); map . addControl ( new mapboxgl . AttributionControl ({ compact : true })); map . addControl ( new mapboxgl . NavigationControl ()); map . on ( 'load' , function () { add3D ( 'mapbox-dem' ); addRutas (); }); //fin onload } // final init </ script > </ head > < body onload = \"init()\" > < div class = \"panelTopIzquierda\" > < select onChange = \"zoomToRutas(this.value)\" > < option selected value = \"14/41.60044/1.77878\" > Ruta 1 </ option > < option value = \"12.96/41.76589/2.30274\" > Ruta 2 </ option > < option value = \"13.04/42.31892/3.26054\" > Ruta 3 </ option > </ select > </ div > < div id = \"map\" ></ div > </ body > </ html > Paso 6: Funci\u00f3n de zoomToRutas A\u00f1adimos a rutas.js la funcion zoomToRutas() Utilizamos m\u00e9todo https://docs.mapbox.com/mapbox-gl-js/api/map/#map#flyto function zoomToRutas ( valores ) { var coord = valores . split ( \"/\" ); map . flyTo ({ center : [ coord [ 2 ], coord [ 1 ]], zoom : coord [ 0 ] }); } //fin funcion \u00bfSubimos el ejemplo al GitHub? git pull git add . git commit -m \"visor rutas\" git push Saber m\u00e1s .. A\u00f1adir DEM externo a 3d.js Mapbox utiliza un DEM de 10m y de 30 m seg\u00fan zonas del mundo El ICGC publica uno de 2m para Catalunya https://openicgc.github.io/ Modificamos la funci\u00f3n add3D() A\u00f1adimos nueva funci\u00f3n changeTerrain() para poder recibir un valor y acticar el terreno de MapBox, el del ICGC o ninguno. function add3D ( terreno ) { map . addSource ( 'mapbox-dem' , { 'type' : 'raster-dem' , 'url' : 'mapbox://mapbox.mapbox-terrain-dem-v1' , 'tileSize' : 512 , 'maxzoom' : 14 }); map . addSource ( 'icgc-dem' , { 'type' : 'raster-dem' , \"tiles\" : [ \"https://tilemaps.icgc.cat/tileserver/tileserver.php/terreny_icgc_2m_rgb/{z}/{x}/{y}.png\" ], 'tileSize' : 512 , 'maxzoom' : 14 }); map . addLayer ({ 'id' : 'sky' , 'type' : 'sky' , 'paint' : { 'sky-type' : 'atmosphere' , 'sky-atmosphere-sun' : [ 0.0 , 0.0 ], 'sky-atmosphere-sun-intensity' : 15 } }); /* codigo comentado map.setTerrain({ 'source': 'mapbox-dem', 'exaggeration': 1.5 }); */ changeTerrain ( terreno ); } //fin funcion function changeTerrain ( terreno ){ if ( terreno ){ map . setTerrain ({ 'source' : terreno , 'exaggeration' : 1.5 }); } else { map . setTerrain ( null ); } } //fin funcion Paso 6:Llamamos a la funci\u00f3n en el HTML , pasando el par\u00e1metro < html > < head > < meta charset = 'utf-8' /> < title > Mapa 3D </ title > < meta name = 'viewport' content = 'initial-scale=1,maximum-scale=1,user-scalable=no' /> < script src = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.js' ></ script > < link href = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.css' rel = 'stylesheet' /> < link href = 'css/estilobase.css' rel = 'stylesheet' /> < script src = 'js/3d.js' ></ script > < script > //A\u00f1adir vuestor token!! var map ; function init () { mapboxgl . accessToken = 'pk.eyJ1IjoiZ2lzbWFzdGVybTIiLCJhIjoiY2plZHhubTQxMTNoYzMza3Rqa3kxYTdrOCJ9.53B1E6mKD_EQOVb2Y0-SsA' ; map = new mapboxgl . Map ({ container : 'map' , style : 'mapbox://styles/mapbox/satellite-streets-v10' , center : [ 2.16859 , 41.3954 ], zoom : 12 , attributionControl : false , pitch : 45 , hash : true }); map . addControl ( new mapboxgl . AttributionControl ({ compact : true })); map . addControl ( new mapboxgl . NavigationControl ()); map . on ( 'load' , function () { add3D ( 'icgc-dem' ); //mapbox-dem o null }); //fin onload } // final init </ script > </ head > < body onload = \"init()\" > < div id = \"map\" ></ div > </ body > </ html > Comparamos zona Montserrat \u00bfC\u00f3mo har\u00edamos para poner una opci\u00f3n para activar/desactivar vista 3D y seleccionar el DEM Mapbox i el ICGC? Sab\u00e9mos que map.setTerrain(null) desactiva el 3D <div class=\"panelTopIzquierda\"> <input type=\"radio\" onClick=\"changeTerrain(this.value)\" checked name=\"dem\" value=\"mapbox-dem\">Mapbox <br> <input type=\"radio\" onClick=\"changeTerrain(this.value)\" name=\"dem\" value=\"icgc-dem\">ICGC <br> <input type=\"radio\" onClick=\"changeTerrain(null)\" name=\"dem\" >2D </div>","title":"5.3.Visor de rutas"},{"location":"5.3.visor_rutas/#introduccion","text":"Utilizando el mapa 3D vamos a crear un peque\u00f1o visor de rutas Dentro del directorio de /geoweb/datos tenmos el archivo rutas.geojson que contiene tres cuatro rutas","title":"Introducci\u00f3n"},{"location":"5.3.visor_rutas/#visor-de-rutas","text":"","title":"Visor de rutas"},{"location":"5.3.visor_rutas/#paso-1-con-vscode-abrimos-mapa3dhtml-i-lo-guardamos-como-mapa-rutas3dhtml","text":"Cambiamos el t\u00edtulo Cambiamos center y zoom para abrir mapa sobre una ruta < html > < head > < meta charset = 'utf-8' /> < title > Mapa rutas 3D </ title > < meta name = 'viewport' content = 'initial-scale=1,maximum-scale=1,user-scalable=no' /> < script src = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.js' ></ script > < link href = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.css' rel = 'stylesheet' /> < link href = 'css/estilobase.css' rel = 'stylesheet' /> < script src = 'js/3d.js' ></ script > < script > //A\u00f1adir vuestor token!! var map ; function init () { mapboxgl . accessToken = 'pk.eyJ1IjoiZ2lzbWFzdGVybTIiLCJhIjoiY2plZHhubTQxMTNoYzMza3Rqa3kxYTdrOCJ9.53B1E6mKD_EQOVb2Y0-SsA' ; map = new mapboxgl . Map ({ container : 'map' , style : 'mapbox://styles/mapbox/satellite-streets-v10' , center : [ 1.77878 , 41.60044 ], zoom : 14 ,, attributionControl : false , pitch : 45 , hash : true }); map . addControl ( new mapboxgl . AttributionControl ({ compact : true })); map . addControl ( new mapboxgl . NavigationControl ()); map . on ( 'load' , function () { add3D ( 'mapbox-dem' ); }); //fin onload } // final init </ script > </ head > < body onload = \"init()\" > < div id = \"map\" ></ div > </ body > </ html >","title":"Paso 1: Con VSCODE abrimos mapa3d.html i lo guardamos c\u00f3mo mapa-rutas3d.html"},{"location":"5.3.visor_rutas/#paso-2-creamos-archivo-rutasjs","text":"Dentro de nuestro directorio /geoweb/js/ creamos el archivo rutas.js , d\u00f3nde crearemos funciones especificas de nuestro proyecto Creamos la funci\u00f3n addRutas() function addRutas () { var url = 'datos/rutas.geojson' ; map . addSource ( 'rutas' , { type : 'geojson' , data : url }); map . addLayer ({ 'id' : 'route' , 'type' : 'line' , 'source' : 'rutas' , 'layout' : { 'line-join' : 'round' , 'line-cap' : 'round' }, 'paint' : { 'line-color' : '#ff0000' , 'line-width' : 3 } }); } //fin funcion","title":"Paso 2: Creamos archivo rutas.js"},{"location":"5.3.visor_rutas/#paso-3-llamar-funcion-addruta","text":"Llamamos a la funci\u00f3n addRuta() y cambiamos coordenadas iniciales y nivel de zoom del mapa para empezar encima de una ruta < html > < head > < meta charset = 'utf-8' /> < title > Mapa rutas 3D </ title > < meta name = 'viewport' content = 'initial-scale=1,maximum-scale=1,user-scalable=no' /> < script src = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.js' ></ script > < link href = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.css' rel = 'stylesheet' /> < link href = 'css/estilobase.css' rel = 'stylesheet' /> < script src = 'js/3d.js' ></ script > < script src = 'js/rutas.js' ></ script > < script > //A\u00f1adir vuestor token!! var map ; function init () { mapboxgl . accessToken = 'pk.eyJ1IjoiZ2lzbWFzdGVybTIiLCJhIjoiY2plZHhubTQxMTNoYzMza3Rqa3kxYTdrOCJ9.53B1E6mKD_EQOVb2Y0-SsA' ; map = new mapboxgl . Map ({ container : 'map' , style : 'mapbox://styles/mapbox/satellite-streets-v10' , center : [ 1.77878 , 41.60044 ], zoom : 14 , attributionControl : false , pitch : 45 , hash : true }); map . addControl ( new mapboxgl . AttributionControl ({ compact : true })); map . addControl ( new mapboxgl . NavigationControl ()); map . on ( 'load' , function () { add3D ( 'mapbox-dem' ); addRutas (); }); //fin onload } // final init </ script > </ head > < body onload = \"init()\" > < div id = \"map\" ></ div > </ body > </ html > Visualizamos mapa","title":"Paso 3: Llamar funci\u00f3n addRuta"},{"location":"5.3.visor_rutas/#paso-4-opciones-de-selecion","text":"Vamos a crear una funcionalidad para hacer zoom a las tres rutas Creamos un elementos HTML de tipo <select> para poder seleccionar una ruta < html > < head > < meta charset = 'utf-8' /> < title > Mapa rutas 3D </ title > < meta name = 'viewport' content = 'initial-scale=1,maximum-scale=1,user-scalable=no' /> < script src = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.js' ></ script > < link href = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.css' rel = 'stylesheet' /> < link href = 'css/estilobase.css' rel = 'stylesheet' /> < script src = 'js/3d.js' ></ script > < script src = 'js/rutas.js' ></ script > < script > //A\u00f1adir vuestor token!! var map ; function init () { mapboxgl . accessToken = 'pk.eyJ1IjoiZ2lzbWFzdGVybTIiLCJhIjoiY2plZHhubTQxMTNoYzMza3Rqa3kxYTdrOCJ9.53B1E6mKD_EQOVb2Y0-SsA' ; map = new mapboxgl . Map ({ container : 'map' , style : 'mapbox://styles/mapbox/satellite-streets-v10' , center : [ 1.77878 , 41.60044 ], zoom : 14 , attributionControl : false , pitch : 45 , hash : true }); map . addControl ( new mapboxgl . AttributionControl ({ compact : true })); map . addControl ( new mapboxgl . NavigationControl ()); map . on ( 'load' , function () { add3D ( 'mapbox-dem' ); addRutas (); }); //fin onload } // final init </ script > </ head > < body onload = \"init()\" > < div class = \"panelTopIzquierda\" > < select onChange = \"zoomToRutas(this.value)\" > < option selected value = \"14/41.60044/1.77878\" > Ruta 1 </ option > < option value = \"12.96/41.76589/2.30274\" > Ruta 2 </ option > < option value = \"13.04/42.31892/3.26054\" > Ruta 3 </ option > </ select > </ div > < div id = \"map\" ></ div > </ body > </ html >","title":"Paso 4: Opciones de seleci\u00f3n"},{"location":"5.3.visor_rutas/#paso-6-funcion-de-zoomtorutas","text":"A\u00f1adimos a rutas.js la funcion zoomToRutas() Utilizamos m\u00e9todo https://docs.mapbox.com/mapbox-gl-js/api/map/#map#flyto function zoomToRutas ( valores ) { var coord = valores . split ( \"/\" ); map . flyTo ({ center : [ coord [ 2 ], coord [ 1 ]], zoom : coord [ 0 ] }); } //fin funcion \u00bfSubimos el ejemplo al GitHub? git pull git add . git commit -m \"visor rutas\" git push","title":"Paso 6: Funci\u00f3n de zoomToRutas"},{"location":"5.3.visor_rutas/#saber-mas","text":"","title":"Saber m\u00e1s .."},{"location":"5.3.visor_rutas/#anadir-dem-externo-a-3djs","text":"Mapbox utiliza un DEM de 10m y de 30 m seg\u00fan zonas del mundo El ICGC publica uno de 2m para Catalunya https://openicgc.github.io/ Modificamos la funci\u00f3n add3D() A\u00f1adimos nueva funci\u00f3n changeTerrain() para poder recibir un valor y acticar el terreno de MapBox, el del ICGC o ninguno. function add3D ( terreno ) { map . addSource ( 'mapbox-dem' , { 'type' : 'raster-dem' , 'url' : 'mapbox://mapbox.mapbox-terrain-dem-v1' , 'tileSize' : 512 , 'maxzoom' : 14 }); map . addSource ( 'icgc-dem' , { 'type' : 'raster-dem' , \"tiles\" : [ \"https://tilemaps.icgc.cat/tileserver/tileserver.php/terreny_icgc_2m_rgb/{z}/{x}/{y}.png\" ], 'tileSize' : 512 , 'maxzoom' : 14 }); map . addLayer ({ 'id' : 'sky' , 'type' : 'sky' , 'paint' : { 'sky-type' : 'atmosphere' , 'sky-atmosphere-sun' : [ 0.0 , 0.0 ], 'sky-atmosphere-sun-intensity' : 15 } }); /* codigo comentado map.setTerrain({ 'source': 'mapbox-dem', 'exaggeration': 1.5 }); */ changeTerrain ( terreno ); } //fin funcion function changeTerrain ( terreno ){ if ( terreno ){ map . setTerrain ({ 'source' : terreno , 'exaggeration' : 1.5 }); } else { map . setTerrain ( null ); } } //fin funcion","title":"A\u00f1adir DEM externo a 3d.js"},{"location":"5.3.visor_rutas/#paso-6llamamos-a-la-funcion-en-el-html-pasando-el-parametro","text":"< html > < head > < meta charset = 'utf-8' /> < title > Mapa 3D </ title > < meta name = 'viewport' content = 'initial-scale=1,maximum-scale=1,user-scalable=no' /> < script src = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.js' ></ script > < link href = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.css' rel = 'stylesheet' /> < link href = 'css/estilobase.css' rel = 'stylesheet' /> < script src = 'js/3d.js' ></ script > < script > //A\u00f1adir vuestor token!! var map ; function init () { mapboxgl . accessToken = 'pk.eyJ1IjoiZ2lzbWFzdGVybTIiLCJhIjoiY2plZHhubTQxMTNoYzMza3Rqa3kxYTdrOCJ9.53B1E6mKD_EQOVb2Y0-SsA' ; map = new mapboxgl . Map ({ container : 'map' , style : 'mapbox://styles/mapbox/satellite-streets-v10' , center : [ 2.16859 , 41.3954 ], zoom : 12 , attributionControl : false , pitch : 45 , hash : true }); map . addControl ( new mapboxgl . AttributionControl ({ compact : true })); map . addControl ( new mapboxgl . NavigationControl ()); map . on ( 'load' , function () { add3D ( 'icgc-dem' ); //mapbox-dem o null }); //fin onload } // final init </ script > </ head > < body onload = \"init()\" > < div id = \"map\" ></ div > </ body > </ html > Comparamos zona Montserrat \u00bfC\u00f3mo har\u00edamos para poner una opci\u00f3n para activar/desactivar vista 3D y seleccionar el DEM Mapbox i el ICGC? Sab\u00e9mos que map.setTerrain(null) desactiva el 3D <div class=\"panelTopIzquierda\"> <input type=\"radio\" onClick=\"changeTerrain(this.value)\" checked name=\"dem\" value=\"mapbox-dem\">Mapbox <br> <input type=\"radio\" onClick=\"changeTerrain(this.value)\" name=\"dem\" value=\"icgc-dem\">ICGC <br> <input type=\"radio\" onClick=\"changeTerrain(null)\" name=\"dem\" >2D </div>","title":"Paso 6:Llamamos a la funci\u00f3n en el HTML , pasando el par\u00e1metro"},{"location":"6.1.introduccion_maputnik/","text":"Introducci\u00f3n Podemos trabajar con la libreria MapBox GL JS sin utilizar los estilos de Mapbox Si la versi\u00f3n de la libreria \u00e9s anterior a la v2 tampoco haria falta especificar el Access Token Podemos editar estilos sin utilizar MapBox Studio, directamente con Maputnik https://maputnik.github.io/ \u00bf Cuando utilizar los servicios de MapBox? Cuando tenemos un dataset grande.Mapbox nos ofrece hasta 300mb por archivo Cuando necesitamos utilitzar alguno de sus servicios (geocoding, routing) o sus estilos Cuando necesitamos alta disponibilidad \u00bf Cuando NO utilizar los servicios de MapBox? Cuando necesito trabajor con cartografia oficial Cuando tengo dataset peque\u00f1os (< 50.000 geometrias) Cuando solo visualizo terceros servicios \u00bfD\u00f3nde podemos encontrar estilos vector-tiles? https://openicgc.github.io/ https://cloud.maptiler.com/maps/ https://www.ordnancesurvey.co.uk/business-government/products/open-zoomstack https://www.thunderforest.com/docs/vector-maps-api/ https://www.mapzen.com/projects/vector-tiles/ https://github.com/klokantech/roman-empire OpenICGC. Es un web con recursos y servicios open del Institut Cartogr\u00e1fic i Geol\u00f2gic de Catalunya Presenta estilos y bases Vector Tiles mundiales d\u00f3nde fusiona datos OSM y del ICGC en un esquema de OpenMapTiles https://openicgc.github.io/ Mapa estilo ICGC Seleccionaremos el estilo ICGC de OpenICGC https://geoserveis.icgc.cat/contextmaps/icgc_mapa_base_gris_simplificat.json Creamos archivo mapbox-icgc.html < html > < head > < meta charset = 'utf-8' /> < title > Topog\u00e1fico </ title > < meta name = 'viewport' content = 'initial-scale=1,maximum-scale=1,user-scalable=no' /> < script src = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.js' ></ script > < link href = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.css' rel = 'stylesheet' /> < link href = 'css/estilobase.css' rel = 'stylesheet' /> < script > var map ; function init () { mapboxgl . accessToken = 'pk.eyJ1IjoiZ2lzbWFzdGVybTIiLCJhIjoiY2plZHhubTQxMTNoYzMza3Rqa3kxYTdrOCJ9.53B1E6mKD_EQOVb2Y0-SsA' ; map = new mapboxgl . Map ({ container : 'map' , style : 'https://geoserveis.icgc.cat/contextmaps/icgc_mapa_base_gris_simplificat.json' , center : [ 2.16859 , 41.3954 ], zoom : 13 , hash : true , pitch : 45 , attributionControl : false }); map . addControl ( new mapboxgl . AttributionControl ({ compact : true })); map . addControl ( new mapboxgl . NavigationControl ()); } </ script > </ head > < body onload = \"init()\" > < div id = 'map' ></ div > </ body > </ html > Editar estilo con Maputnik Seleccionaremos el estilo gris de OpenICGC https://geoserveis.icgc.cat/contextmaps/icgc_mapa_base_gris_simplificat.json Vamos al editor de Maputnik https://maputnik.github.io/editor/ Open --> Load from Url -->Pegamos URL --> Open URL Canviamos colores del estilos de forma libre Export --> Download --> Guardamos en /geoweb/datos/miestilo.json Mapa estilo propio Creamos archivo mapbox-miestilo2.html < html > < head > < meta charset = 'utf-8' /> < title > Mi estilo </ title > < meta name = 'viewport' content = 'initial-scale=1,maximum-scale=1,user-scalable=no' /> < script src = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.js' ></ script > < link href = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.css' rel = 'stylesheet' /> < link href = 'css/estilobase.css' rel = 'stylesheet' /> < script > var map ; function init () { mapboxgl . accessToken = 'pk.eyJ1IjoiZ2lzbWFzdGVybTIiLCJhIjoiY2plZHhubTQxMTNoYzMza3Rqa3kxYTdrOCJ9.53B1E6mKD_EQOVb2Y0-SsA' ; map = new mapboxgl . Map ({ container : 'map' , style : 'datos/miestilo.json' , // o 'datos/miestilo.json' center : [ 2.16859 , 41.3954 ], zoom : 13 , hash : true , pitch : 45 , attributionControl : false }); map . addControl ( new mapboxgl . AttributionControl ({ compact : true })); map . addControl ( new mapboxgl . NavigationControl ()); } </ script > </ head > < body onload = \"init()\" > < div id = 'map' ></ div > </ body > </ html > A\u00f1adir datos propios GeoJson Para archivos muy grandes no es recomendable A\u00f1adimos un GeoJson local , como un nuevo source GeoJSON Es el constructor principal del mapa https://docs.mapbox.com/mapbox-gl-js/style-spec/#sources-geojson < html > < head > < meta charset = 'utf-8' /> < title > Mi estilo </ title > < meta name = 'viewport' content = 'initial-scale=1,maximum-scale=1,user-scalable=no' /> < script src = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.js' ></ script > < link href = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.css' rel = 'stylesheet' /> < link href = 'css/estilobase.css' rel = 'stylesheet' /> < script > var map ; function init () { mapboxgl . accessToken = 'pk.eyJ1IjoiZ2lzbWFzdGVybTIiLCJhIjoiY2plZHhubTQxMTNoYzMza3Rqa3kxYTdrOCJ9.53B1E6mKD_EQOVb2Y0-SsA' ; map = new mapboxgl . Map ({ container : 'map' , style : 'datos/miestilo.json' , center : [ 2.16859 , 41.3954 ], zoom : 13 , hash : true , pitch : 45 , attributionControl : false }); map . addControl ( new mapboxgl . AttributionControl ({ compact : true })); map . addControl ( new mapboxgl . NavigationControl ()); map . on ( 'load' , function () { map . addSource ( \"carrils-bici\" , { type : \"geojson\" , data : \"datos/carrils-bici.geojson\" }); //fin map source map . addLayer ({ id : \"carrils-bici-layer\" , type : \"line\" , source : \"carrils-bici\" , layout : { \"line-join\" : \"round\" , \"line-cap\" : \"round\" }, paint : { \"line-color\" : \"#FF0000\" , \"line-width\" : 8 } }); //fin add layers }); //Fin load mapa } </ script > </ head > < body onload = \"init()\" > < div id = 'map' ></ div > </ body > </ html > \u00bfPonemos la proyecci\u00f3n globe? Subimos el ejemplo al GitHub git pull git add . git commit -m \"mi mapa b\u00e0sico\" git push","title":"6.1.Mapas personalizados con Maputnik y MapBox GL JS"},{"location":"6.1.introduccion_maputnik/#introduccion","text":"Podemos trabajar con la libreria MapBox GL JS sin utilizar los estilos de Mapbox Si la versi\u00f3n de la libreria \u00e9s anterior a la v2 tampoco haria falta especificar el Access Token Podemos editar estilos sin utilizar MapBox Studio, directamente con Maputnik https://maputnik.github.io/","title":"Introducci\u00f3n"},{"location":"6.1.introduccion_maputnik/#cuando-utilizar-los-servicios-de-mapbox","text":"Cuando tenemos un dataset grande.Mapbox nos ofrece hasta 300mb por archivo Cuando necesitamos utilitzar alguno de sus servicios (geocoding, routing) o sus estilos Cuando necesitamos alta disponibilidad","title":"\u00bf Cuando utilizar los servicios de MapBox?"},{"location":"6.1.introduccion_maputnik/#cuando-no-utilizar-los-servicios-de-mapbox","text":"Cuando necesito trabajor con cartografia oficial Cuando tengo dataset peque\u00f1os (< 50.000 geometrias) Cuando solo visualizo terceros servicios","title":"\u00bf Cuando NO utilizar los servicios de MapBox?"},{"location":"6.1.introduccion_maputnik/#donde-podemos-encontrar-estilos-vector-tiles","text":"https://openicgc.github.io/ https://cloud.maptiler.com/maps/ https://www.ordnancesurvey.co.uk/business-government/products/open-zoomstack https://www.thunderforest.com/docs/vector-maps-api/ https://www.mapzen.com/projects/vector-tiles/ https://github.com/klokantech/roman-empire","title":"\u00bfD\u00f3nde podemos encontrar estilos vector-tiles?"},{"location":"6.1.introduccion_maputnik/#openicgc","text":"Es un web con recursos y servicios open del Institut Cartogr\u00e1fic i Geol\u00f2gic de Catalunya Presenta estilos y bases Vector Tiles mundiales d\u00f3nde fusiona datos OSM y del ICGC en un esquema de OpenMapTiles https://openicgc.github.io/","title":"OpenICGC."},{"location":"6.1.introduccion_maputnik/#mapa-estilo-icgc","text":"Seleccionaremos el estilo ICGC de OpenICGC https://geoserveis.icgc.cat/contextmaps/icgc_mapa_base_gris_simplificat.json Creamos archivo mapbox-icgc.html < html > < head > < meta charset = 'utf-8' /> < title > Topog\u00e1fico </ title > < meta name = 'viewport' content = 'initial-scale=1,maximum-scale=1,user-scalable=no' /> < script src = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.js' ></ script > < link href = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.css' rel = 'stylesheet' /> < link href = 'css/estilobase.css' rel = 'stylesheet' /> < script > var map ; function init () { mapboxgl . accessToken = 'pk.eyJ1IjoiZ2lzbWFzdGVybTIiLCJhIjoiY2plZHhubTQxMTNoYzMza3Rqa3kxYTdrOCJ9.53B1E6mKD_EQOVb2Y0-SsA' ; map = new mapboxgl . Map ({ container : 'map' , style : 'https://geoserveis.icgc.cat/contextmaps/icgc_mapa_base_gris_simplificat.json' , center : [ 2.16859 , 41.3954 ], zoom : 13 , hash : true , pitch : 45 , attributionControl : false }); map . addControl ( new mapboxgl . AttributionControl ({ compact : true })); map . addControl ( new mapboxgl . NavigationControl ()); } </ script > </ head > < body onload = \"init()\" > < div id = 'map' ></ div > </ body > </ html >","title":"Mapa estilo ICGC"},{"location":"6.1.introduccion_maputnik/#editar-estilo-con-maputnik","text":"Seleccionaremos el estilo gris de OpenICGC https://geoserveis.icgc.cat/contextmaps/icgc_mapa_base_gris_simplificat.json Vamos al editor de Maputnik https://maputnik.github.io/editor/ Open --> Load from Url -->Pegamos URL --> Open URL Canviamos colores del estilos de forma libre Export --> Download --> Guardamos en /geoweb/datos/miestilo.json","title":"Editar estilo con Maputnik"},{"location":"6.1.introduccion_maputnik/#mapa-estilo-propio","text":"Creamos archivo mapbox-miestilo2.html < html > < head > < meta charset = 'utf-8' /> < title > Mi estilo </ title > < meta name = 'viewport' content = 'initial-scale=1,maximum-scale=1,user-scalable=no' /> < script src = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.js' ></ script > < link href = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.css' rel = 'stylesheet' /> < link href = 'css/estilobase.css' rel = 'stylesheet' /> < script > var map ; function init () { mapboxgl . accessToken = 'pk.eyJ1IjoiZ2lzbWFzdGVybTIiLCJhIjoiY2plZHhubTQxMTNoYzMza3Rqa3kxYTdrOCJ9.53B1E6mKD_EQOVb2Y0-SsA' ; map = new mapboxgl . Map ({ container : 'map' , style : 'datos/miestilo.json' , // o 'datos/miestilo.json' center : [ 2.16859 , 41.3954 ], zoom : 13 , hash : true , pitch : 45 , attributionControl : false }); map . addControl ( new mapboxgl . AttributionControl ({ compact : true })); map . addControl ( new mapboxgl . NavigationControl ()); } </ script > </ head > < body onload = \"init()\" > < div id = 'map' ></ div > </ body > </ html >","title":"Mapa estilo propio"},{"location":"6.1.introduccion_maputnik/#anadir-datos-propios-geojson","text":"Para archivos muy grandes no es recomendable A\u00f1adimos un GeoJson local , como un nuevo source GeoJSON Es el constructor principal del mapa https://docs.mapbox.com/mapbox-gl-js/style-spec/#sources-geojson < html > < head > < meta charset = 'utf-8' /> < title > Mi estilo </ title > < meta name = 'viewport' content = 'initial-scale=1,maximum-scale=1,user-scalable=no' /> < script src = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.js' ></ script > < link href = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.css' rel = 'stylesheet' /> < link href = 'css/estilobase.css' rel = 'stylesheet' /> < script > var map ; function init () { mapboxgl . accessToken = 'pk.eyJ1IjoiZ2lzbWFzdGVybTIiLCJhIjoiY2plZHhubTQxMTNoYzMza3Rqa3kxYTdrOCJ9.53B1E6mKD_EQOVb2Y0-SsA' ; map = new mapboxgl . Map ({ container : 'map' , style : 'datos/miestilo.json' , center : [ 2.16859 , 41.3954 ], zoom : 13 , hash : true , pitch : 45 , attributionControl : false }); map . addControl ( new mapboxgl . AttributionControl ({ compact : true })); map . addControl ( new mapboxgl . NavigationControl ()); map . on ( 'load' , function () { map . addSource ( \"carrils-bici\" , { type : \"geojson\" , data : \"datos/carrils-bici.geojson\" }); //fin map source map . addLayer ({ id : \"carrils-bici-layer\" , type : \"line\" , source : \"carrils-bici\" , layout : { \"line-join\" : \"round\" , \"line-cap\" : \"round\" }, paint : { \"line-color\" : \"#FF0000\" , \"line-width\" : 8 } }); //fin add layers }); //Fin load mapa } </ script > </ head > < body onload = \"init()\" > < div id = 'map' ></ div > </ body > </ html > \u00bfPonemos la proyecci\u00f3n globe? Subimos el ejemplo al GitHub git pull git add . git commit -m \"mi mapa b\u00e0sico\" git push","title":"A\u00f1adir datos propios GeoJson"},{"location":"6.2.visor_terremotos/","text":"Visualizador de terremotos Atencion!! Nos han encargado realizar un mapa mundial para visualizar los \u00faltimos terremotos acontecidos Sabemos que GeoNames.org tiene un servicio JSON para interrogar los terremotos https://www.geonames.org/ Podemos utilizar el estilo dark de fondo mapbox://styles/mapbox/dark-v10 El estilo de Mapbox tiene un tipo \"circle\" que puedo cambiar de color y tama\u00f1o https://docs.mapbox.com/mapbox-gl-js/style-spec/#layers-circle Paso 1: Servicio GeoNames Geonames.org Buscamos el servicio de terremotos y cu\u00e1l es su implementaci\u00f3n https://www.geonames.org/export/JSON-webservices.html#earthquakesJSON Paso 2: Crearemos el archivo terremotos.html A\u00f1adimos c\u00f3digo con mapa base \"dark\" < html > < head > < meta charset = 'utf-8' /> < title > Terremotos </ title > < meta name = 'viewport' content = 'initial-scale=1,maximum-scale=1,user-scalable=no' /> < script src = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.js' ></ script > < link href = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.css' rel = 'stylesheet' /> < link href = 'css/estilobase.css' rel = 'stylesheet' /> < script > var map ; function init () { mapboxgl . accessToken = \"pk.eyJ1IjoiZ2lzbWFzdGVybTIiLCJhIjoiY2plZHhubTQxMTNoYzMza3Rqa3kxYTdrOCJ9.53B1E6mKD_EQOVb2Y0-SsA\" ; map = new mapboxgl . Map ({ container : 'map' , style : 'mapbox://styles/mapbox/dark-v10' , center : [ 9.746 , 40.473 ], zoom : 5.5 , hash : true , pitch : 0 , attributionControl : false }); map . addControl ( new mapboxgl . AttributionControl ({ compact : true })); map . addControl ( new mapboxgl . NavigationControl ()); } //fin init </ script > </ head > < body onload = \"init()\" > < div id = 'map' ></ div > </ body > </ html > Paso 3:Creamos archivo JS Dentro de nuestro directorio /geoweb/js/ creamos el archivo terremotos.js , d\u00f3nde crearemos funciones especificas de nuestro proyect Dentro de nuestro directorio /geoweb/js/ creamos el archivo utils.js , d\u00f3nde crearemos funciones gen\u00e9ricas que puedan ser reutilizadas Paso 4. A\u00f1adimos JS A\u00f1adimos estos archivos (de momento vac\u00edos) a terremotos.html < html > < head > < meta charset = 'utf-8' /> < title > Terremotos </ title > < meta name = 'viewport' content = 'initial-scale=1,maximum-scale=1,user-scalable=no' /> < script src = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.js' ></ script > < link href = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.css' rel = 'stylesheet' /> < link href = 'css/estilobase.css' rel = 'stylesheet' /> < script src = 'js/utils.js' ></ script > < script src = 'js/terremotos.js' ></ script > < script > var map ; function init () { mapboxgl . accessToken = \"pk.eyJ1IjoiZ2lzbWFzdGVybTIiLCJhIjoiY2plZHhubTQxMTNoYzMza3Rqa3kxYTdrOCJ9.53B1E6mKD_EQOVb2Y0-SsA\" ; map = new mapboxgl . Map ({ container : 'map' , style : 'mapbox://styles/mapbox/dark-v10' , center : [ 9.746 , 40.473 ], zoom : 5.5 , hash : true , pitch : 0 , attributionControl : false }); map . addControl ( new mapboxgl . AttributionControl ({ compact : true })); map . addControl ( new mapboxgl . NavigationControl ()); } //fin init </ script > </ head > < body onload = \"init()\" > < div id = 'map' ></ div > </ body > </ html > Paso 5: funci\u00f3n gen\u00e9rica GET Dentro del archivo js/utils.js vamos a crear una funci\u00f3n as\u00edconcrona gen\u00e9rica para enviar y recibir respuesta de cualquier servicio GET que retorne un JSON async function : Es un funcion en JavaScript que retornar\u00e1 un valor s\u00f3lo cuando haya recibido la respuesta fetch : La API Fetch proporciona una interfaz JavaScript para acceder y manipular partes del canal HTTP, tales como peticiones y respuestas https://developer.mozilla.org/es/docs/Web/API/Fetch_API/Utilizando_Fetch . Para hacer peticiones tipo Ajax async function enviarPeticion ( url ) { return fetch ( url ) . then ( function ( response ) { return response . json () }) . then ( function ( data ) { //console.log('Respuesta', data); return data ; }). catch ( function ( error ) { console . log ( 'Error' , error ); alert ( \"Error peticion\" ); return null ; }); } Paso 6 :convertir la respuesta de JSON GeoNames al formato GeoJSON Creamos una funci\u00f3n para convertir la respuesta de JSON GeoNames al formato GeoJSON en terremotos.js Ejemplo peticion: https://secure.geonames.org/earthquakesJSON?north=44.1&south=-9.9&east=-22.4&west=55.2&username=masterupc Estructura respuesta GeoNames { \"earthquakes\" :[ { \"datetime\" : \"2011-03-11 04:46:23\" , \"depth\" : 24.4 , \"lng\" : 142.369 , \"src\" : \"us\" , \"eqid\" : \"c0001xgp\" , \"magnitude\" : 8.8 , \"lat\" : 38.322 }, { \"datetime\" : \"2012-04-11 06:38:37\" , \"depth\" : 22.9 , \"lng\" : 93.0632 , \"src\" : \"us\" , \"eqid\" : \"c000905e\" , \"magnitude\" : 8.6 , \"lat\" : 2.311 }, { \"datetime\" : \"2007-09-12 09:10:26\" , \"depth\" : 30 , \"lng\" : 101.3815 , \"src\" : \"us\" , \"eqid\" : \"2007hear\" , \"magnitude\" : 8.4 , \"lat\" : -4.5172 } ] } Miramos web https://geojson.io c\u00f3mo \u00e9s un GeoJSON Deber\u00edamos convertir con c\u00f3digo el JSON de GeoNames a un GeoJSon de puntos { \"type\" : \"FeatureCollection\" , \"features\" : [ { \"type\" : \"Feature\" , \"properties\" : { \"datetime\" : \"2011-03-11 04:46:23\" , \"magnitude\" : 8.8 }, \"geometry\" : { \"type\" : \"Point\" , \"coordinates\" : [ 142.369 , 38.322 ] } }, { \"type\" : \"Feature\" , \"properties\" : { \"datetime\" : \"2012-04-11 06:38:37\" , \"magnitude\" : 8.6 }, \"geometry\" : { \"type\" : \"Point\" , \"coordinates\" : [ 93.0632 , 2.311 ] } }, { \"type\" : \"Feature\" , \"properties\" : { \"datetime\" : \"2007-09-12 09:10:26\" , \"magnitude\" : 8.4 }, \"geometry\" : { \"type\" : \"Point\" , \"coordinates\" : [ 101.3815 , -4.5172 ] } } ] } Si tuvieramos que realizar reproyecciones o operaciones espaciales http://proj4js.org/ https://turfjs.org/ Paso 6.1 : Funci\u00f3n terremotosGeonamesToGeoJSON() Creamos dentro de /js/terremotos.js la funcion terremotosGeonamesToGeoJSON function terremotosGeonamesToGeoJSON ( respuestaGeonames ){ var geoJSON = { \"type\" : \"FeatureCollection\" , \"features\" : [] }; for ( var i = 0 ; i < respuestaGeonames . earthquakes . length ; i ++ ){ geoJSON . features . push ( { \"type\" : \"Feature\" , \"properties\" : { \"magnitude\" : respuestaGeonames . earthquakes [ i ]. magnitude , \"datetime\" : respuestaGeonames . earthquakes [ i ]. datetime }, \"geometry\" : { \"type\" : \"Point\" , \"coordinates\" : [ respuestaGeonames . earthquakes [ i ]. lng , respuestaGeonames . earthquakes [ i ]. lat ] } } ); } //fin loop return geoJSON ; } //fin funcion Paso 7 : Funci\u00f3n generarPeticionTerremotos() Vamos a a\u00f1adir otra funcion dentro de terremotos.js para: Capturar las coordenadas de mapa (BoundigBox) Crear la petici\u00f3n a Geonames Enviar petici\u00f3n Capturar la respuesta y convertirla a GeoJSON Generar Source y Layer de Mapbox Style y a\u00f1adir datos Justo debajo toda de la funci\u00f3n terremotosGeonamesToGeoJSON() a\u00f1adimos\" function generarPeticionTerremotos () { var peticion = 'https://secure.geonames.org/earthquakesJSON?' + 'north=' + map . getBounds (). _ne . lat + '&' + 'south=' + map . getBounds (). _sw . lat + '&' + 'east=' + map . getBounds (). _ne . lng + '&' + 'west=' + map . getBounds (). _sw . lng + '&' + 'maxRows=50&' + 'minMagnitude=5&' + 'username=masterupc&' ; //date : 'yyyy-MM-d enviarPeticion ( peticion ). then ( function ( respuestaGeonames ) { var geoJSON = terremotosGeonamesToGeoJSON ( respuestaGeonames ); if ( ! map . getSource ( \"terremotos_source\" )) { map . addSource ( \"terremotos_source\" , { type : \"geojson\" , data : geoJSON }); map . addLayer ({ 'id' : 'terremotos' , 'type' : 'circle' , 'source' : 'terremotos_source' , 'paint' : { 'circle-color' : [ 'interpolate' , [ 'linear' ], [ 'get' , 'magnitude' ], 3 , '#ebe709' , 5 , '#eb1809' , 7 , '#ef4bf2' , ], 'circle-opacity' : 0.75 , 'circle-radius' : [ 'interpolate' , [ 'linear' ], [ 'get' , 'magnitude' ], 3 , 8 , 5 , 16 , 8 , 32 ] } }); map . addLayer ({ 'id' : 'terremotos-textos' , 'type' : 'symbol' , 'source' : 'terremotos_source' , 'layout' : { 'text-field' : [ 'format' , [ 'get' , 'magnitude' ], ], 'text-size' : 10 }, 'paint' : { 'text-color' : 'rgba(255,255,255,1)' } }); } else { map . getSource ( \"terremotos_source\" ). setData ( geoJSON ); } }); } // fin funcion Paso 8:La funci\u00f3n generarPeticionTerremotos() La funci\u00f3n generarPeticionTerremotos() \u00e9s la funci\u00f3n principal que necesitamos que se ejecute: Al cargar el mapa (evento load ) Cada vez que me muevo por el mapa (eventos moveend y zoomend ) < html > < head > < meta charset = 'utf-8' /> < title > Terremotos </ title > < meta name = 'viewport' content = 'initial-scale=1,maximum-scale=1,user-scalable=no' /> < script src = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.js' ></ script > < link href = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.css' rel = 'stylesheet' /> < link href = 'css/estilobase.css' rel = 'stylesheet' /> < script src = 'js/utils.js' ></ script > < script src = 'js/terremotos.js' ></ script > < script > var map ; function Init () { mapboxgl . accessToken = 'pk.eyJ1IjoiZ2lzbWFzdGVybTIiLCJhIjoiY2plZHhubTQxMTNoYzMza3Rqa3kxYTdrOCJ9.53B1E6mKD_EQOVb2Y0-SsA' ; map = new mapboxgl . Map ({ container : 'map' , style : 'mapbox://styles/mapbox/dark-v10' , center : [ 9.746 , 40.473 ], zoom : 5.5 , hash : true , pitch : 0 , attributionControl : false }); map . addControl ( new mapboxgl . AttributionControl ({ compact : true })); map . addControl ( new mapboxgl . NavigationControl ()); map . on ( \"load\" , function () { generarPeticionTerremotos (); }); // fin load mapa map . on ( \"zoomend\" , function () { generarPeticionTerremotos (); }); map . on ( \"moveend\" , function () { generarPeticionTerremotos (); }); } //fin init </ script > </ head > < body onload = \"Init()\" > < div id = 'map' ></ div > </ body > </ html > Paso 9:funci\u00f3n para generar popups Dentro del archivo utils.js a\u00f1adimos una funci\u00f3n para ense\u00f1ar popup, pero NO al hacer click sino simplemente al passar por encima var popup = new mapboxgl . Popup ({ closeButton : false , closeOnClick : false }); function addPopupToMap ( nombreCapa ) { map . on ( 'mousemove' , nombreCapa , function ( e ) { var text = \"\" ; //console.info(e); for ( key in e . features [ 0 ]. properties ) { text += \"<b>\" + key + \"</b>:\" + e . features [ 0 ]. properties [ key ] + \"<br>\" ; } popup . setLngLat ( e . lngLat ) . setHTML ( text ) . addTo ( map ); }); map . on ( 'mouseenter' , nombreCapa , function () { map . getCanvas (). style . cursor = 'pointer' ; }); map . on ( 'mouseleave' , nombreCapa , function () { map . getCanvas (). style . cursor = '' ; popup . remove (); }); } // fin funcion Paso 10: Llamamos a la funcion addPopupToMap() Llamamos a la funcion addPopupToMap() pasando el nombre de nuestra capa activa: < html > < head > < meta charset = 'utf-8' /> < title > Terremotos </ title > < meta name = 'viewport' content = 'initial-scale=1,maximum-scale=1,user-scalable=no' /> < script src = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.js' ></ script > < link href = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.css' rel = 'stylesheet' /> < link href = 'css/estilobase.css' rel = 'stylesheet' /> < script src = 'js/utils.js' ></ script > < script src = 'js/terremotos.js' ></ script > < script > var map ; function Init () { mapboxgl . accessToken = 'pk.eyJ1IjoiZ2lzbWFzdGVybTIiLCJhIjoiY2plZHhubTQxMTNoYzMza3Rqa3kxYTdrOCJ9.53B1E6mKD_EQOVb2Y0-SsA' ; map = new mapboxgl . Map ({ container : 'map' , style : 'mapbox://styles/mapbox/dark-v10' , center : [ 9.746 , 40.473 ], zoom : 5.5 , hash : true , pitch : 0 , attributionControl : false }); map . addControl ( new mapboxgl . AttributionControl ({ compact : true })); map . addControl ( new mapboxgl . NavigationControl ()); map . on ( \"load\" , function () { generarPeticionTerremotos (); addPopupToMap ( \"terremotos\" ); }); // fin load mapa map . on ( \"zoomend\" , function () { generarPeticionTerremotos (); }); map . on ( \"moveend\" , function () { generarPeticionTerremotos (); }); } //fin init </ script > </ head > < body onload = \"Init()\" > < div id = 'map' ></ div > </ body > </ html > \u00bfPodemos a\u00f1adir un color m\u00e1s para terremotos de m\u00e1s 8 magnitud? \u00bfPodemos cambiar dinamicamente el valor minMagnitude de la petici\u00f3n a GeoNames? Sabr\u00edas a\u00f1adir este geojson de placas tect\u00f3nicas como una capa m\u00e1s placas.geojson \u00bfA\u00f1adimos Titulo? \u00bfSubimos el ejemplo al GitHub? git pull git add . git commit -m \"terremotos\" git push","title":"6.2.Servicios web Geonames -Terremotos"},{"location":"6.2.visor_terremotos/#visualizador-de-terremotos","text":"Atencion!!","title":"Visualizador de terremotos"},{"location":"6.2.visor_terremotos/#paso-1-servicio-geonames","text":"Geonames.org Buscamos el servicio de terremotos y cu\u00e1l es su implementaci\u00f3n https://www.geonames.org/export/JSON-webservices.html#earthquakesJSON","title":"Paso 1: Servicio GeoNames"},{"location":"6.2.visor_terremotos/#paso-2","text":"Crearemos el archivo terremotos.html A\u00f1adimos c\u00f3digo con mapa base \"dark\" < html > < head > < meta charset = 'utf-8' /> < title > Terremotos </ title > < meta name = 'viewport' content = 'initial-scale=1,maximum-scale=1,user-scalable=no' /> < script src = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.js' ></ script > < link href = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.css' rel = 'stylesheet' /> < link href = 'css/estilobase.css' rel = 'stylesheet' /> < script > var map ; function init () { mapboxgl . accessToken = \"pk.eyJ1IjoiZ2lzbWFzdGVybTIiLCJhIjoiY2plZHhubTQxMTNoYzMza3Rqa3kxYTdrOCJ9.53B1E6mKD_EQOVb2Y0-SsA\" ; map = new mapboxgl . Map ({ container : 'map' , style : 'mapbox://styles/mapbox/dark-v10' , center : [ 9.746 , 40.473 ], zoom : 5.5 , hash : true , pitch : 0 , attributionControl : false }); map . addControl ( new mapboxgl . AttributionControl ({ compact : true })); map . addControl ( new mapboxgl . NavigationControl ()); } //fin init </ script > </ head > < body onload = \"init()\" > < div id = 'map' ></ div > </ body > </ html >","title":"Paso 2:"},{"location":"6.2.visor_terremotos/#paso-3creamos-archivo-js","text":"Dentro de nuestro directorio /geoweb/js/ creamos el archivo terremotos.js , d\u00f3nde crearemos funciones especificas de nuestro proyect Dentro de nuestro directorio /geoweb/js/ creamos el archivo utils.js , d\u00f3nde crearemos funciones gen\u00e9ricas que puedan ser reutilizadas","title":"Paso 3:Creamos archivo JS"},{"location":"6.2.visor_terremotos/#paso-4-anadimos-js","text":"A\u00f1adimos estos archivos (de momento vac\u00edos) a terremotos.html < html > < head > < meta charset = 'utf-8' /> < title > Terremotos </ title > < meta name = 'viewport' content = 'initial-scale=1,maximum-scale=1,user-scalable=no' /> < script src = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.js' ></ script > < link href = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.css' rel = 'stylesheet' /> < link href = 'css/estilobase.css' rel = 'stylesheet' /> < script src = 'js/utils.js' ></ script > < script src = 'js/terremotos.js' ></ script > < script > var map ; function init () { mapboxgl . accessToken = \"pk.eyJ1IjoiZ2lzbWFzdGVybTIiLCJhIjoiY2plZHhubTQxMTNoYzMza3Rqa3kxYTdrOCJ9.53B1E6mKD_EQOVb2Y0-SsA\" ; map = new mapboxgl . Map ({ container : 'map' , style : 'mapbox://styles/mapbox/dark-v10' , center : [ 9.746 , 40.473 ], zoom : 5.5 , hash : true , pitch : 0 , attributionControl : false }); map . addControl ( new mapboxgl . AttributionControl ({ compact : true })); map . addControl ( new mapboxgl . NavigationControl ()); } //fin init </ script > </ head > < body onload = \"init()\" > < div id = 'map' ></ div > </ body > </ html >","title":"Paso 4. A\u00f1adimos JS"},{"location":"6.2.visor_terremotos/#paso-5-funcion-generica-get","text":"Dentro del archivo js/utils.js vamos a crear una funci\u00f3n as\u00edconcrona gen\u00e9rica para enviar y recibir respuesta de cualquier servicio GET que retorne un JSON async function : Es un funcion en JavaScript que retornar\u00e1 un valor s\u00f3lo cuando haya recibido la respuesta fetch : La API Fetch proporciona una interfaz JavaScript para acceder y manipular partes del canal HTTP, tales como peticiones y respuestas https://developer.mozilla.org/es/docs/Web/API/Fetch_API/Utilizando_Fetch . Para hacer peticiones tipo Ajax async function enviarPeticion ( url ) { return fetch ( url ) . then ( function ( response ) { return response . json () }) . then ( function ( data ) { //console.log('Respuesta', data); return data ; }). catch ( function ( error ) { console . log ( 'Error' , error ); alert ( \"Error peticion\" ); return null ; }); }","title":"Paso 5: funci\u00f3n gen\u00e9rica GET"},{"location":"6.2.visor_terremotos/#paso-6-convertir-la-respuesta-de-json-geonames-al-formato-geojson","text":"Creamos una funci\u00f3n para convertir la respuesta de JSON GeoNames al formato GeoJSON en terremotos.js Ejemplo peticion: https://secure.geonames.org/earthquakesJSON?north=44.1&south=-9.9&east=-22.4&west=55.2&username=masterupc Estructura respuesta GeoNames { \"earthquakes\" :[ { \"datetime\" : \"2011-03-11 04:46:23\" , \"depth\" : 24.4 , \"lng\" : 142.369 , \"src\" : \"us\" , \"eqid\" : \"c0001xgp\" , \"magnitude\" : 8.8 , \"lat\" : 38.322 }, { \"datetime\" : \"2012-04-11 06:38:37\" , \"depth\" : 22.9 , \"lng\" : 93.0632 , \"src\" : \"us\" , \"eqid\" : \"c000905e\" , \"magnitude\" : 8.6 , \"lat\" : 2.311 }, { \"datetime\" : \"2007-09-12 09:10:26\" , \"depth\" : 30 , \"lng\" : 101.3815 , \"src\" : \"us\" , \"eqid\" : \"2007hear\" , \"magnitude\" : 8.4 , \"lat\" : -4.5172 } ] } Miramos web https://geojson.io c\u00f3mo \u00e9s un GeoJSON Deber\u00edamos convertir con c\u00f3digo el JSON de GeoNames a un GeoJSon de puntos { \"type\" : \"FeatureCollection\" , \"features\" : [ { \"type\" : \"Feature\" , \"properties\" : { \"datetime\" : \"2011-03-11 04:46:23\" , \"magnitude\" : 8.8 }, \"geometry\" : { \"type\" : \"Point\" , \"coordinates\" : [ 142.369 , 38.322 ] } }, { \"type\" : \"Feature\" , \"properties\" : { \"datetime\" : \"2012-04-11 06:38:37\" , \"magnitude\" : 8.6 }, \"geometry\" : { \"type\" : \"Point\" , \"coordinates\" : [ 93.0632 , 2.311 ] } }, { \"type\" : \"Feature\" , \"properties\" : { \"datetime\" : \"2007-09-12 09:10:26\" , \"magnitude\" : 8.4 }, \"geometry\" : { \"type\" : \"Point\" , \"coordinates\" : [ 101.3815 , -4.5172 ] } } ] } Si tuvieramos que realizar reproyecciones o operaciones espaciales http://proj4js.org/ https://turfjs.org/","title":"Paso 6 :convertir la respuesta de JSON GeoNames al formato GeoJSON"},{"location":"6.2.visor_terremotos/#paso-61-funcion-terremotosgeonamestogeojson","text":"Creamos dentro de /js/terremotos.js la funcion terremotosGeonamesToGeoJSON function terremotosGeonamesToGeoJSON ( respuestaGeonames ){ var geoJSON = { \"type\" : \"FeatureCollection\" , \"features\" : [] }; for ( var i = 0 ; i < respuestaGeonames . earthquakes . length ; i ++ ){ geoJSON . features . push ( { \"type\" : \"Feature\" , \"properties\" : { \"magnitude\" : respuestaGeonames . earthquakes [ i ]. magnitude , \"datetime\" : respuestaGeonames . earthquakes [ i ]. datetime }, \"geometry\" : { \"type\" : \"Point\" , \"coordinates\" : [ respuestaGeonames . earthquakes [ i ]. lng , respuestaGeonames . earthquakes [ i ]. lat ] } } ); } //fin loop return geoJSON ; } //fin funcion","title":"Paso 6.1 : Funci\u00f3n terremotosGeonamesToGeoJSON()"},{"location":"6.2.visor_terremotos/#paso-7-funcion-generarpeticionterremotos","text":"Vamos a a\u00f1adir otra funcion dentro de terremotos.js para: Capturar las coordenadas de mapa (BoundigBox) Crear la petici\u00f3n a Geonames Enviar petici\u00f3n Capturar la respuesta y convertirla a GeoJSON Generar Source y Layer de Mapbox Style y a\u00f1adir datos Justo debajo toda de la funci\u00f3n terremotosGeonamesToGeoJSON() a\u00f1adimos\" function generarPeticionTerremotos () { var peticion = 'https://secure.geonames.org/earthquakesJSON?' + 'north=' + map . getBounds (). _ne . lat + '&' + 'south=' + map . getBounds (). _sw . lat + '&' + 'east=' + map . getBounds (). _ne . lng + '&' + 'west=' + map . getBounds (). _sw . lng + '&' + 'maxRows=50&' + 'minMagnitude=5&' + 'username=masterupc&' ; //date : 'yyyy-MM-d enviarPeticion ( peticion ). then ( function ( respuestaGeonames ) { var geoJSON = terremotosGeonamesToGeoJSON ( respuestaGeonames ); if ( ! map . getSource ( \"terremotos_source\" )) { map . addSource ( \"terremotos_source\" , { type : \"geojson\" , data : geoJSON }); map . addLayer ({ 'id' : 'terremotos' , 'type' : 'circle' , 'source' : 'terremotos_source' , 'paint' : { 'circle-color' : [ 'interpolate' , [ 'linear' ], [ 'get' , 'magnitude' ], 3 , '#ebe709' , 5 , '#eb1809' , 7 , '#ef4bf2' , ], 'circle-opacity' : 0.75 , 'circle-radius' : [ 'interpolate' , [ 'linear' ], [ 'get' , 'magnitude' ], 3 , 8 , 5 , 16 , 8 , 32 ] } }); map . addLayer ({ 'id' : 'terremotos-textos' , 'type' : 'symbol' , 'source' : 'terremotos_source' , 'layout' : { 'text-field' : [ 'format' , [ 'get' , 'magnitude' ], ], 'text-size' : 10 }, 'paint' : { 'text-color' : 'rgba(255,255,255,1)' } }); } else { map . getSource ( \"terremotos_source\" ). setData ( geoJSON ); } }); } // fin funcion","title":"Paso 7 : Funci\u00f3n generarPeticionTerremotos()"},{"location":"6.2.visor_terremotos/#paso-8la-funcion-generarpeticionterremotos","text":"La funci\u00f3n generarPeticionTerremotos() \u00e9s la funci\u00f3n principal que necesitamos que se ejecute: Al cargar el mapa (evento load ) Cada vez que me muevo por el mapa (eventos moveend y zoomend ) < html > < head > < meta charset = 'utf-8' /> < title > Terremotos </ title > < meta name = 'viewport' content = 'initial-scale=1,maximum-scale=1,user-scalable=no' /> < script src = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.js' ></ script > < link href = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.css' rel = 'stylesheet' /> < link href = 'css/estilobase.css' rel = 'stylesheet' /> < script src = 'js/utils.js' ></ script > < script src = 'js/terremotos.js' ></ script > < script > var map ; function Init () { mapboxgl . accessToken = 'pk.eyJ1IjoiZ2lzbWFzdGVybTIiLCJhIjoiY2plZHhubTQxMTNoYzMza3Rqa3kxYTdrOCJ9.53B1E6mKD_EQOVb2Y0-SsA' ; map = new mapboxgl . Map ({ container : 'map' , style : 'mapbox://styles/mapbox/dark-v10' , center : [ 9.746 , 40.473 ], zoom : 5.5 , hash : true , pitch : 0 , attributionControl : false }); map . addControl ( new mapboxgl . AttributionControl ({ compact : true })); map . addControl ( new mapboxgl . NavigationControl ()); map . on ( \"load\" , function () { generarPeticionTerremotos (); }); // fin load mapa map . on ( \"zoomend\" , function () { generarPeticionTerremotos (); }); map . on ( \"moveend\" , function () { generarPeticionTerremotos (); }); } //fin init </ script > </ head > < body onload = \"Init()\" > < div id = 'map' ></ div > </ body > </ html >","title":"Paso 8:La funci\u00f3n generarPeticionTerremotos()"},{"location":"6.2.visor_terremotos/#paso-9funcion-para-generar-popups","text":"Dentro del archivo utils.js a\u00f1adimos una funci\u00f3n para ense\u00f1ar popup, pero NO al hacer click sino simplemente al passar por encima var popup = new mapboxgl . Popup ({ closeButton : false , closeOnClick : false }); function addPopupToMap ( nombreCapa ) { map . on ( 'mousemove' , nombreCapa , function ( e ) { var text = \"\" ; //console.info(e); for ( key in e . features [ 0 ]. properties ) { text += \"<b>\" + key + \"</b>:\" + e . features [ 0 ]. properties [ key ] + \"<br>\" ; } popup . setLngLat ( e . lngLat ) . setHTML ( text ) . addTo ( map ); }); map . on ( 'mouseenter' , nombreCapa , function () { map . getCanvas (). style . cursor = 'pointer' ; }); map . on ( 'mouseleave' , nombreCapa , function () { map . getCanvas (). style . cursor = '' ; popup . remove (); }); } // fin funcion","title":"Paso 9:funci\u00f3n para generar popups"},{"location":"6.2.visor_terremotos/#paso-10-llamamos-a-la-funcion-addpopuptomap","text":"Llamamos a la funcion addPopupToMap() pasando el nombre de nuestra capa activa: < html > < head > < meta charset = 'utf-8' /> < title > Terremotos </ title > < meta name = 'viewport' content = 'initial-scale=1,maximum-scale=1,user-scalable=no' /> < script src = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.js' ></ script > < link href = 'https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.css' rel = 'stylesheet' /> < link href = 'css/estilobase.css' rel = 'stylesheet' /> < script src = 'js/utils.js' ></ script > < script src = 'js/terremotos.js' ></ script > < script > var map ; function Init () { mapboxgl . accessToken = 'pk.eyJ1IjoiZ2lzbWFzdGVybTIiLCJhIjoiY2plZHhubTQxMTNoYzMza3Rqa3kxYTdrOCJ9.53B1E6mKD_EQOVb2Y0-SsA' ; map = new mapboxgl . Map ({ container : 'map' , style : 'mapbox://styles/mapbox/dark-v10' , center : [ 9.746 , 40.473 ], zoom : 5.5 , hash : true , pitch : 0 , attributionControl : false }); map . addControl ( new mapboxgl . AttributionControl ({ compact : true })); map . addControl ( new mapboxgl . NavigationControl ()); map . on ( \"load\" , function () { generarPeticionTerremotos (); addPopupToMap ( \"terremotos\" ); }); // fin load mapa map . on ( \"zoomend\" , function () { generarPeticionTerremotos (); }); map . on ( \"moveend\" , function () { generarPeticionTerremotos (); }); } //fin init </ script > </ head > < body onload = \"Init()\" > < div id = 'map' ></ div > </ body > </ html > \u00bfPodemos a\u00f1adir un color m\u00e1s para terremotos de m\u00e1s 8 magnitud? \u00bfPodemos cambiar dinamicamente el valor minMagnitude de la petici\u00f3n a GeoNames? Sabr\u00edas a\u00f1adir este geojson de placas tect\u00f3nicas como una capa m\u00e1s placas.geojson \u00bfA\u00f1adimos Titulo? \u00bfSubimos el ejemplo al GitHub? git pull git add . git commit -m \"terremotos\" git push","title":"Paso 10: Llamamos a la funcion addPopupToMap()"},{"location":"7.1.mallas_discretas_algoritmos/","text":"Mallas discretas y algoritmos en JS El creciente inter\u00e9s y facilidad para acceder a plataformas de Machine Learning, el uso generalizado del lenguage JavaScript y la captura masiva de datos geolocalizados permiten que cada vez existan m\u00e1s aplicaciones de webmaping que ejecutan y visualizan complejos algoritmos antes, solo accessible en servidor y en \u00e0mbitos cientificos. Los modelos y algoritmos espaciales se han convertido en modelo de negocio Temario Mallas discretas y algoritmos en JS Machine Learning Algoritmos en JS Mallas discretas Ejemplos de aplicaciones Ver presentaci\u00f3n formato PPTX Ver presentaci\u00f3n formato PDF Video 7","title":"7.1.Mallas discretas y algoritmos en JS"},{"location":"7.1.mallas_discretas_algoritmos/#mallas-discretas-y-algoritmos-en-js","text":"El creciente inter\u00e9s y facilidad para acceder a plataformas de Machine Learning, el uso generalizado del lenguage JavaScript y la captura masiva de datos geolocalizados permiten que cada vez existan m\u00e1s aplicaciones de webmaping que ejecutan y visualizan complejos algoritmos antes, solo accessible en servidor y en \u00e0mbitos cientificos. Los modelos y algoritmos espaciales se han convertido en modelo de negocio Temario Mallas discretas y algoritmos en JS Machine Learning Algoritmos en JS Mallas discretas Ejemplos de aplicaciones","title":"Mallas discretas y algoritmos en JS"},{"location":"7.1.mallas_discretas_algoritmos/#ver-presentacion-formato-pptx","text":"","title":"Ver presentaci\u00f3n formato PPTX"},{"location":"7.1.mallas_discretas_algoritmos/#ver-presentacion-formato-pdf","text":"Video 7","title":"Ver presentaci\u00f3n formato PDF"},{"location":"7.2.visualizacion_con_kepler_gl/","text":"Descripci\u00f3n Kepler.gl es una aplicaci\u00f3n desarrollada por Uber, en un principio para uso interno, para analizar y visualizar sus propios datos. Esta basada en WebGL y pensada para la exploraci\u00f3n visual de conjuntos de datos de geolocalizaci\u00f3s a gran escala. Kepler.gl est\u00e1 construido en la parte superior de Deck.gl, la libreria de visualizaci\u00f3n tambi\u00e9n desarrollada por Uber. kepler.gl puede representar millones de puntos que representan miles de viajes y realizar agregaciones espaciales, bsadas por ejemplo en hex\u00e1gonos. Tambi\u00e9n es possible desarrollar sobre Kepler.gl ya que existe una API basada en el framework de JavaScript React + Redux Web https://kepler.gl/ Aplicaci\u00f3n https://kepler.gl/demo P\u00e1gina refer\u00e9ncia Kepler GL (React JS + Redux) https://github.com/keplergl/kepler.gl/blob/master/docs/api-reference/README.md GitHUB https://github.com/keplergl Tutoriales https://github.com/keplergl/kepler.gl/blob/master/docs/user-guides/a-introduction.md https://github.com/keplergl/kepler.gl/blob/master/docs/user-guides/j-get-started.md Videos https://www.youtube.com/watch?v=b8wKEY4dlvg https://www.youtube.com/watch?v=y-SA6bOv4Eo https://www.youtube.com/watch?v=i2fRN4e2s0A Ejercicio de visualizaci\u00f3n con Kepler.gl Queremos analizar los accidentes de coche en la ciudad de Barcelona en el a\u00f1o 2019 Para m\u00e1s detalle ver Videos 8 y 9 Preparaci\u00f3n datos Origen dataset CSV de Personas involucradas en accidentes gestionados por la Guardia Urbana en la ciudad de Barcelona de OpenData BCN Este dataset contiene los accidentes, con coordenadas, de la ciudad de Barcelona en el a\u00f1o 2019. Las fechas de los accidentes estan separadas por A\u00f1o, Mes, Dias y Horas en diferentes campos.C\u00f3mo Keplerg trabaja muy bien con fechas tipo TIMESTAMP, hemos decidido a\u00f1adir un nuevo campo, llamado timestamp , d\u00f3nde hemos concatenado los campos de A\u00f1o, Mes, D\u00eda y Hora Con LibreOffice seria =CONCATENATE(L2;\"-\";M2;\"-\";O2;\"T\";P2;\":00\") Descargamos el archivo editado 2019_accidents_tipus_gu_bcn_.csv Paso1 : A\u00f1adir datos el mapa Vamos a https://kepler.gl/demo Cargamos 2019_accidents_tipus_gu_bcn_TIME.csv A\u00f1adimos csv Paso2 : A\u00f1adimos estilo pr\u00f3pio Base map --> add Map Style --> Paste style url Podemos a\u00f1adir un estilo de https://openicgc.github.io/ (Apartado:\"Estils \u00e0mbit mundial per Vector Tiles\") Podemos a\u00f1adir estilo propio de Mapbox + nuestro AccessToken Paso2 : A\u00f1adir capas Para m\u00e1s detalle ver Video 9 A\u00f1adimos tres capas de tipo Punto , Hexbin , HeatMap Ejemplo para Puntos -nombre capa \"Accidentes\"- Ejemplo para HexBin -nombre capa \"Agrupaci\u00f3n\"- Ejemplo para HeatMap -nombre capa \"Concentraci\u00f3n\"- Dejamos solo visible capa \"Agrupaci\u00f3n\" y utilizamos bot\u00f3n 3D para dar prespectiva al mapa Paso3 : A\u00f1adir filtros Permite filtrar los datos de todas las capa asociadas a un dataset Por ejemplo por: Por dia de la semana --> Campo \"Dia_semana\" Por hora del dia --> Campo \"Hora_dia\" ** Por barra temporal --> Campo \"timestamp\" Paso4 : Definir \"tooltips\" Paso5 : Guardar y exporta a HTML Seleccionaremos Map Format --> HTML Mapbox access token --> Pegaremos nuestro access token Map Mode --> Allow users to edit the map Guardaremos el archivo c\u00f3mo accidentes.html dentro de nuestro proyecto geoweb Podemos tambi\u00e9n guardar en formato JSON, c\u00f3mo si fuera un archivo de proyecto que podremos volver a cargar como \"dataset\" en https://kepler.gl/demo . Aqu\u00ed teneis el mapa creado accidentes.json Paso 6 : Subir a GitHub Subimos el ejemplo y editamos index.html a GitHub git pull git add . git commit -m \"Mapa KeplerGl\" git push origin main Pr\u00e1ctica Comparar accidentes a\u00f1os 2018-2019 Tenemos tambi\u00e9n los accidentes del 2018 2018_accidents_tipus_gu_bcn_.csv Podrias a\u00f1adir este dataset a nuestro mapa y crear sus correspondientes capas para 2018 Despu\u00e9s puedes activar la vista Dual y comparar a\u00f1os Vuelve a exportar el mapa como \"accidentes-comparador.html\" y s\u00fabelo al GitHub Una buena pr\u00e1ctica final seria comparar con 2020 a\u00f1o de la pandemia","title":"7.2.Visualizaci\u00f3n y publicaci\u00f3n con Kepler GL"},{"location":"7.2.visualizacion_con_kepler_gl/#descripcion","text":"Kepler.gl es una aplicaci\u00f3n desarrollada por Uber, en un principio para uso interno, para analizar y visualizar sus propios datos. Esta basada en WebGL y pensada para la exploraci\u00f3n visual de conjuntos de datos de geolocalizaci\u00f3s a gran escala. Kepler.gl est\u00e1 construido en la parte superior de Deck.gl, la libreria de visualizaci\u00f3n tambi\u00e9n desarrollada por Uber. kepler.gl puede representar millones de puntos que representan miles de viajes y realizar agregaciones espaciales, bsadas por ejemplo en hex\u00e1gonos. Tambi\u00e9n es possible desarrollar sobre Kepler.gl ya que existe una API basada en el framework de JavaScript React + Redux","title":"Descripci\u00f3n"},{"location":"7.2.visualizacion_con_kepler_gl/#web","text":"https://kepler.gl/","title":"Web"},{"location":"7.2.visualizacion_con_kepler_gl/#aplicacion","text":"https://kepler.gl/demo","title":"Aplicaci\u00f3n"},{"location":"7.2.visualizacion_con_kepler_gl/#pagina-referencia-kepler-glreact-js-redux","text":"https://github.com/keplergl/kepler.gl/blob/master/docs/api-reference/README.md","title":"P\u00e1gina refer\u00e9ncia Kepler GL(React JS + Redux)"},{"location":"7.2.visualizacion_con_kepler_gl/#github","text":"https://github.com/keplergl","title":"GitHUB"},{"location":"7.2.visualizacion_con_kepler_gl/#tutoriales","text":"https://github.com/keplergl/kepler.gl/blob/master/docs/user-guides/a-introduction.md https://github.com/keplergl/kepler.gl/blob/master/docs/user-guides/j-get-started.md","title":"Tutoriales"},{"location":"7.2.visualizacion_con_kepler_gl/#videos","text":"https://www.youtube.com/watch?v=b8wKEY4dlvg https://www.youtube.com/watch?v=y-SA6bOv4Eo https://www.youtube.com/watch?v=i2fRN4e2s0A","title":"Videos"},{"location":"7.2.visualizacion_con_kepler_gl/#ejercicio-de-visualizacion-con-keplergl","text":"Queremos analizar los accidentes de coche en la ciudad de Barcelona en el a\u00f1o 2019 Para m\u00e1s detalle ver Videos 8 y 9","title":"Ejercicio de visualizaci\u00f3n con Kepler.gl"},{"location":"7.2.visualizacion_con_kepler_gl/#preparacion-datos","text":"Origen dataset CSV de Personas involucradas en accidentes gestionados por la Guardia Urbana en la ciudad de Barcelona de OpenData BCN Este dataset contiene los accidentes, con coordenadas, de la ciudad de Barcelona en el a\u00f1o 2019. Las fechas de los accidentes estan separadas por A\u00f1o, Mes, Dias y Horas en diferentes campos.C\u00f3mo Keplerg trabaja muy bien con fechas tipo TIMESTAMP, hemos decidido a\u00f1adir un nuevo campo, llamado timestamp , d\u00f3nde hemos concatenado los campos de A\u00f1o, Mes, D\u00eda y Hora Con LibreOffice seria =CONCATENATE(L2;\"-\";M2;\"-\";O2;\"T\";P2;\":00\") Descargamos el archivo editado 2019_accidents_tipus_gu_bcn_.csv","title":"Preparaci\u00f3n datos"},{"location":"7.2.visualizacion_con_kepler_gl/#paso1-anadir-datos-el-mapa","text":"Vamos a https://kepler.gl/demo Cargamos 2019_accidents_tipus_gu_bcn_TIME.csv A\u00f1adimos csv","title":"Paso1 : A\u00f1adir datos el mapa"},{"location":"7.2.visualizacion_con_kepler_gl/#paso2-anadimos-estilo-propio","text":"Base map --> add Map Style --> Paste style url Podemos a\u00f1adir un estilo de https://openicgc.github.io/ (Apartado:\"Estils \u00e0mbit mundial per Vector Tiles\") Podemos a\u00f1adir estilo propio de Mapbox + nuestro AccessToken","title":"Paso2 : A\u00f1adimos estilo pr\u00f3pio"},{"location":"7.2.visualizacion_con_kepler_gl/#paso2-anadir-capas","text":"Para m\u00e1s detalle ver Video 9 A\u00f1adimos tres capas de tipo Punto , Hexbin , HeatMap Ejemplo para Puntos -nombre capa \"Accidentes\"- Ejemplo para HexBin -nombre capa \"Agrupaci\u00f3n\"- Ejemplo para HeatMap -nombre capa \"Concentraci\u00f3n\"- Dejamos solo visible capa \"Agrupaci\u00f3n\" y utilizamos bot\u00f3n 3D para dar prespectiva al mapa","title":"Paso2 : A\u00f1adir capas"},{"location":"7.2.visualizacion_con_kepler_gl/#paso3-anadir-filtros","text":"Permite filtrar los datos de todas las capa asociadas a un dataset Por ejemplo por: Por dia de la semana --> Campo \"Dia_semana\" Por hora del dia --> Campo \"Hora_dia\" ** Por barra temporal --> Campo \"timestamp\"","title":"Paso3 : A\u00f1adir filtros"},{"location":"7.2.visualizacion_con_kepler_gl/#paso4-definir-tooltips","text":"","title":"Paso4 : Definir \"tooltips\""},{"location":"7.2.visualizacion_con_kepler_gl/#paso5-guardar-y-exporta-a-html","text":"Seleccionaremos Map Format --> HTML Mapbox access token --> Pegaremos nuestro access token Map Mode --> Allow users to edit the map Guardaremos el archivo c\u00f3mo accidentes.html dentro de nuestro proyecto geoweb Podemos tambi\u00e9n guardar en formato JSON, c\u00f3mo si fuera un archivo de proyecto que podremos volver a cargar como \"dataset\" en https://kepler.gl/demo . Aqu\u00ed teneis el mapa creado accidentes.json","title":"Paso5 : Guardar y exporta a HTML"},{"location":"7.2.visualizacion_con_kepler_gl/#paso-6-subir-a-github","text":"Subimos el ejemplo y editamos index.html a GitHub git pull git add . git commit -m \"Mapa KeplerGl\" git push origin main","title":"Paso 6 : Subir a GitHub"},{"location":"7.2.visualizacion_con_kepler_gl/#practica","text":"Comparar accidentes a\u00f1os 2018-2019 Tenemos tambi\u00e9n los accidentes del 2018 2018_accidents_tipus_gu_bcn_.csv Podrias a\u00f1adir este dataset a nuestro mapa y crear sus correspondientes capas para 2018 Despu\u00e9s puedes activar la vista Dual y comparar a\u00f1os Vuelve a exportar el mapa como \"accidentes-comparador.html\" y s\u00fabelo al GitHub Una buena pr\u00e1ctica final seria comparar con 2020 a\u00f1o de la pandemia","title":"Pr\u00e1ctica"},{"location":"8.1.turfjs/","text":"Web https://turfjs.org/ Documentaci\u00f3n https://github.com/Turfjs/turf/ Descripci\u00f3n Turf.js es una biblioteca de an\u00e1lisis y procesamiento de geodatos escrita en JavaScript. Proporciona una serie de herramientas y funciones para realizar an\u00e1lisis espaciales y geom\u00e9tricos en datos geogr\u00e1ficos, como puntos, l\u00edneas y pol\u00edgonos. Turf.js proporciona una amplia variedad de funciones para realizar an\u00e1lisis y procesamiento de geodatos. Algunas de las funciones m\u00e1s comunes incluyen: turf.distance: calcula la distancia entre dos puntos en un mapa. turf.bearing: calcula la direcci\u00f3n en grados entre dos puntos en un mapa. turf.center: encuentra el centro de un conjunto de puntos o un pol\u00edgono. turf.area: calcula la superficie de un pol\u00edgono. turf.length: calcula la longitud de una l\u00ednea o el per\u00edmetro de un pol\u00edgono. turf.nearestPoint: encuentra el punto m\u00e1s cercano a otro punto en un conjunto de puntos. turf.buffer: crea un \u00e1rea circular alrededor de un punto dado. turf.convex: calcula el pol\u00edgono convexo m\u00e1s peque\u00f1o que contiene un conjunto de puntos. turf.intersect: determina si dos pol\u00edgonos o l\u00edneas se intersectan. ... Hasta unas 100 funciones espaciales!! Utilza GeoJson para encapsular las geometrias \u00bfC\u00f3mo empezar? Para trabajar con Turf.js tendremos llamar a la libreria de esta forma <script src=\"https://cdn.jsdelivr.net/npm/@turf/turf@6.5.0/turf.min.js\"></script> Ejemplo de uso en turf, turf.nearest La funci\u00f3n turf.nearest toma dos argumentos: un punto de referencia y un conjunto de puntos. Devuelve el punto m\u00e1s cercano del conjunto de puntos al punto de referencia. Aqu\u00ed hay un ejemplo de c\u00f3mo obtener los cinco puntos m\u00e1s cercanos a un punto de referencia: const point = turf . point ([ - 80.6635 , 35.0539 ]); const points = turf . points ([[ - 80.6635 , 35.0539 ], [ - 80.6650 , 35.0529 ], [ - 80.6650 , 35.0550 ], [ - 80.6640 , 35.0562 ], [ - 80.6635 , 35.0580 ], [ - 80.6630 , 35.0595 ], [ - 80.6620 , 35.0510 ] ]); const nearestPoints = points . features . slice ( 0 , 5 ). map ( point => turf . nearest ( point , points )); console . log ( nearestPoints ); En este ejemplo, se usa slice para obtener los primeros cinco elementos del conjunto de puntos y luego se usa map para aplicar turf.nearest a cada uno de ellos. Esto devuelve una matriz de los cinco puntos m\u00e1s cercanos al punto de referencia","title":"8.1.Turf JS"},{"location":"8.1.turfjs/#web","text":"https://turfjs.org/","title":"Web"},{"location":"8.1.turfjs/#documentacion","text":"https://github.com/Turfjs/turf/","title":"Documentaci\u00f3n"},{"location":"8.1.turfjs/#descripcion","text":"Turf.js es una biblioteca de an\u00e1lisis y procesamiento de geodatos escrita en JavaScript. Proporciona una serie de herramientas y funciones para realizar an\u00e1lisis espaciales y geom\u00e9tricos en datos geogr\u00e1ficos, como puntos, l\u00edneas y pol\u00edgonos. Turf.js proporciona una amplia variedad de funciones para realizar an\u00e1lisis y procesamiento de geodatos. Algunas de las funciones m\u00e1s comunes incluyen: turf.distance: calcula la distancia entre dos puntos en un mapa. turf.bearing: calcula la direcci\u00f3n en grados entre dos puntos en un mapa. turf.center: encuentra el centro de un conjunto de puntos o un pol\u00edgono. turf.area: calcula la superficie de un pol\u00edgono. turf.length: calcula la longitud de una l\u00ednea o el per\u00edmetro de un pol\u00edgono. turf.nearestPoint: encuentra el punto m\u00e1s cercano a otro punto en un conjunto de puntos. turf.buffer: crea un \u00e1rea circular alrededor de un punto dado. turf.convex: calcula el pol\u00edgono convexo m\u00e1s peque\u00f1o que contiene un conjunto de puntos. turf.intersect: determina si dos pol\u00edgonos o l\u00edneas se intersectan. ... Hasta unas 100 funciones espaciales!! Utilza GeoJson para encapsular las geometrias","title":"Descripci\u00f3n"},{"location":"8.1.turfjs/#como-empezar","text":"Para trabajar con Turf.js tendremos llamar a la libreria de esta forma <script src=\"https://cdn.jsdelivr.net/npm/@turf/turf@6.5.0/turf.min.js\"></script>","title":"\u00bfC\u00f3mo empezar?"},{"location":"8.1.turfjs/#ejemplo-de-uso-en-turf-turfnearest","text":"La funci\u00f3n turf.nearest toma dos argumentos: un punto de referencia y un conjunto de puntos. Devuelve el punto m\u00e1s cercano del conjunto de puntos al punto de referencia. Aqu\u00ed hay un ejemplo de c\u00f3mo obtener los cinco puntos m\u00e1s cercanos a un punto de referencia: const point = turf . point ([ - 80.6635 , 35.0539 ]); const points = turf . points ([[ - 80.6635 , 35.0539 ], [ - 80.6650 , 35.0529 ], [ - 80.6650 , 35.0550 ], [ - 80.6640 , 35.0562 ], [ - 80.6635 , 35.0580 ], [ - 80.6630 , 35.0595 ], [ - 80.6620 , 35.0510 ] ]); const nearestPoints = points . features . slice ( 0 , 5 ). map ( point => turf . nearest ( point , points )); console . log ( nearestPoints ); En este ejemplo, se usa slice para obtener los primeros cinco elementos del conjunto de puntos y luego se usa map para aplicar turf.nearest a cada uno de ellos. Esto devuelve una matriz de los cinco puntos m\u00e1s cercanos al punto de referencia","title":"Ejemplo de uso en turf, turf.nearest"},{"location":"8.2.visor_farmacias/","text":"Buscador de Farmacias de Barcelona ciudad 1 2 3 4 5 6 7 Nos han encargado realizar un mapa para poder localizar y buscar las farmacias de Barcelona y para cada farm \u00e1 cia poder visualizar las cinco m \u00e1 s cercanas * Los datos de farmacias se pueden obtener de la web de Datos Abiertos de Barcelona [ https : // opendata - ajuntament . barcelona . cat / data / es / dataset / sanitat - farmacies ] ( https : // opendata - ajuntament . barcelona . cat / data / es / dataset / sanitat - farmacies ) { target = _blank } * Podemos transformar los datos ** GeoJson ** y cargalos com un source en Mapbox GlJs * Podemos utilizar el control de ** mapbox - gl - geocoder ** para buscar en GeoJson de for local Ejemplo buscador de Farmacias Paso 1:Visualizar datos Dentro de /geoweb/datos/farmacias.geojson ya tenemos los datos descargados y convertidos a GeoJson. Podemos visualizarlos con https://geojson.io/#map=2/0/20 por ejemplo Convertir a GeoJson El archivo de farmacias lo hemos descargado del portal https://opendata-ajuntament.barcelona.cat/data/es/dataset/sanitat-farmacies en formato CSV y lo hemos transformado a GeoJSON Para ver c\u00f3mo transformar y reproyectar un archivo CSV a GeoJson con Qgis mira el video 7 Paso 2: Crear archivo farmacias.html Abrimos archivo mapabase.html y guardamos como File-->Save as farmacias.html A\u00f1adimos un titulo y la funci\u00f3n inicial initMapaFarmacias() de nuestro proyecto Llamamos a la funci\u00f3n initMapaFarmacias() en el body onLoad < html lang = \"es\" > < head > < title > Farmacias </ title > < meta charset = \"utf-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < meta name = \"author\" content = \"autor\" /> < meta name = \"description\" content = \"descripci\u00f3n p\u00e1gina\" /> < meta name = \"robots\" content = \"index,follow\" /> < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.7.1/dist/leaflet.css\" /> < script src = \"https://unpkg.com/leaflet@1.7.1/dist/leaflet.js\" ></ script > < link rel = \"stylesheet\" href = \"css/estilobase.css\" /> < script src = \"js/mapabase.js\" ></ script > < script > function initMapaFarmacias (){ init (); } </ script > </ head > < body onLoad = \"initMapaFarmacias()\" > < div id = \"map\" > </ div > </ body > </ html > Paso 3:A\u00f1adir plugin A\u00f1adimos Plugins al proyecto Podemos descargar plugins del directorio /dist y guardarlos en nuestros directorios /js o /css Tambi\u00e9n podemos utilizar la URL directamente ( nuestro caso ) < html lang = \"es\" > < head > < title > Farmacias </ title > < meta charset = \"utf-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < meta name = \"author\" content = \"autor\" /> < meta name = \"description\" content = \"descripci\u00f3n p\u00e1gina\" /> < meta name = \"robots\" content = \"index,follow\" /> < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.7.1/dist/leaflet.css\" /> < script src = \"https://unpkg.com/leaflet@1.7.1/dist/leaflet.js\" ></ script > < script src = \"https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js\" ></ script > < link rel = \"stylesheet\" href = \"css/estilobase.css\" /> < script src = \"js/mapabase.js\" ></ script > < script > function initMapaFarmacias (){ init (); } </ script > </ head > < body onLoad = \"initMapaFarmacias()\" > < div id = \"map\" > </ div > </ body > </ html > Paso 4:Cargamos GeoJson Farmacias Miramos documentaci\u00f3n Leaflet-Ajax plugin https://github.com/calvinmetcalf/leaflet-ajax Miramos referencia L.Geojson https://leafletjs.com/reference-1.7.1.html#geojson Dentro de nuestro directorio /geoweb/js/ creamos el archivo farmacias.js var layerFarmacias ; var urlFarmacias = \"datos/farmacias.geojson\" ; function addDatosFarmacias () { layerFarmacias = new L . GeoJSON . AJAX ( urlFarmacias , { onEachFeature : function ( feature , layer ) { popupContent = \"<b>\" + feature . properties . EQUIPAMENT + \"</b>\" + \"<br>\" + feature . properties . TIPUS_VIA + \". \" + feature . properties . NOM_CARRER + \" \" + feature . properties . NUM_CARRER_1 + \"</b>\" ; layer . bindPopup ( popupContent ); }, pointToLayer : function ( feature , latlng ) { return L . circleMarker ( latlng , { radius : 6 , fillColor : \"#00ff00\" , color : \"#ffffff\" , weight : 3 , opacity : 1 , fillOpacity : 0.8 }); } }). addTo ( map ); map . setView ([ 41.399733 , 2.168598 ], 13 ); // controlCapas.addOverlay(layerFarmacias,\"Farmacias\"); } //fin funcion Paso 5: A\u00f1adimos farmacias.js al archivo farmacias.html Llamamos funcion addDatosFarmacias() < html lang = \"es\" > < head > < title > Farmacias </ title > < meta charset = \"utf-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < meta name = \"author\" content = \"autor\" /> < meta name = \"description\" content = \"descripci\u00f3n p\u00e1gina\" /> < meta name = \"robots\" content = \"index,follow\" /> < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.7.1/dist/leaflet.css\" /> < script src = \"https://unpkg.com/leaflet@1.7.1/dist/leaflet.js\" ></ script > < script src = \"https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js\" ></ script > < link rel = \"stylesheet\" href = \"css/estilobase.css\" /> < script src = \"js/mapabase.js\" ></ script > < script src = \"js/farmacias.js\" ></ script > < script > function initMapaFarmacias (){ init (); addDatosFarmacias (); } </ script > </ head > < body onLoad = \"initMapaFarmacias()\" > < div id = \"map\" > </ div > </ body > </ html > Visualizamos mapa Paso 6:A\u00f1adir opci\u00f3n para buscar Farmacias Miramos documentaci\u00f3n Leaflet-Search plugin https://github.com/stefanocudini/leaflet-search A\u00f1adimos URL plugin < html lang = \"es\" > < head > < title > Farmacias </ title > < meta charset = \"utf-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < meta name = \"author\" content = \"autor\" /> < meta name = \"description\" content = \"descripci\u00f3n p\u00e1gina\" /> < meta name = \"robots\" content = \"index,follow\" /> < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.7.1/dist/leaflet.css\" /> < script src = \"https://unpkg.com/leaflet@1.7.1/dist/leaflet.js\" ></ script > < script src = \"https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js\" ></ script > < script src = \"https://labs.easyblog.it/maps/leaflet-search/src/leaflet-search.js\" ></ script > < link rel = \"stylesheet\" href = \"https://labs.easyblog.it/maps/leaflet-search/src/leaflet-search.css\" /> < link rel = \"stylesheet\" href = \"css/estilobase.css\" /> < script src = \"js/mapabase.js\" ></ script > < script src = \"js/farmacias.js\" ></ script > < script > function initMapaFarmacias (){ init (); addDatosFarmacias (); } </ script > </ head > < body onLoad = \"initMapaFarmacias()\" > < div id = \"map\" > </ div > </ body > </ html > A\u00f1adimos el control dentro de la funci\u00f3n addDatosFarmacias() de farmacias.js var layerFarmacias ; var urlFarmacias = \"datos/farmacias.geojson\" ; function addDatosFarmacias () { layerFarmacias = new L . GeoJSON . AJAX ( urlFarmacias , { onEachFeature : function ( feature , layer ) { popupContent = \"<b>\" + feature . properties . EQUIPAMENT + \"</b>\" + \"<br>\" + feature . properties . TIPUS_VIA + \". \" + feature . properties . NOM_CARRER + \" \" + feature . properties . NUM_CARRER_1 + \"</b>\" ; layer . bindPopup ( popupContent ); }, pointToLayer : function ( feature , latlng ) { return L . circleMarker ( latlng , { radius : 6 , fillColor : \"#00ff00\" , color : \"#ffffff\" , weight : 3 , opacity : 1 , fillOpacity : 0.8 }); } }). addTo ( map ); map . setView ([ 41.399733 , 2.168598 ], 13 ); // controlCapas.addOverlay(layerFarmacias,\"Farmacias\"); var searchControl = new L . Control . Search ({ layer : layerFarmacias , initial : false , propertyName : 'EQUIPAMENT' , circleLocation : true , moveToLocation : function ( latlng ) { map . setView ( latlng , 17 ); } }); searchControl . on ( 'search:locationfound' , function ( e ) { e . layer . openPopup (); }); map . addControl ( searchControl ); } //fin funcion Probamos visor y buscamos farm\u00e1cias Paso 7: \u00bfA\u00f1adimos el plugin de Cluster? Este es uno de lo plugins m\u00e1s utilizados en Leaflet Miramos documentaci\u00f3n https://github.com/Leaflet/Leaflet.markercluster A\u00f1adimos URL plugin < html lang = \"es\" > < head > < title > Farmacias </ title > < meta charset = \"utf-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < meta name = \"author\" content = \"autor\" /> < meta name = \"description\" content = \"descripci\u00f3n p\u00e1gina\" /> < meta name = \"robots\" content = \"index,follow\" /> < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.7.1/dist/leaflet.css\" /> < script src = \"https://unpkg.com/leaflet@1.7.1/dist/leaflet.js\" ></ script > < script src = \"https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js\" ></ script > < script src = \"https://labs.easyblog.it/maps/leaflet-search/src/leaflet-search.js\" ></ script > < link rel = \"stylesheet\" href = \"https://labs.easyblog.it/maps/leaflet-search/src/leaflet-search.css\" /> < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet.markercluster@1.4.1/dist/MarkerCluster.css\" /> < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet.markercluster@1.4.1/dist/MarkerCluster.Default.css\" /> < script src = \"https://unpkg.com/leaflet.markercluster@1.4.1/dist/leaflet.markercluster.js\" ></ script > < link rel = \"stylesheet\" href = \"css/estilobase.css\" /> < script src = \"js/mapabase.js\" ></ script > < script src = \"js/farmacias.js\" ></ script > < script > function initMapaFarmacias (){ init (); addDatosFarmacias (); } </ script > </ head > < body onLoad = \"initMapaFarmacias()\" > < div id = \"map\" > </ div > </ body > </ html > A\u00f1adimos la capa dentro de la funci\u00f3n addDatosFarmacias() de farmacias.js var layerFarmacias ; var urlFarmacias = \"datos/farmacias.geojson\" ; function addDatosFarmacias () { var puntosCluster = L . markerClusterGroup (); layerFarmacias = new L . GeoJSON . AJAX ( urlFarmacias , { onEachFeature : function ( feature , layer ) { popupContent = \"<b>\" + feature . properties . EQUIPAMENT + \"</b>\" + \"<br>\" + feature . properties . TIPUS_VIA + \". \" + feature . properties . NOM_CARRER + \" \" + feature . properties . NUM_CARRER_1 + \"</b>\" ; layer . bindPopup ( popupContent ); }, pointToLayer : function ( feature , latlng ) { puntosCluster . addLayer ( L . marker ( latlng )); return L . circleMarker ( latlng , { radius : 6 , fillColor : \"#00ff00\" , color : \"#ffffff\" , weight : 3 , opacity : 1 , fillOpacity : 0.8 }); } }). addTo ( map ); map . setView ([ 41.399733 , 2.168598 ], 13 ); controlCapas . addOverlay ( layerFarmacias , \"Farmacias\" ); controlCapas . addOverlay ( puntosCluster , \"Cluster\" ); var searchControl = new L . Control . Search ({ layer : layerFarmacias , initial : false , propertyName : 'EQUIPAMENT' , circleLocation : true , moveToLocation : function ( latlng ) { map . setView ( latlng , 17 ); } }); searchControl . on ( 'search:locationfound' , function ( e ) { e . layer . openPopup (); }); map . addControl ( searchControl ); } //fin funcion Probamos visualizaci\u00f3n \u00bfSubimos el ejemplo al GitHub? Acordaros tambi\u00e9s de actualizar index.html git pull git add . git commit -m \"ejemplos leaflet\" git push origin main Soluciones sesion 2 Visualizar https://gis-master-m2.github.io/geoweb/ Descargar https://github.com/gis-master-m2/geoweb/archive/main.zip Anexos Ejemplos de GeoJSONs con plugin GeoJSON AJAX diferentes formas de trabajar con GeoJSONs y el plugin de GeoJSON.AJAX GeoJson por defecto var comarcasPoligonoDefault = new L . GeoJSON . AJAX ( 'datos/comarcas.geojson' ). addTo ( map ); var farmaciasPuntoDefault = new L . GeoJSON . AJAX ( 'datos/farmacias.geojson' ). addTo ( map ); var carrilsBiciLineaDefault = new L . GeoJSON . AJAX ( 'datos/carrils-bici.geojson' ). addTo ( map ); GeoJson con estilos var comarcasPoligonoStyle = new L . GeoJSON . AJAX ( 'datos/comarcas.geojson' , { style : function ( feature ) { return { fillColor : \"#fab81e\" , color : \"#ffffff\" , weight : 2 , opacity : 1 , fillOpacity : 0.5 } } }). addTo ( map ); var farmaciasPuntoStyle = new L . GeoJSON . AJAX ( 'datos/farmacias.geojson' , { pointToLayer : function ( feature , latlng ) { return L . circleMarker ( latlng , { radius : 6 , fillColor : \"#00ff00\" , color : \"#ffffff\" , weight : 3 , opacity : 1 , fillOpacity : 0.8 }) } }). addTo ( map ); var carrilsBiciLineaStyle = new L . GeoJSON . AJAX ( 'datos/carrils-bici.geojson' , { style : function ( feature ) { return { color : \"#d607f2\" , weight : 6 } } }). addTo ( map ); GeoJson con estilos y Popups var comarcasPoligonoStylePop = new L . GeoJSON . AJAX ( 'datos/comarcas.geojson' , { style : function ( feature ) { return { fillColor : \"#fab81e\" , color : \"#ffffff\" , weight : 2 , opacity : 1 , fillOpacity : 0.5 } }, onEachFeature : function ( feature , layer ) { popupContentPol = \"<b>\" + feature . properties . NOM + \"</b>\" ; layer . bindPopup ( popupContentPol ); }, }). addTo ( map ); var farmaciasPuntoStylePop = new L . GeoJSON . AJAX ( 'datos/farmacias.geojson' , { pointToLayer : function ( feature , latlng ) { return L . circleMarker ( latlng , { radius : 6 , fillColor : \"#00ff00\" , color : \"#ffffff\" , weight : 3 , opacity : 1 , fillOpacity : 0.8 }) }, onEachFeature : function ( feature , layer ) { popupContentP = \"<b>\" + feature . properties . EQUIPAMENT + \"</b>\" ; layer . bindPopup ( popupContentP ); }, }). addTo ( map ); var carrilsBiciLineaStylePop = new L . GeoJSON . AJAX ( 'datos/carrils-bici.geojson' , { style : function ( feature ) { return { color : \"#d607f2\" , weight : 6 } }, onEachFeature : function ( feature , layer ) { popupContentL = \"<b>\" + feature . properties . TOOLTIP + \"</b>\" ; layer . bindPopup ( popupContentL ); }, }). addTo ( map ); GeoJson remoto var rivers = new L . GeoJSON . AJAX ( 'https://raw.githubusercontent.com/nvkelso/natural-earth-vector/master/geojson/ne_10m_rivers_europe.geojson' , { style : function ( feature ) { return { color : \"#00ffe1\" , weight : 6 } }, }). addTo ( map );","title":"8.2.Visor de farmacias"},{"location":"8.2.visor_farmacias/#buscador-de-farmacias-de-barcelona-ciudad","text":"1 2 3 4 5 6 7 Nos han encargado realizar un mapa para poder localizar y buscar las farmacias de Barcelona y para cada farm \u00e1 cia poder visualizar las cinco m \u00e1 s cercanas * Los datos de farmacias se pueden obtener de la web de Datos Abiertos de Barcelona [ https : // opendata - ajuntament . barcelona . cat / data / es / dataset / sanitat - farmacies ] ( https : // opendata - ajuntament . barcelona . cat / data / es / dataset / sanitat - farmacies ) { target = _blank } * Podemos transformar los datos ** GeoJson ** y cargalos com un source en Mapbox GlJs * Podemos utilizar el control de ** mapbox - gl - geocoder ** para buscar en GeoJson de for local","title":"Buscador de Farmacias de Barcelona ciudad"},{"location":"8.2.visor_farmacias/#ejemplo-buscador-de-farmacias","text":"","title":"Ejemplo buscador de Farmacias"},{"location":"8.2.visor_farmacias/#paso-1visualizar-datos","text":"Dentro de /geoweb/datos/farmacias.geojson ya tenemos los datos descargados y convertidos a GeoJson. Podemos visualizarlos con https://geojson.io/#map=2/0/20 por ejemplo Convertir a GeoJson El archivo de farmacias lo hemos descargado del portal https://opendata-ajuntament.barcelona.cat/data/es/dataset/sanitat-farmacies en formato CSV y lo hemos transformado a GeoJSON Para ver c\u00f3mo transformar y reproyectar un archivo CSV a GeoJson con Qgis mira el video 7","title":"Paso 1:Visualizar datos"},{"location":"8.2.visor_farmacias/#paso-2-crear-archivo-farmaciashtml","text":"Abrimos archivo mapabase.html y guardamos como File-->Save as farmacias.html A\u00f1adimos un titulo y la funci\u00f3n inicial initMapaFarmacias() de nuestro proyecto Llamamos a la funci\u00f3n initMapaFarmacias() en el body onLoad < html lang = \"es\" > < head > < title > Farmacias </ title > < meta charset = \"utf-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < meta name = \"author\" content = \"autor\" /> < meta name = \"description\" content = \"descripci\u00f3n p\u00e1gina\" /> < meta name = \"robots\" content = \"index,follow\" /> < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.7.1/dist/leaflet.css\" /> < script src = \"https://unpkg.com/leaflet@1.7.1/dist/leaflet.js\" ></ script > < link rel = \"stylesheet\" href = \"css/estilobase.css\" /> < script src = \"js/mapabase.js\" ></ script > < script > function initMapaFarmacias (){ init (); } </ script > </ head > < body onLoad = \"initMapaFarmacias()\" > < div id = \"map\" > </ div > </ body > </ html >","title":"Paso 2: Crear archivo farmacias.html"},{"location":"8.2.visor_farmacias/#paso-3anadir-plugin","text":"A\u00f1adimos Plugins al proyecto Podemos descargar plugins del directorio /dist y guardarlos en nuestros directorios /js o /css Tambi\u00e9n podemos utilizar la URL directamente ( nuestro caso ) < html lang = \"es\" > < head > < title > Farmacias </ title > < meta charset = \"utf-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < meta name = \"author\" content = \"autor\" /> < meta name = \"description\" content = \"descripci\u00f3n p\u00e1gina\" /> < meta name = \"robots\" content = \"index,follow\" /> < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.7.1/dist/leaflet.css\" /> < script src = \"https://unpkg.com/leaflet@1.7.1/dist/leaflet.js\" ></ script > < script src = \"https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js\" ></ script > < link rel = \"stylesheet\" href = \"css/estilobase.css\" /> < script src = \"js/mapabase.js\" ></ script > < script > function initMapaFarmacias (){ init (); } </ script > </ head > < body onLoad = \"initMapaFarmacias()\" > < div id = \"map\" > </ div > </ body > </ html >","title":"Paso 3:A\u00f1adir plugin"},{"location":"8.2.visor_farmacias/#paso-4cargamos-geojson-farmacias","text":"Miramos documentaci\u00f3n Leaflet-Ajax plugin https://github.com/calvinmetcalf/leaflet-ajax Miramos referencia L.Geojson https://leafletjs.com/reference-1.7.1.html#geojson Dentro de nuestro directorio /geoweb/js/ creamos el archivo farmacias.js var layerFarmacias ; var urlFarmacias = \"datos/farmacias.geojson\" ; function addDatosFarmacias () { layerFarmacias = new L . GeoJSON . AJAX ( urlFarmacias , { onEachFeature : function ( feature , layer ) { popupContent = \"<b>\" + feature . properties . EQUIPAMENT + \"</b>\" + \"<br>\" + feature . properties . TIPUS_VIA + \". \" + feature . properties . NOM_CARRER + \" \" + feature . properties . NUM_CARRER_1 + \"</b>\" ; layer . bindPopup ( popupContent ); }, pointToLayer : function ( feature , latlng ) { return L . circleMarker ( latlng , { radius : 6 , fillColor : \"#00ff00\" , color : \"#ffffff\" , weight : 3 , opacity : 1 , fillOpacity : 0.8 }); } }). addTo ( map ); map . setView ([ 41.399733 , 2.168598 ], 13 ); // controlCapas.addOverlay(layerFarmacias,\"Farmacias\"); } //fin funcion","title":"Paso 4:Cargamos GeoJson Farmacias"},{"location":"8.2.visor_farmacias/#paso-5","text":"A\u00f1adimos farmacias.js al archivo farmacias.html Llamamos funcion addDatosFarmacias() < html lang = \"es\" > < head > < title > Farmacias </ title > < meta charset = \"utf-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < meta name = \"author\" content = \"autor\" /> < meta name = \"description\" content = \"descripci\u00f3n p\u00e1gina\" /> < meta name = \"robots\" content = \"index,follow\" /> < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.7.1/dist/leaflet.css\" /> < script src = \"https://unpkg.com/leaflet@1.7.1/dist/leaflet.js\" ></ script > < script src = \"https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js\" ></ script > < link rel = \"stylesheet\" href = \"css/estilobase.css\" /> < script src = \"js/mapabase.js\" ></ script > < script src = \"js/farmacias.js\" ></ script > < script > function initMapaFarmacias (){ init (); addDatosFarmacias (); } </ script > </ head > < body onLoad = \"initMapaFarmacias()\" > < div id = \"map\" > </ div > </ body > </ html > Visualizamos mapa","title":"Paso 5:"},{"location":"8.2.visor_farmacias/#paso-6anadir-opcion-para-buscar-farmacias","text":"Miramos documentaci\u00f3n Leaflet-Search plugin https://github.com/stefanocudini/leaflet-search A\u00f1adimos URL plugin < html lang = \"es\" > < head > < title > Farmacias </ title > < meta charset = \"utf-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < meta name = \"author\" content = \"autor\" /> < meta name = \"description\" content = \"descripci\u00f3n p\u00e1gina\" /> < meta name = \"robots\" content = \"index,follow\" /> < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.7.1/dist/leaflet.css\" /> < script src = \"https://unpkg.com/leaflet@1.7.1/dist/leaflet.js\" ></ script > < script src = \"https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js\" ></ script > < script src = \"https://labs.easyblog.it/maps/leaflet-search/src/leaflet-search.js\" ></ script > < link rel = \"stylesheet\" href = \"https://labs.easyblog.it/maps/leaflet-search/src/leaflet-search.css\" /> < link rel = \"stylesheet\" href = \"css/estilobase.css\" /> < script src = \"js/mapabase.js\" ></ script > < script src = \"js/farmacias.js\" ></ script > < script > function initMapaFarmacias (){ init (); addDatosFarmacias (); } </ script > </ head > < body onLoad = \"initMapaFarmacias()\" > < div id = \"map\" > </ div > </ body > </ html > A\u00f1adimos el control dentro de la funci\u00f3n addDatosFarmacias() de farmacias.js var layerFarmacias ; var urlFarmacias = \"datos/farmacias.geojson\" ; function addDatosFarmacias () { layerFarmacias = new L . GeoJSON . AJAX ( urlFarmacias , { onEachFeature : function ( feature , layer ) { popupContent = \"<b>\" + feature . properties . EQUIPAMENT + \"</b>\" + \"<br>\" + feature . properties . TIPUS_VIA + \". \" + feature . properties . NOM_CARRER + \" \" + feature . properties . NUM_CARRER_1 + \"</b>\" ; layer . bindPopup ( popupContent ); }, pointToLayer : function ( feature , latlng ) { return L . circleMarker ( latlng , { radius : 6 , fillColor : \"#00ff00\" , color : \"#ffffff\" , weight : 3 , opacity : 1 , fillOpacity : 0.8 }); } }). addTo ( map ); map . setView ([ 41.399733 , 2.168598 ], 13 ); // controlCapas.addOverlay(layerFarmacias,\"Farmacias\"); var searchControl = new L . Control . Search ({ layer : layerFarmacias , initial : false , propertyName : 'EQUIPAMENT' , circleLocation : true , moveToLocation : function ( latlng ) { map . setView ( latlng , 17 ); } }); searchControl . on ( 'search:locationfound' , function ( e ) { e . layer . openPopup (); }); map . addControl ( searchControl ); } //fin funcion Probamos visor y buscamos farm\u00e1cias","title":"Paso 6:A\u00f1adir opci\u00f3n para buscar Farmacias"},{"location":"8.2.visor_farmacias/#paso-7-anadimos-el-plugin-de-cluster","text":"Este es uno de lo plugins m\u00e1s utilizados en Leaflet Miramos documentaci\u00f3n https://github.com/Leaflet/Leaflet.markercluster A\u00f1adimos URL plugin < html lang = \"es\" > < head > < title > Farmacias </ title > < meta charset = \"utf-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < meta name = \"author\" content = \"autor\" /> < meta name = \"description\" content = \"descripci\u00f3n p\u00e1gina\" /> < meta name = \"robots\" content = \"index,follow\" /> < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.7.1/dist/leaflet.css\" /> < script src = \"https://unpkg.com/leaflet@1.7.1/dist/leaflet.js\" ></ script > < script src = \"https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js\" ></ script > < script src = \"https://labs.easyblog.it/maps/leaflet-search/src/leaflet-search.js\" ></ script > < link rel = \"stylesheet\" href = \"https://labs.easyblog.it/maps/leaflet-search/src/leaflet-search.css\" /> < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet.markercluster@1.4.1/dist/MarkerCluster.css\" /> < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet.markercluster@1.4.1/dist/MarkerCluster.Default.css\" /> < script src = \"https://unpkg.com/leaflet.markercluster@1.4.1/dist/leaflet.markercluster.js\" ></ script > < link rel = \"stylesheet\" href = \"css/estilobase.css\" /> < script src = \"js/mapabase.js\" ></ script > < script src = \"js/farmacias.js\" ></ script > < script > function initMapaFarmacias (){ init (); addDatosFarmacias (); } </ script > </ head > < body onLoad = \"initMapaFarmacias()\" > < div id = \"map\" > </ div > </ body > </ html > A\u00f1adimos la capa dentro de la funci\u00f3n addDatosFarmacias() de farmacias.js var layerFarmacias ; var urlFarmacias = \"datos/farmacias.geojson\" ; function addDatosFarmacias () { var puntosCluster = L . markerClusterGroup (); layerFarmacias = new L . GeoJSON . AJAX ( urlFarmacias , { onEachFeature : function ( feature , layer ) { popupContent = \"<b>\" + feature . properties . EQUIPAMENT + \"</b>\" + \"<br>\" + feature . properties . TIPUS_VIA + \". \" + feature . properties . NOM_CARRER + \" \" + feature . properties . NUM_CARRER_1 + \"</b>\" ; layer . bindPopup ( popupContent ); }, pointToLayer : function ( feature , latlng ) { puntosCluster . addLayer ( L . marker ( latlng )); return L . circleMarker ( latlng , { radius : 6 , fillColor : \"#00ff00\" , color : \"#ffffff\" , weight : 3 , opacity : 1 , fillOpacity : 0.8 }); } }). addTo ( map ); map . setView ([ 41.399733 , 2.168598 ], 13 ); controlCapas . addOverlay ( layerFarmacias , \"Farmacias\" ); controlCapas . addOverlay ( puntosCluster , \"Cluster\" ); var searchControl = new L . Control . Search ({ layer : layerFarmacias , initial : false , propertyName : 'EQUIPAMENT' , circleLocation : true , moveToLocation : function ( latlng ) { map . setView ( latlng , 17 ); } }); searchControl . on ( 'search:locationfound' , function ( e ) { e . layer . openPopup (); }); map . addControl ( searchControl ); } //fin funcion Probamos visualizaci\u00f3n \u00bfSubimos el ejemplo al GitHub? Acordaros tambi\u00e9s de actualizar index.html git pull git add . git commit -m \"ejemplos leaflet\" git push origin main Soluciones sesion 2 Visualizar https://gis-master-m2.github.io/geoweb/ Descargar https://github.com/gis-master-m2/geoweb/archive/main.zip","title":"Paso 7: \u00bfA\u00f1adimos el plugin de Cluster?"},{"location":"8.2.visor_farmacias/#anexos","text":"","title":"Anexos"},{"location":"8.2.visor_farmacias/#ejemplos-de-geojsons-con-plugin-geojson-ajax","text":"diferentes formas de trabajar con GeoJSONs y el plugin de GeoJSON.AJAX GeoJson por defecto var comarcasPoligonoDefault = new L . GeoJSON . AJAX ( 'datos/comarcas.geojson' ). addTo ( map ); var farmaciasPuntoDefault = new L . GeoJSON . AJAX ( 'datos/farmacias.geojson' ). addTo ( map ); var carrilsBiciLineaDefault = new L . GeoJSON . AJAX ( 'datos/carrils-bici.geojson' ). addTo ( map ); GeoJson con estilos var comarcasPoligonoStyle = new L . GeoJSON . AJAX ( 'datos/comarcas.geojson' , { style : function ( feature ) { return { fillColor : \"#fab81e\" , color : \"#ffffff\" , weight : 2 , opacity : 1 , fillOpacity : 0.5 } } }). addTo ( map ); var farmaciasPuntoStyle = new L . GeoJSON . AJAX ( 'datos/farmacias.geojson' , { pointToLayer : function ( feature , latlng ) { return L . circleMarker ( latlng , { radius : 6 , fillColor : \"#00ff00\" , color : \"#ffffff\" , weight : 3 , opacity : 1 , fillOpacity : 0.8 }) } }). addTo ( map ); var carrilsBiciLineaStyle = new L . GeoJSON . AJAX ( 'datos/carrils-bici.geojson' , { style : function ( feature ) { return { color : \"#d607f2\" , weight : 6 } } }). addTo ( map ); GeoJson con estilos y Popups var comarcasPoligonoStylePop = new L . GeoJSON . AJAX ( 'datos/comarcas.geojson' , { style : function ( feature ) { return { fillColor : \"#fab81e\" , color : \"#ffffff\" , weight : 2 , opacity : 1 , fillOpacity : 0.5 } }, onEachFeature : function ( feature , layer ) { popupContentPol = \"<b>\" + feature . properties . NOM + \"</b>\" ; layer . bindPopup ( popupContentPol ); }, }). addTo ( map ); var farmaciasPuntoStylePop = new L . GeoJSON . AJAX ( 'datos/farmacias.geojson' , { pointToLayer : function ( feature , latlng ) { return L . circleMarker ( latlng , { radius : 6 , fillColor : \"#00ff00\" , color : \"#ffffff\" , weight : 3 , opacity : 1 , fillOpacity : 0.8 }) }, onEachFeature : function ( feature , layer ) { popupContentP = \"<b>\" + feature . properties . EQUIPAMENT + \"</b>\" ; layer . bindPopup ( popupContentP ); }, }). addTo ( map ); var carrilsBiciLineaStylePop = new L . GeoJSON . AJAX ( 'datos/carrils-bici.geojson' , { style : function ( feature ) { return { color : \"#d607f2\" , weight : 6 } }, onEachFeature : function ( feature , layer ) { popupContentL = \"<b>\" + feature . properties . TOOLTIP + \"</b>\" ; layer . bindPopup ( popupContentL ); }, }). addTo ( map ); GeoJson remoto var rivers = new L . GeoJSON . AJAX ( 'https://raw.githubusercontent.com/nvkelso/natural-earth-vector/master/geojson/ne_10m_rivers_europe.geojson' , { style : function ( feature ) { return { color : \"#00ffe1\" , weight : 6 } }, }). addTo ( map );","title":"Ejemplos de GeoJSONs con plugin GeoJSON AJAX"},{"location":"9.1.pwa/","text":"Progressive web application (PWA) Una aplicaci\u00f3n web progresiva (PWA),es basicamente una web que puede ser instalada en cualquier dispositivo Algunas caracter\u00edsticas de las PWA son: Dise\u00f1o responsive: las PWA est\u00e1n dise\u00f1adas para funcionar en una variedad de dispositivos, incluyendo smartphones, tablets y computadoras de escritorio. Capacidad offline: las PWA pueden funcionar sin conexi\u00f3n a Internet o con redes de baja calidad gracias a los trabajadores de servicio que almacenan en cach\u00e9 los recursos necesarios. Notificaciones push: las PWA pueden enviar notificaciones push a los usuarios, al igual que las aplicaciones nativas. Instalables: las PWA se pueden instalar en el dispositivo del usuario, al igual que las aplicaciones nativas. Seguras: las PWA se sirven a trav\u00e9s de HTTPS, lo que ayuda a proteger contra el espionaje y el falsificaci\u00f3n. En general, el objetivo de una PWA es proporcionar a los usuarios una experiencia r\u00e1pida y similar a una aplicaci\u00f3n, que sea f\u00e1cil de usar y accesible desde cualquier dispositivo. Recursos PWA Webs https://www.digitalocean.com/community/tutorials/js-vanilla-pwa https://guiadev.com/tutorial-de-progressive-web-apps/ https://web.dev/progressive-web-apps/ https://developer.mozilla.org/en-US/docs/Web/Progressive_web_apps Compilaci\u00f3n a app m\u00f3bil https://www.pwabuilder.com/ Definici\u00f3n https://es.wikipedia.org/wiki/Aplicaci%C3%B3n_web_progresiva Videos https://www.youtube.com/watch?v=z2JgN6Ae-Bo https://www.youtube.com/watch?v=sFsRylCQblw hhttps://www.youtube.com/watch?v=47L5LjYlZWA \u00bfC\u00f3mo empezar? Para convertir un visor nuestro en PWA necesitaremos Crear un archivo webmanifest tipo JSON d\u00f3nde describir el nombre de la app, la URL, los \u00edconos a utilizar y otros detalles necesarios para transformar el visor en una app. Opeciones de un manifest https://developer.mozilla.org/en-US/docs/Web/Manifest Utilizar un serviceworker.js. Un serviceworker es un archivo de JavaScript que se ejecuta en segundo plano en el navegador y puede realizar tareas como: interceptar solicitudes HTTP, almacenar en cach\u00e9 contenido para su posterior uso sin conexi\u00f3n y recibir notificaciones push. Los serviceworkers son una forma de mejorar la experiencia del usuario y el rendimiento de una aplicaci\u00f3n web. Generar imagenes / capturas a diferentes resoluciones, que funcionarar como icona al instalar el visor Integrar el webmanifest y el serviceworker dentro del html de nuestro visor","title":"9.1.Progressive web applications"},{"location":"9.1.pwa/#progressive-web-application-pwa","text":"Una aplicaci\u00f3n web progresiva (PWA),es basicamente una web que puede ser instalada en cualquier dispositivo Algunas caracter\u00edsticas de las PWA son: Dise\u00f1o responsive: las PWA est\u00e1n dise\u00f1adas para funcionar en una variedad de dispositivos, incluyendo smartphones, tablets y computadoras de escritorio. Capacidad offline: las PWA pueden funcionar sin conexi\u00f3n a Internet o con redes de baja calidad gracias a los trabajadores de servicio que almacenan en cach\u00e9 los recursos necesarios. Notificaciones push: las PWA pueden enviar notificaciones push a los usuarios, al igual que las aplicaciones nativas. Instalables: las PWA se pueden instalar en el dispositivo del usuario, al igual que las aplicaciones nativas. Seguras: las PWA se sirven a trav\u00e9s de HTTPS, lo que ayuda a proteger contra el espionaje y el falsificaci\u00f3n. En general, el objetivo de una PWA es proporcionar a los usuarios una experiencia r\u00e1pida y similar a una aplicaci\u00f3n, que sea f\u00e1cil de usar y accesible desde cualquier dispositivo.","title":"Progressive web application (PWA)"},{"location":"9.1.pwa/#recursos-pwa","text":"","title":"Recursos PWA"},{"location":"9.1.pwa/#webs","text":"https://www.digitalocean.com/community/tutorials/js-vanilla-pwa https://guiadev.com/tutorial-de-progressive-web-apps/ https://web.dev/progressive-web-apps/ https://developer.mozilla.org/en-US/docs/Web/Progressive_web_apps","title":"Webs"},{"location":"9.1.pwa/#compilacion-a-app-mobil","text":"https://www.pwabuilder.com/","title":"Compilaci\u00f3n a app m\u00f3bil"},{"location":"9.1.pwa/#definicion","text":"https://es.wikipedia.org/wiki/Aplicaci%C3%B3n_web_progresiva","title":"Definici\u00f3n"},{"location":"9.1.pwa/#videos","text":"https://www.youtube.com/watch?v=z2JgN6Ae-Bo https://www.youtube.com/watch?v=sFsRylCQblw hhttps://www.youtube.com/watch?v=47L5LjYlZWA","title":"Videos"},{"location":"9.1.pwa/#como-empezar","text":"Para convertir un visor nuestro en PWA necesitaremos Crear un archivo webmanifest tipo JSON d\u00f3nde describir el nombre de la app, la URL, los \u00edconos a utilizar y otros detalles necesarios para transformar el visor en una app. Opeciones de un manifest https://developer.mozilla.org/en-US/docs/Web/Manifest Utilizar un serviceworker.js. Un serviceworker es un archivo de JavaScript que se ejecuta en segundo plano en el navegador y puede realizar tareas como: interceptar solicitudes HTTP, almacenar en cach\u00e9 contenido para su posterior uso sin conexi\u00f3n y recibir notificaciones push. Los serviceworkers son una forma de mejorar la experiencia del usuario y el rendimiento de una aplicaci\u00f3n web. Generar imagenes / capturas a diferentes resoluciones, que funcionarar como icona al instalar el visor Integrar el webmanifest y el serviceworker dentro del html de nuestro visor","title":"\u00bfC\u00f3mo empezar?"},{"location":"9.2.primera_pwa/","text":"Vamos a crear nuestra primer PWA a partir del visor globe que hemos hecho en el punto 3.2 Paso 1- Creamos el archivo \"pwa.html\" dentro de \"/geoweb\" Copiamos el c\u00f3digo del archivo \"mapbox-global.html\" < html lang = \"es\" > < head > < title > visor global -pwa </ title > < meta charset = \"utf-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta name = \"author\" content = \"autor\" /> < meta name = \"description\" content = \"descripci\u00f3n p\u00e1gina\" > < meta name = \"robots\" content = \"index,follow\" > < link rel = \"stylesheet\" href = \"https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.css\" /> < script src = \"https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.js\" ></ script > < script src = \"https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v5.0.0/mapbox-gl-geocoder.min.js\" ></ script > < link rel = \"stylesheet\" href = \"https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v5.0.0/mapbox-gl-geocoder.css\" type = \"text/css\" > < style > body { margin : 0 ; padding : 0 ; overflow : hidden ; } # map { height : 100 % ; width : 100 % ; } </ style > < script > var map ; // tambien const map; function init () { mapboxgl . accessToken = 'pk.eyJ1IjoiZ2lzbWFzdGVybTIiLCJhIjoiY2plZHhubTQxMTNoYzMza3Rqa3kxYTdrOCJ9.53B1E6mKD_EQOVb2Y0-SsA' ; map = new mapboxgl . Map ({ container : 'map' , style : 'mapbox://styles/mapbox/satellite-streets-v11' , center : [ 0 , 0 ], zoom : 2.3 , projection : 'globe' , attributionControl : false }); map . addControl ( new mapboxgl . AttributionControl ({ compact : true })); map . addControl ( new mapboxgl . NavigationControl ()); map . on ( 'load' , () => { map . setFog ({}); }); map . addControl ( new MapboxGeocoder ({ accessToken : mapboxgl . accessToken , mapboxgl : mapboxgl , collapsed : true }) ); } </ script > </ head > < body onLoad = \"init()\" > < div id = \"map\" ></ div > </ body > </ html > Paso 2- Creamos el archivo \"manifest-pwa.json\" dentro de \"/geoweb\" { \"name\" : \"Mi primera PWA\" , \"short_name\" : \"Visor Global\" , \"theme_color\" : \"#2196f3\" , \"background_color\" : \"#2196f3\" , \"display\" : \"standalone\" , \"scope\" : \"/geoweb/\" , \"orientation\" : \"any\" , \"start_url\" : \"/geoweb/\" , \"icons\" : [ { \"src\" : \"images/capture_128.png\" , \"sizes\" : \"128x128\" , \"type\" : \"image/png\" }, { \"src\" : \"images/capture_256.png\" , \"sizes\" : \"256x256\" , \"type\" : \"image/png\" }, { \"src\" : \"images/capture_512.png\" , \"sizes\" : \"512x512\" , \"type\" : \"image/png\" } ] } Tambi\u00e9n podemos utilzar esta web para generar archivos manifest https://app-manifest.firebaseapp.com/ Paso 3- Creamos el archivo \"serviceworker.js\" dentro del directorio \"/geoweb\" Este archivo solo hace falta crearlo una vez y nos servir\u00e1 siempre importScripts ( 'https://storage.googleapis.com/workbox-cdn/releases/5.1.2/workbox-sw.js' ); const CACHE = \"pwabuilder-page\" ; const offlineFallbackPage = \"offline.html\" ; self . addEventListener ( \"message\" , ( event ) => { if ( event . data && event . data . type === \"SKIP_WAITING\" ) { self . skipWaiting (); } }); self . addEventListener ( 'install' , async ( event ) => { event . waitUntil ( caches . open ( CACHE ) . then (( cache ) => cache . add ( offlineFallbackPage )) ); }); if ( workbox . navigationPreload . isSupported ()) { workbox . navigationPreload . enable (); } self . addEventListener ( 'fetch' , ( event ) => { if ( event . request . mode === 'navigate' ) { event . respondWith (( async () => { try { const preloadResp = await event . preloadResponse ; if ( preloadResp ) { return preloadResp ; } const networkResp = await fetch ( event . request ); return networkResp ; } catch ( error ) { const cache = await caches . open ( CACHE ); const cachedResp = await cache . match ( offlineFallbackPage ); return cachedResp ; } })()); } }); Paso 4- Creamos el archivo \"offline.html\" dentro del directorio JS de \"/geoweb\" Este archivo solo hace falta crearlo una vez y nos servir\u00e1 siempre Es un archivo html vacio d\u00f3n el service worker crear\u00e1 un \"copia\" offline de nuestro visor < html > < head > < head > < body > < body > < html > Paso 5- A\u00f1adimos manifest, serviceworker y otros a nuestro visor pwa.html < html lang = \"es\" > < head > < title > visor global -pwa </ title > < meta charset = \"utf-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta name = \"author\" content = \"autor\" /> < meta name = \"description\" content = \"descripci\u00f3n p\u00e1gina\" > < meta name = \"robots\" content = \"index,follow\" > < link rel = \"stylesheet\" href = \"https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.css\" /> < script src = \"https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.js\" ></ script > < script src = \"https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v5.0.0/mapbox-gl-geocoder.min.js\" ></ script > < link rel = \"stylesheet\" href = \"https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v5.0.0/mapbox-gl-geocoder.css\" type = \"text/css\" > < link id = \"manifest\" rel = \"manifest\" href = \"manifest-pwa.json\" > < style > body { margin : 0 ; padding : 0 ; overflow : hidden ; } # map { height : 100 % ; width : 100 % ; } </ style > < script > var map ; // tambien const map; function init () { mapboxgl . accessToken = 'pk.eyJ1IjoiZ2lzbWFzdGVybTIiLCJhIjoiY2plZHhubTQxMTNoYzMza3Rqa3kxYTdrOCJ9.53B1E6mKD_EQOVb2Y0-SsA' ; map = new mapboxgl . Map ({ container : 'map' , style : 'mapbox://styles/mapbox/satellite-streets-v11' , center : [ 0 , 0 ], zoom : 2.3 , projection : 'globe' , attributionControl : false }); map . addControl ( new mapboxgl . AttributionControl ({ compact : true })); map . addControl ( new mapboxgl . NavigationControl ()); map . on ( 'load' , () => { map . setFog ({}); }); map . addControl ( new MapboxGeocoder ({ accessToken : mapboxgl . accessToken , mapboxgl : mapboxgl , collapsed : true }) ); } </ script > < script > if ( 'serviceWorker' in navigator ) { navigator . serviceWorker . register ( './sw.js' ) . then ( function () { console . log ( \"Todo ok!\" ); }) } </ script > </ head > < body onLoad = \"init()\" > < div id = \"map\" ></ div > </ body > </ html > Paso 6- Visualizar PWA en HTTPS Para poder hacer una instalaci\u00f3n correcta de la PWA necesitamos que este en HTTPS, debemos subirla a Github y ver via web de githab https://{tu_usuario_github}.github.io/geoweb/pwa.html Subimos el ejemplo al GitHub git pull git add . git commit -m \"pwa\" git push Si aparece la icona de instalaci\u00f3n en la barra de navegaci\u00f3n de del browser todo est\u00e1 ok!! Una vez instalada aparecer\u00e1 una icona en el desktop \u00bfProbamos de visualizar en un m\u00f3bil? \u00bfQu\u00e9 pasa? Practica Probamos de convertir cualquier otro visor a PWA Saber m\u00e1s... Con la web https://www.pwabuilder.com/ podriamos convertir a app nuestra pwa isubirla a un market","title":"9.2.Mi primera PWA"},{"location":"9.2.primera_pwa/#paso-1-creamos-el-archivo-pwahtml-dentro-de-geoweb","text":"Copiamos el c\u00f3digo del archivo \"mapbox-global.html\" < html lang = \"es\" > < head > < title > visor global -pwa </ title > < meta charset = \"utf-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta name = \"author\" content = \"autor\" /> < meta name = \"description\" content = \"descripci\u00f3n p\u00e1gina\" > < meta name = \"robots\" content = \"index,follow\" > < link rel = \"stylesheet\" href = \"https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.css\" /> < script src = \"https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.js\" ></ script > < script src = \"https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v5.0.0/mapbox-gl-geocoder.min.js\" ></ script > < link rel = \"stylesheet\" href = \"https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v5.0.0/mapbox-gl-geocoder.css\" type = \"text/css\" > < style > body { margin : 0 ; padding : 0 ; overflow : hidden ; } # map { height : 100 % ; width : 100 % ; } </ style > < script > var map ; // tambien const map; function init () { mapboxgl . accessToken = 'pk.eyJ1IjoiZ2lzbWFzdGVybTIiLCJhIjoiY2plZHhubTQxMTNoYzMza3Rqa3kxYTdrOCJ9.53B1E6mKD_EQOVb2Y0-SsA' ; map = new mapboxgl . Map ({ container : 'map' , style : 'mapbox://styles/mapbox/satellite-streets-v11' , center : [ 0 , 0 ], zoom : 2.3 , projection : 'globe' , attributionControl : false }); map . addControl ( new mapboxgl . AttributionControl ({ compact : true })); map . addControl ( new mapboxgl . NavigationControl ()); map . on ( 'load' , () => { map . setFog ({}); }); map . addControl ( new MapboxGeocoder ({ accessToken : mapboxgl . accessToken , mapboxgl : mapboxgl , collapsed : true }) ); } </ script > </ head > < body onLoad = \"init()\" > < div id = \"map\" ></ div > </ body > </ html >","title":"Paso 1- Creamos el archivo \"pwa.html\" dentro de \"/geoweb\""},{"location":"9.2.primera_pwa/#paso-2-creamos-el-archivo-manifest-pwajson-dentro-de-geoweb","text":"{ \"name\" : \"Mi primera PWA\" , \"short_name\" : \"Visor Global\" , \"theme_color\" : \"#2196f3\" , \"background_color\" : \"#2196f3\" , \"display\" : \"standalone\" , \"scope\" : \"/geoweb/\" , \"orientation\" : \"any\" , \"start_url\" : \"/geoweb/\" , \"icons\" : [ { \"src\" : \"images/capture_128.png\" , \"sizes\" : \"128x128\" , \"type\" : \"image/png\" }, { \"src\" : \"images/capture_256.png\" , \"sizes\" : \"256x256\" , \"type\" : \"image/png\" }, { \"src\" : \"images/capture_512.png\" , \"sizes\" : \"512x512\" , \"type\" : \"image/png\" } ] } Tambi\u00e9n podemos utilzar esta web para generar archivos manifest https://app-manifest.firebaseapp.com/","title":"Paso 2- Creamos el archivo \"manifest-pwa.json\" dentro de \"/geoweb\""},{"location":"9.2.primera_pwa/#paso-3-creamos-el-archivo-serviceworkerjs-dentro-del-directorio-geoweb","text":"Este archivo solo hace falta crearlo una vez y nos servir\u00e1 siempre importScripts ( 'https://storage.googleapis.com/workbox-cdn/releases/5.1.2/workbox-sw.js' ); const CACHE = \"pwabuilder-page\" ; const offlineFallbackPage = \"offline.html\" ; self . addEventListener ( \"message\" , ( event ) => { if ( event . data && event . data . type === \"SKIP_WAITING\" ) { self . skipWaiting (); } }); self . addEventListener ( 'install' , async ( event ) => { event . waitUntil ( caches . open ( CACHE ) . then (( cache ) => cache . add ( offlineFallbackPage )) ); }); if ( workbox . navigationPreload . isSupported ()) { workbox . navigationPreload . enable (); } self . addEventListener ( 'fetch' , ( event ) => { if ( event . request . mode === 'navigate' ) { event . respondWith (( async () => { try { const preloadResp = await event . preloadResponse ; if ( preloadResp ) { return preloadResp ; } const networkResp = await fetch ( event . request ); return networkResp ; } catch ( error ) { const cache = await caches . open ( CACHE ); const cachedResp = await cache . match ( offlineFallbackPage ); return cachedResp ; } })()); } });","title":"Paso 3- Creamos el archivo \"serviceworker.js\" dentro del directorio  \"/geoweb\""},{"location":"9.2.primera_pwa/#paso-4-creamos-el-archivo-offlinehtml-dentro-del-directorio-js-de-geoweb","text":"Este archivo solo hace falta crearlo una vez y nos servir\u00e1 siempre Es un archivo html vacio d\u00f3n el service worker crear\u00e1 un \"copia\" offline de nuestro visor < html > < head > < head > < body > < body > < html >","title":"Paso 4- Creamos el archivo \"offline.html\" dentro del directorio JS de  \"/geoweb\""},{"location":"9.2.primera_pwa/#paso-5-anadimos-manifest-serviceworker-y-otros-a-nuestro-visor-pwahtml","text":"< html lang = \"es\" > < head > < title > visor global -pwa </ title > < meta charset = \"utf-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta name = \"author\" content = \"autor\" /> < meta name = \"description\" content = \"descripci\u00f3n p\u00e1gina\" > < meta name = \"robots\" content = \"index,follow\" > < link rel = \"stylesheet\" href = \"https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.css\" /> < script src = \"https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.js\" ></ script > < script src = \"https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v5.0.0/mapbox-gl-geocoder.min.js\" ></ script > < link rel = \"stylesheet\" href = \"https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v5.0.0/mapbox-gl-geocoder.css\" type = \"text/css\" > < link id = \"manifest\" rel = \"manifest\" href = \"manifest-pwa.json\" > < style > body { margin : 0 ; padding : 0 ; overflow : hidden ; } # map { height : 100 % ; width : 100 % ; } </ style > < script > var map ; // tambien const map; function init () { mapboxgl . accessToken = 'pk.eyJ1IjoiZ2lzbWFzdGVybTIiLCJhIjoiY2plZHhubTQxMTNoYzMza3Rqa3kxYTdrOCJ9.53B1E6mKD_EQOVb2Y0-SsA' ; map = new mapboxgl . Map ({ container : 'map' , style : 'mapbox://styles/mapbox/satellite-streets-v11' , center : [ 0 , 0 ], zoom : 2.3 , projection : 'globe' , attributionControl : false }); map . addControl ( new mapboxgl . AttributionControl ({ compact : true })); map . addControl ( new mapboxgl . NavigationControl ()); map . on ( 'load' , () => { map . setFog ({}); }); map . addControl ( new MapboxGeocoder ({ accessToken : mapboxgl . accessToken , mapboxgl : mapboxgl , collapsed : true }) ); } </ script > < script > if ( 'serviceWorker' in navigator ) { navigator . serviceWorker . register ( './sw.js' ) . then ( function () { console . log ( \"Todo ok!\" ); }) } </ script > </ head > < body onLoad = \"init()\" > < div id = \"map\" ></ div > </ body > </ html >","title":"Paso 5- A\u00f1adimos manifest, serviceworker y otros  a nuestro visor pwa.html"},{"location":"9.2.primera_pwa/#paso-6-visualizar-pwa-en-https","text":"Para poder hacer una instalaci\u00f3n correcta de la PWA necesitamos que este en HTTPS, debemos subirla a Github y ver via web de githab https://{tu_usuario_github}.github.io/geoweb/pwa.html Subimos el ejemplo al GitHub git pull git add . git commit -m \"pwa\" git push Si aparece la icona de instalaci\u00f3n en la barra de navegaci\u00f3n de del browser todo est\u00e1 ok!! Una vez instalada aparecer\u00e1 una icona en el desktop \u00bfProbamos de visualizar en un m\u00f3bil? \u00bfQu\u00e9 pasa?","title":"Paso 6- Visualizar PWA en HTTPS"},{"location":"9.2.primera_pwa/#practica","text":"Probamos de convertir cualquier otro visor a PWA","title":"Practica"},{"location":"9.2.primera_pwa/#saber-mas","text":"Con la web https://www.pwabuilder.com/ podriamos convertir a app nuestra pwa isubirla a un market","title":"Saber m\u00e1s..."},{"location":"faq/","text":"Preguntas frecuentes Al intentar hacer push el Git me pide un nombre de usuario y correo Si al hacer un commit la primera vez tenemos este aviso Run git config --global user.email \"you@example.com\" git config --global user.name \"Your Name\" to set your account 's default identity. Omit --global to set the identity only in this repository. fatal: unable to auto-detect email address (got ' usuario@yourpc. ( none ) ' ) Entramos nuestor usuario y correo de git y volvemos a hacer push git config --global user.email micorreo@gmail.com git config --global user.name misusuario git pull git add . git commit -m \"change readme\" git push -u origin master Medium no me deja publicar el Post Si al intenar publicar un Post por primera vez Medium me dice.. \"Publishing from your account is currently limited due to account newness, incomplete profile, or inactivity. Please complete your profile, and use Medium more to unlock publishing. Any posts or responses have been saved to your draft folder and will be available when youre able to publish.\" Medium tiene que validar nuestra cuenta el Post Editamos nuestro perfil con un texto descriptivo y una imagen (no hace falta foto personal si no quereis) Salimos de la sesi\u00f3n de Medium (LogOut) y volvemos a entrar (Login) Si a\u00fan as\u00ed no funciona, esperamos 24h. En principio despu\u00e9s de este periodo nos tendria que dejar publicar sin problemas","title":"Preguntas Frecuentes"},{"location":"faq/#preguntas-frecuentes","text":"","title":"Preguntas frecuentes"},{"location":"faq/#al-intentar-hacer-push-el-git-me-pide-un-nombre-de-usuario-y-correo","text":"Si al hacer un commit la primera vez tenemos este aviso Run git config --global user.email \"you@example.com\" git config --global user.name \"Your Name\" to set your account 's default identity. Omit --global to set the identity only in this repository. fatal: unable to auto-detect email address (got ' usuario@yourpc. ( none ) ' ) Entramos nuestor usuario y correo de git y volvemos a hacer push git config --global user.email micorreo@gmail.com git config --global user.name misusuario git pull git add . git commit -m \"change readme\" git push -u origin master","title":"Al intentar hacer push el Git me pide un nombre de usuario y correo"},{"location":"faq/#medium-no-me-deja-publicar-el-post","text":"Si al intenar publicar un Post por primera vez Medium me dice.. \"Publishing from your account is currently limited due to account newness, incomplete profile, or inactivity. Please complete your profile, and use Medium more to unlock publishing. Any posts or responses have been saved to your draft folder and will be available when youre able to publish.\" Medium tiene que validar nuestra cuenta el Post Editamos nuestro perfil con un texto descriptivo y una imagen (no hace falta foto personal si no quereis) Salimos de la sesi\u00f3n de Medium (LogOut) y volvemos a entrar (Login) Si a\u00fan as\u00ed no funciona, esperamos 24h. En principio despu\u00e9s de este periodo nos tendria que dejar publicar sin problemas","title":"Medium no me deja publicar el Post"},{"location":"plugins_leaflet/","text":"5. Plugins Leaflet Gracias a ser un proyecto de c\u00f3digo abierto y de las aportaciones de los usuarios, Leaflet tiene m\u00e1s de 250 plugins o \"peque\u00f1as aplicaciones\" que a\u00f1aden funcionalidades a la libreria. Plugins http://leafletjs.com/plugins.html Success Visitamos la p\u00e1gina de plugins y miramos ejemplos \u00bfC\u00f3mo utilizar un Plugin? 1-Primero debemos buscar en la p\u00e1gina de plugins si existe alguno que nos ayude a solucionar nuestro problema o necesidad 2-Entraremos en la p\u00e1gina GIT del plugin y leeremos su documentaci\u00f3n. Atencion !! A veces la documentaci\u00f3n pueder ser poca y confusa 3.1- Si existe una versi\u00f3n on-line del plugin (URL en CDN), la invocaremos en nuestra aplicaci\u00f3n directamente (mejor opci\u00f3n) 3.2- Si existe una p\u00e1gina de demo podemos mediante crtl+u ver c\u00f3digo fuente la url del plugin 3.3- Si no existe, descargaremos los archivos del plugin - son .js, pero tambie\u0144 pueden ser .css e imagenes - normalmente se encuentran en los directorios /dist o /src y los guardaremos en nuestro proyecto. Ejemplo a\u00f1adir plugin OSM Geocoder Plugin que permite connectar con servicios de Geocodificaci\u00f3nde OSM Plugin https://github.com/k4r573n/leaflet-control-osm-geocoder Creamos archivo leaflet-plugin.html dentro de nuestro directorio /geoweb < html lang = \"es\" > < head > < title > Leaflet ejemplo plugin </ title > < meta charset = \"utf-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta name = \"author\" content = \"autor\" /> < meta name = \"description\" content = \"descripci\u00f3n p\u00e1gina\" > < meta name = \"robots\" content = \"index,follow\" > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.7.1/dist/leaflet.css\" /> < script src = \"https://unpkg.com/leaflet@1.7.1/dist/leaflet.js\" ></ script > <!--Plugin OSMGeocode --> <!--si descargamos 3.3 --> <!--<script src=\"js/Control.OSMGeocoder.js\"></script>--> <!--<link rel=\"stylesheet\" href=\"js/Control.OSMGeocoder.css\" />--> <!--si a\u00f1adimos directamente 3.1--> < script src = \"https://rawgit.com/k4r573n/leaflet-control-osm-geocoder/master/Control.OSMGeocoder.js\" ></ script > < link rel = \"stylesheet\" href = \"https://rawgit.com/k4r573n/leaflet-control-osm-geocoder/master/Control.OSMGeocoder.css\" /> < style > body { margin : 0 ; padding : 0 ; overflow : hidden ; } # map { height : 100 % ; width : 100 % ; } </ style > < script > var map , capa1 ; function init (){ map = L . map ( \"map\" ,{ center : [ 41.6863 , 1.8382 ], zoom : 8 }); capa1 = L . tileLayer ( \"http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" , { maxZoom : 19 , minZoom : 1 , attribution : \"OSM\" }); capa1 . addTo ( map ); //a\u00f1adir plugin var osmGeocoder = new L . Control . OSMGeocoder ({ placeholder : 'Buscar lugar...' }); map . addControl ( osmGeocoder ); } </ script > </ head > < body onLoad = \"init()\" > < div id = \"map\" ></ div > </ body > </ html > \u00bfEditamos index.html Subimos el ejemplo al GitHub? git pull git add . git commit -m \"plugins leaflet\" git push","title":"Plugins leaflet"},{"location":"plugins_leaflet/#5-plugins-leaflet","text":"Gracias a ser un proyecto de c\u00f3digo abierto y de las aportaciones de los usuarios, Leaflet tiene m\u00e1s de 250 plugins o \"peque\u00f1as aplicaciones\" que a\u00f1aden funcionalidades a la libreria. Plugins http://leafletjs.com/plugins.html Success Visitamos la p\u00e1gina de plugins y miramos ejemplos","title":"5. Plugins Leaflet"},{"location":"plugins_leaflet/#como-utilizar-un-plugin","text":"1-Primero debemos buscar en la p\u00e1gina de plugins si existe alguno que nos ayude a solucionar nuestro problema o necesidad 2-Entraremos en la p\u00e1gina GIT del plugin y leeremos su documentaci\u00f3n. Atencion !! A veces la documentaci\u00f3n pueder ser poca y confusa 3.1- Si existe una versi\u00f3n on-line del plugin (URL en CDN), la invocaremos en nuestra aplicaci\u00f3n directamente (mejor opci\u00f3n) 3.2- Si existe una p\u00e1gina de demo podemos mediante crtl+u ver c\u00f3digo fuente la url del plugin 3.3- Si no existe, descargaremos los archivos del plugin - son .js, pero tambie\u0144 pueden ser .css e imagenes - normalmente se encuentran en los directorios /dist o /src y los guardaremos en nuestro proyecto.","title":"\u00bfC\u00f3mo utilizar un Plugin?"},{"location":"plugins_leaflet/#ejemplo-anadir-plugin-osm-geocoder","text":"Plugin que permite connectar con servicios de Geocodificaci\u00f3nde OSM Plugin https://github.com/k4r573n/leaflet-control-osm-geocoder Creamos archivo leaflet-plugin.html dentro de nuestro directorio /geoweb < html lang = \"es\" > < head > < title > Leaflet ejemplo plugin </ title > < meta charset = \"utf-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta name = \"author\" content = \"autor\" /> < meta name = \"description\" content = \"descripci\u00f3n p\u00e1gina\" > < meta name = \"robots\" content = \"index,follow\" > < link rel = \"stylesheet\" href = \"https://unpkg.com/leaflet@1.7.1/dist/leaflet.css\" /> < script src = \"https://unpkg.com/leaflet@1.7.1/dist/leaflet.js\" ></ script > <!--Plugin OSMGeocode --> <!--si descargamos 3.3 --> <!--<script src=\"js/Control.OSMGeocoder.js\"></script>--> <!--<link rel=\"stylesheet\" href=\"js/Control.OSMGeocoder.css\" />--> <!--si a\u00f1adimos directamente 3.1--> < script src = \"https://rawgit.com/k4r573n/leaflet-control-osm-geocoder/master/Control.OSMGeocoder.js\" ></ script > < link rel = \"stylesheet\" href = \"https://rawgit.com/k4r573n/leaflet-control-osm-geocoder/master/Control.OSMGeocoder.css\" /> < style > body { margin : 0 ; padding : 0 ; overflow : hidden ; } # map { height : 100 % ; width : 100 % ; } </ style > < script > var map , capa1 ; function init (){ map = L . map ( \"map\" ,{ center : [ 41.6863 , 1.8382 ], zoom : 8 }); capa1 = L . tileLayer ( \"http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" , { maxZoom : 19 , minZoom : 1 , attribution : \"OSM\" }); capa1 . addTo ( map ); //a\u00f1adir plugin var osmGeocoder = new L . Control . OSMGeocoder ({ placeholder : 'Buscar lugar...' }); map . addControl ( osmGeocoder ); } </ script > </ head > < body onLoad = \"init()\" > < div id = \"map\" ></ div > </ body > </ html > \u00bfEditamos index.html Subimos el ejemplo al GitHub? git pull git add . git commit -m \"plugins leaflet\" git push","title":"Ejemplo a\u00f1adir plugin OSM Geocoder"}]}